/* Copyright (c) 2019, ExtendJ Committers
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect AssignConvertedType {
  // TODO(joqvist): should assignConvertedType return the void type instead of null type?
  /**
   * The assign converted type is used in type inference to get the
   * target type of an inferred method invocation.
   *
   * Returns the null type if there is no target type.
   */
  inh TypeDecl Expr.assignConvertedType();

  // Default equation:
  eq Program.getChild().assignConvertedType() = typeNull();

  // Left side of a dot has no assign converted type:
  eq Dot.getLeft().assignConvertedType() = typeNull();

  eq Declarator.getInit().assignConvertedType() = type();
  eq AssignSimpleExpr.getSource().assignConvertedType() = getDest().type();
  eq ArrayInit.getInit().assignConvertedType() = declType().componentType();
  eq ReturnStmt.getResult().assignConvertedType() = returnType();
  eq EnhancedForStmt.getExpr().assignConvertedType() = iterableTypeAccess().type();

  // Any reference type can be used in string concatenation.
  eq AddExpr.getLeftOperand().assignConvertedType() =
      getRightOperand().type().isString() ? typeObject() : typeNull();

  // Any reference type can be used in string concatenation.
  eq AddExpr.getRightOperand().assignConvertedType() =
      getLeftOperand().type().isString() ? typeObject() : typeNull();

  eq MethodAccess.getArg(int index).assignConvertedType() = typeObject();

  inh TypeDecl Expr.typeObject();
}
