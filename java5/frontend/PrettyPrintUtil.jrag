/* Copyright (c) 2018, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Pretty printing and debug utilities for Java 5+.
 */
aspect PrettyPrintUtil5 {
  @Override public String GenericMethodDecl.toString() {
    StringBuilder params = new StringBuilder();
    for (TypeVariable var : getTypeParameterListNoTransform()) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(var.toString());
    }
    return String.format("<%s> %s", params.toString(), super.toString());
  }

  @Override public String ParMethodDecl.toString() {
    StringBuilder params = new StringBuilder();
    for (Access arg : getTypeArgumentListNoTransform()) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(arg.toString());
    }
    return String.format("<%s> %s", params.toString(), super.toString());
  }

  @Override public String GenericClassDecl.toString() {
    StringBuilder params = new StringBuilder();
    for (TypeVariable var : getTypeParameterListNoTransform()) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(var.toString());
    }
    return String.format("%s<%s>", getID(), params.toString());
  }

  @Override public String ParClassDecl.toString() {
    StringBuilder params = new StringBuilder();
    Parameterization parameterization = getParameterization(); // Token child (no rewrites).
    for (TypeDecl arg : parameterization.args) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(arg.toString());
    }
    return String.format("%s<%s>", getID(), params.toString());
  }

  @Override public String GenericInterfaceDecl.toString() {
    StringBuilder params = new StringBuilder();
    for (TypeVariable var : getTypeParameterListNoTransform()) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(var.toString());
    }
    return String.format("%s<%s>", getID(), params.toString());
  }

  @Override public String ParInterfaceDecl.toString() {
    StringBuilder params = new StringBuilder();
    Parameterization parameterization = getParameterization(); // Token child (no rewrites).
    for (TypeDecl arg : parameterization.args) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(arg.toString());
    }
    return String.format("%s<%s>", getID(), params.toString());
  }

  @Override public String ParTypeAccess.toString() {
    StringBuilder params = new StringBuilder();
    for (Access arg : getTypeArgumentListNoTransform()) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(arg.toString());
    }
    return String.format("%s<%s>", getTypeAccessNoTransform().toString(), params.toString());
  }

  @Override public String ParMethodAccess.toString() {
    StringBuilder params = new StringBuilder();
    for (Access arg : getTypeArgumentListNoTransform()) {
      if (params.length() > 0) {
        params.append(", ");
      }
      params.append(arg.toString());
    }
    return String.format("<%s>%s", params.toString(), super.toString());
  }

  @Override public String Wildcard.toString() {
    return "?";
  }

  @Override public String WildcardExtends.toString() {
    return String.format("? extends %s", getAccessNoTransform().toString());
  }

  @Override public String WildcardSuper.toString() {
    return String.format("? super %s", getAccessNoTransform().toString());
  }

  @Override public String WildcardType.toString() {
    return "?";
  }

  @Override public String WildcardExtendsType.toString() {
    return String.format("? extends %s", getAccessNoTransform().toString());
  }

  @Override public String WildcardSuperType.toString() {
    return String.format("? super %s", getAccessNoTransform().toString());
  }

  @Override public String VariableArityParameterDeclaration.toString() {
    return String.format("%s... %s",
        getTypeAccessNoTransform().toString(),
        getID());
  }
}
