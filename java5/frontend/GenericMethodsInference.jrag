/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2015-2019, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.*;

aspect GenericMethodsInference {
  syn boolean TypeDecl.involvesTypeParameters() circular [false] = false;

  eq TypeVariable.involvesTypeParameters() = true;

  eq ArrayDecl.involvesTypeParameters() = componentType().involvesTypeParameters();

  eq ParClassDecl.involvesTypeParameters() {
    for (TypeDecl arg : getParameterization().args) {
      if (arg.involvesTypeParameters()) {
        return true;
      }
    }
    return false;
  }

  eq ParInterfaceDecl.involvesTypeParameters() {
    for (TypeDecl arg : getParameterization().args) {
      if (arg.involvesTypeParameters()) {
        return true;
      }
    }
    return false;
  }

  eq WildcardExtendsType.involvesTypeParameters() = extendsType().involvesTypeParameters();

  eq WildcardSuperType.involvesTypeParameters() = superType().involvesTypeParameters();

  /*
   * Collects bounds on inferred type variables to find matching types.
   */
  class Constraints {
    /**
     * Set of type bounds for inferred type variables.
     */
    static class ConstraintSet {
      /** Lower type bounds. */
      public Collection<TypeDecl> lower = new HashSet<TypeDecl>(4);

      /** Upper type bounds. */
      public Collection<TypeDecl> upper = new HashSet<TypeDecl>(4);

      /** Equal type bounds. */
      public Collection<TypeDecl> equal = new HashSet<TypeDecl>(4);

      /**
       * Computed type argument.
       *
       * <p>Set to {@code null} before inference starts and if no type matches
       * the bounds.
       */
      public TypeDecl typeArgument;
    }

    private Collection<TypeVariable> typeVariables;

    protected Map<TypeVariable, ConstraintSet> constraintsMap;

    public boolean rawAccess = false;

    public Constraints() {
      typeVariables = new ArrayList<TypeVariable>(4);
      constraintsMap = new HashMap<TypeVariable, ConstraintSet>();
    }

    public void addTypeVariable(TypeVariable T) {
      if (!typeVariables.contains(T)) {
        typeVariables.add(T);
        constraintsMap.put(T, new ConstraintSet());
      }
    }

    public boolean unresolvedTypeArguments() {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        if (set.typeArgument == null) {
          return true;
        }
      }
      return false;
    }

    public String toString() {
      StringBuilder str = new StringBuilder();
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        for (TypeDecl U : set.lower) {
          if (str.length() > 0) {
            str.append("\n");
          }
          str.append(T.fullName() + " :> " + U.fullName());
        }
        for (TypeDecl U : set.upper) {
          if (str.length() > 0) {
            str.append("\n");
          }
          str.append(T.fullName() + " <: " + U.fullName());
        }
        for (TypeDecl U : set.equal) {
          if (str.length() > 0) {
            str.append("\n");
          }
          str.append(T.fullName() + " = " + U.fullName());
        }
      }
      return str.toString();
    }


    public void resolveBounds() {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        if (set.typeArgument == null) {
          set.typeArgument = T.firstBound().type();
        }
      }
    }

    public void resolveEqualityConstraints() {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        for (TypeDecl U : set.equal) {
          if (!typeVariables.contains(U)) {
            // Replace equality constraints for other type variables.
            replaceEqualityConstraints(T, U);
            set.equal.clear();
            // Make U is the only equality constraint for T.
            set.equal.add(U);
            set.typeArgument = U;
            break; // Continue on next type variable.
          } else if (T == U) {
            // Discard constraint.
          } else {
            replaceAllConstraints(T, U); // Rewrite all constraints involving T to use U instead.
            break; // Continue on next type variable.
          }
        }
        if (set.typeArgument == null
            && set.equal.size() == 1
            && set.equal.contains(T)) {
          set.typeArgument = T;
        }
      }
    }

    public void replaceEqualityConstraints(TypeDecl before, TypeDecl after) {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        replaceConstraints(set.equal, before, after);
      }
    }

    public void replaceAllConstraints(TypeDecl before, TypeDecl after) {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        replaceConstraints(set.lower, before, after);
        replaceConstraints(set.upper, before, after);
        replaceConstraints(set.equal, before, after);
      }
    }

    private void replaceConstraints(Collection<TypeDecl> constraints,
        TypeDecl before, TypeDecl after) {
      Collection<TypeDecl> newConstraints = new ArrayList<TypeDecl>();
      for (Iterator<TypeDecl> iter = constraints.iterator(); iter.hasNext(); ) {
        TypeDecl U = iter.next();
        if (U == before) { // TODO: fix parameterized type
          iter.remove();
          newConstraints.add(after);
        }
      }
      constraints.addAll(newConstraints);
    }

    public void resolveSubtypeConstraints() {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        if (set.typeArgument == null && !set.upper.isEmpty()) {
          if (set.upper.size() == 1) {
            set.typeArgument = set.upper.iterator().next();
          } else {
            ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>();
            for (TypeDecl type : set.upper) {
              bounds.add(type);
            }
            set.typeArgument = GLBTypeFactory.glb(bounds);
          }
        }
      }
    }

    public void resolveSupertypeConstraints() {
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        if (set.typeArgument == null && !set.lower.isEmpty()) {
          if (set.lower.size() == 1) {
            set.typeArgument = set.lower.iterator().next();
          } else {
            set.typeArgument = T.lookupLUBType(set.lower).lub();
          }
        }
      }
    }

    /**
     * Computes the direct supertypes of a type.
     */
    protected static Collection<TypeDecl> directSupertypes(TypeDecl t) {
      // TODO(joqvist): this should be an attribute of TypeDecl instead.
      if (t instanceof ClassDecl) {
        ClassDecl type = (ClassDecl) t;
        Collection<TypeDecl> set = new HashSet<TypeDecl>();
        if (type.hasSuperclass()) {
          set.add(type.superclass());
        }
        for (int i = 0; i < type.getNumImplements(); i++) {
          set.add(type.getImplements(i).type());
        }
        return set;
      } else if (t instanceof InterfaceDecl) {
        InterfaceDecl type = (InterfaceDecl) t;
        Collection<TypeDecl> set = new HashSet<TypeDecl>();
        for (int i = 0; i < type.getNumSuperInterface(); i++) {
          set.add(type.getSuperInterface(i).type());
        }
        return set;
      } else if (t instanceof TypeVariable) {
        TypeVariable type = (TypeVariable) t;
        Collection<TypeDecl> set = new HashSet<TypeDecl>();
        for (int i = 0; i < type.getNumTypeBound(); i++) {
          set.add(type.getTypeBound(i).type());
        }
        return set;
      } else {
        throw new Error(String.format(
              "Operation not supported for %s, %s",
              t.fullName(), t.getClass().getName()));
      }
    }

    /**
     * Computes the parameterized supertypes of some type.
     */
    protected static Collection<ParTypeDecl> parameterizedSupertypes(TypeDecl type) {
      // TODO(joqvist): this should be an attribute of TypeDecl instead.
      Collection<ParTypeDecl> result = new HashSet<ParTypeDecl>();
      addParameterizedSupertypes(type, new HashSet<TypeDecl>(), result);
      return result;
    }

    protected static void addParameterizedSupertypes(TypeDecl type,
        Collection<TypeDecl> processed,
        Collection<ParTypeDecl> result) {
      // TODO(joqvist): this should be an attribute of TypeDecl instead.
      if (!processed.contains(type)) {
        processed.add(type);
        if (type.isParameterizedType()) {
          result.add((ParTypeDecl) type);
        }
        for (TypeDecl typeDecl : directSupertypes(type)) {
          addParameterizedSupertypes(typeDecl, processed, result);
        }
      }
    }

    /**
     * Gives the inferred type arguments.
     */
    public Collection<TypeDecl> typeArguments() {
      Collection<TypeDecl> list = new ArrayList<TypeDecl>(typeVariables.size());
      for (TypeVariable T : typeVariables) {
        ConstraintSet set = constraintsMap.get(T);
        list.add(set.typeArgument);
      }
      return list;
    }

    /**
     * Adds A as a lower bound for type variable T.
     */
    public void addSupertypeConstraint(TypeDecl T, TypeDecl A) {
      ConstraintSet set = constraintsMap.get(T);
      set.lower.add(A);
    }

    /**
     * Adds A as an upper bound for type variable T.
     */
    public void addSubtypeConstraint(TypeDecl T, TypeDecl A) {
      ConstraintSet set = constraintsMap.get(T);
      set.upper.add(A);
    }

    /**
     * T = A : T and A are the same type.
     *
     * <p>This assigns type A to the type variable T.
     *
     * <p>It could happen that T and A refer to the same object, if the generic
     * method call is recursive.  It is important to still add the
     * constraint T = T even though it may seen redundant: one type variable
     * represents the type variable in the generic method call, and one type
     * variable represents a type in the context of the method call. Removing
     * a constraint T = T removes information from the type inference and
     * breaks existing tests.  See the regression test generics/method_23p.
     */
    public void addEqualConstraint(TypeDecl T, TypeDecl A) {
      ConstraintSet set = constraintsMap.get(T);
      set.equal.add(A);
    }

    /**
     * A &lt;&lt; F : A is convertible to F by method invocation conversion.
     *
     * <p>Note: convertibleTo and convertibleFrom are not symmetrical.
     * They differ in which side of the relation contains the type variables to
     * be inferred.
     *
     * @param A actual argument type.
     * @param F formal argument type (target type), containing type variables to be inferred.
     */
    public void convertibleTo(TypeDecl A, TypeDecl F) {
      if (!F.involvesTypeParameters()) {
        // F does not involve a type parameter Tj. No constraint is implied on Tj.
        return;
      }
      if (A.isNull()) {
        // A is the type of null. No constraint is implied on Tj.
        return;
      }
      if (A.isUnboxedPrimitive()) {
        // A is a primitive type. A is converted to a reference type U
        // via boxing conversion and this algorithm is applied recursively to
        // the constraint U << F.
        TypeDecl U = A.boxed();
        convertibleTo(U, F);
      } else if (F instanceof TypeVariable) {
        // F = Tj implies the constraint Tj :> A.
        if (typeVariables.contains(F)) {
          addSupertypeConstraint(F, A);
        }
      } else if (F.isArrayDecl()) {
        // If F = U[], where the type U involves Tj, then if A is an array type
        // V[] or a type variable with an upper bound that is an array type
        // V[], where V is a reference type, this algorithm is applied
        // recursively to the constraint V << U.
        TypeDecl U = F.componentType();
        if (!U.involvesTypeParameters()) {
          return;
        }
        if (A.isArrayDecl()) {
          TypeDecl V = A.componentType();
          if (V.isReferenceType()) {
            convertibleTo(V, U);
          }
        } else if (A.isTypeVariable()) {
          TypeVariable t = (TypeVariable) A;
          for (int i = 0; i < t.getNumTypeBound(); i++) {
            TypeDecl typeBound = t.getTypeBound(i).type();
            if (typeBound.isArrayDecl()
                && typeBound.componentType().isReferenceType()) {
              TypeDecl V = typeBound.componentType();
              convertibleTo(V, U);
            }
          }
        }
      } else if (F instanceof ParTypeDecl && !F.isRawType()) {
        ParTypeDecl PF = (ParTypeDecl) F;
        for (ParTypeDecl PA : parameterizedSupertypes(A)) {
          if (PF.genericDecl() == PA.genericDecl()) {
            if (A.isRawType()) {
              rawAccess = true;
            } else {
              java.util.List<TypeDecl> pfArgs = PF.getParameterization().args;
              java.util.List<TypeDecl> paArgs = PA.getParameterization().args;
              for (int i = 0; i < pfArgs.size(); i++) {
                TypeDecl T = pfArgs.get(i);
                if (T.involvesTypeParameters()) {
                  if (!T.isWildcard()) {
                    TypeDecl U = T;
                    TypeDecl V = paArgs.get(i);
                    constraintEqual(V, U);
                  } else if (T instanceof WildcardExtendsType) {
                    TypeDecl U = ((WildcardExtendsType) T).extendsType();
                    TypeDecl S = paArgs.get(i);
                    if (!S.isWildcard()) {
                      TypeDecl V = S;
                      convertibleTo(V, U);
                    } else if (S instanceof WildcardExtendsType) {
                      TypeDecl V = ((WildcardExtendsType) S).extendsType();
                      convertibleTo(V, U);
                    }
                  } else if (T instanceof WildcardSuperType) {
                    TypeDecl U = ((WildcardSuperType) T).superType();
                    TypeDecl S = paArgs.get(i);
                    if (!S.isWildcard()) {
                      TypeDecl V = S;
                      convertibleFrom(V, U);
                    } else if (S instanceof WildcardSuperType) {
                      TypeDecl V = ((WildcardSuperType) S).superType();
                      convertibleFrom(V, U);
                    }
                  }
                }
              }
            }
            break;
          }
        }
      }
    }

    /**
     * A &gt;&gt; F : F is convertible to A by method invocation conversion.
     *
     * <p>Note: convertibleTo and convertibleFrom are not symmetrical.
     * They differ in which side of the relation contains the type variables to
     * be inferred.
     *
     * @param A actual argument type.
     * @param F formal argument type (target type), containing type variables to be inferred.
     */
    public void convertibleFrom(TypeDecl A, TypeDecl F) {
      if (!F.involvesTypeParameters()) {
        // F does not involve a type parameter Tj. No constraint is implied on Tj.
        return;
      } else if (A.isNull()) {
        // A is the type of null. No constraint is implied on Tj.
        return;
      } else if (F instanceof TypeVariable) {
        if (typeVariables.contains(F)) {
          addSubtypeConstraint(F, A);
        }
      } else if (F.isArrayDecl()) {
        TypeDecl U = F.componentType();
        if (A.isArrayDecl()) {
          TypeDecl V = A.componentType();
          convertibleFrom(V, U);
        } else if (A.isTypeVariable()) {
          TypeVariable t = (TypeVariable) A;
          for (int i = 0; i < t.getNumTypeBound(); i++) {
            TypeDecl typeBound = t.getTypeBound(i).type();
            if (typeBound.isArrayDecl()
                && typeBound.componentType().isReferenceType()) {
              TypeDecl V = typeBound.componentType();
              convertibleFrom(V, U);
            }
          }
        }
      } else if (F instanceof ParTypeDecl && !F.isRawType()
          && A instanceof ParTypeDecl && !A.isRawType()) {
        ParTypeDecl PF = (ParTypeDecl) F;
        ParTypeDecl PA = (ParTypeDecl) A;
        java.util.List<TypeDecl> pfArgs = PF.getParameterization().args;
        java.util.List<TypeDecl> paArgs = PA.getParameterization().args;
        TypeDecl G = PF.genericDecl();
        TypeDecl H = PA.genericDecl();
        if (G.subtype(H)) {
          for (int i = 0; i < pfArgs.size(); i++) {
            TypeDecl T = pfArgs.get(i);
            if (T.involvesTypeParameters()) {
              // F has the form G<...,U,...> where U is a type expression that involves Tj.
              if (!T.isWildcard()) {
                TypeDecl U = T;
                if (H != G) {
                  for (ParTypeDecl V : parameterizedSupertypes(F)) {
                    if (V.genericDecl() == H) {
                      if (!V.isRawType()) {
                        // TODO(joqvist): must substitute type parameter i of G for T in H to get V!
                        // See JLS7 Â§15.12.2.7: https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.2.7
                        if (F.subtype((TypeDecl) V)) {
                          convertibleFrom(A, (TypeDecl) V);
                        }
                      }
                      break;
                    }
                  }
                } else if (pfArgs.size() == paArgs.size()) {
                  TypeDecl X = paArgs.get(i);
                  if (!X.isWildcard()) {
                    TypeDecl W = X;
                    constraintEqual(W, U);
                  } else if (X instanceof WildcardExtendsType) {
                    TypeDecl W = ((WildcardExtendsType) X).extendsType();
                    convertibleFrom(W, U);
                  } else if (X instanceof WildcardSuperType) {
                    TypeDecl W = ((WildcardSuperType) X).superType();
                    convertibleTo(W, U);
                  }
                }
              } else if (T instanceof WildcardExtendsType) {
                // F has the form G<..., ? extends U, ...> where U is a type expression
                // that involves Tj.
                TypeDecl U = ((WildcardExtendsType) T).extendsType();
                if (H != G) {
                  for (ParTypeDecl V : parameterizedSupertypes(F)) {
                    if (V.genericDecl() == H) {
                      if (!V.isRawType()) {
                        // Replace type argument Un with ? extends Un in V.
                        ArrayList<TypeDecl> list = new ArrayList<TypeDecl>();
                        for (TypeDecl vArg : V.getParameterization().args) {
                          list.add(vArg.asWildcardExtends());
                        }
                        TypeDecl typeV = ((GenericTypeDecl) H).lookupParTypeDecl(list);
                        convertibleFrom(A, typeV);
                      }
                      break;
                    }
                  }
                } else if (pfArgs.size() == paArgs.size()) {
                  TypeDecl X = paArgs.get(i);
                  if (X instanceof WildcardExtendsType) {
                    TypeDecl W = ((WildcardExtendsType) X).extendsType();
                    convertibleFrom(W, U);
                  }
                }
              } else if (T instanceof WildcardSuperType) {
                // F has the form G<..., ? super U, ...> where U is a type expression
                // that involves Tj.
                TypeDecl U = ((WildcardSuperType) T).superType();
                if (H != G) {
                  for (ParTypeDecl V : parameterizedSupertypes(F)) {
                    if (V.genericDecl() == H) {
                      if (!V.isRawType()) {
                        // Replace type argument Un with ? super Un in V.
                        ArrayList<TypeDecl> list = new ArrayList<TypeDecl>();
                        for (TypeDecl vArg : V.getParameterization().args) {
                          list.add(vArg.asWildcardExtends());
                        }
                        TypeDecl typeV = ((GenericTypeDecl) H).lookupParTypeDecl(list);
                        convertibleFrom(A, typeV);
                      }
                      break;
                    }
                  }
                } else if (pfArgs.size() == paArgs.size()) {
                  TypeDecl X = paArgs.get(i);
                  if (X instanceof WildcardSuperType) {
                    TypeDecl W = ((WildcardSuperType) X).superType();
                    convertibleTo(W, U);
                  }
                }
              }
            }
          }
        }
      } else if (F.isRawType()) {
        rawAccess = true;
      }
    }

    /**
     * T = A : T and A are the same type.
     */
    public void constraintEqual(TypeDecl A, TypeDecl F) {
      if (!F.involvesTypeParameters()) {
        // F does not involve a type parameter Tj. No constraint is implied on Tj.
        return;
      } else if (A.isNull()) {
        // A is the type of null. No constraint is implied on Tj.
        return;
      } else if (F instanceof TypeVariable) {
        if (typeVariables.contains(F)) {
          addEqualConstraint(F, A);
        }
      } else if (F.isArrayDecl()) {
        TypeDecl U = F.componentType();
        if (A.isArrayDecl()) {
          TypeDecl V = A.componentType();
          constraintEqual(V, U);
        } else if (A.isTypeVariable()) {
          TypeVariable t = (TypeVariable) A;
          for (int i = 0; i < t.getNumTypeBound(); i++) {
            TypeDecl typeBound = t.getTypeBound(i).type();
            if (typeBound.isArrayDecl()
                && typeBound.componentType().isReferenceType()) {
              TypeDecl V = typeBound.componentType();
              constraintEqual(V, U);
            }
          }
        }
      } else if (F instanceof ParTypeDecl && !F.isRawType()
          && A instanceof ParTypeDecl) {
        ParTypeDecl PF = (ParTypeDecl) F;
        ParTypeDecl PA = (ParTypeDecl) A;
        java.util.List<TypeDecl> pfArgs = PF.getParameterization().args;
        java.util.List<TypeDecl> paArgs = PA.getParameterization().args;
        if (PF.genericDecl() == PA.genericDecl()) {
          if (A.isRawType()) {
            rawAccess = true;
          } else {
            for (int i = 0; i < pfArgs.size(); i++) {
              TypeDecl T = pfArgs.get(i);
              if (T.involvesTypeParameters()) {
                if (!T.isWildcard()) {
                  TypeDecl U = T;
                  TypeDecl V = paArgs.get(i);
                  constraintEqual(V, U);
                } else if (T instanceof WildcardExtendsType) {
                  TypeDecl U = ((WildcardExtendsType) T).extendsType();
                  TypeDecl S = paArgs.get(i);
                  if (S instanceof WildcardExtendsType) {
                    TypeDecl V = ((WildcardExtendsType) S).extendsType();
                    constraintEqual(V, U);
                  }
                } else if (T instanceof WildcardSuperType) {
                  TypeDecl U = ((WildcardSuperType) T).superType();
                  TypeDecl S = paArgs.get(i);
                  if (S instanceof WildcardSuperType) {
                    TypeDecl V = ((WildcardSuperType) S).superType();
                    constraintEqual(V, U);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /** Computes the least upper bound type. */
  syn lazy TypeDecl LUBType.lub() {
    ArrayList<TypeDecl> list = new ArrayList<TypeDecl>();
    for (int i = 0; i < getNumTypeBound(); i++) {
      list.add(getTypeBound(i).type());
    }
    ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>();
    for (TypeDecl W : LUBType.MEC(list)) {
      TypeDecl C = W instanceof GenericTypeDecl ? lci(Inv(W, list), W) : W;
      bounds.add(C);
    }
    if (bounds.size() == 1) {
      return bounds.iterator().next();
    }
    return lookupLUBType(bounds);
  }

  /**
   * Erased candidate set.
   *
   * <p>The erased candidate set for type parameter Tj, EC,
   * is the intersection of all the sets EST(U) for each
   * U in U1...Uk.
   */
  public static Collection<TypeDecl> LUBType.EC(ArrayList<TypeDecl> list) {
    Collection<TypeDecl> result = new HashSet<TypeDecl>();
    boolean first = true;
    for (TypeDecl U : list) {
      // Erased supertype set of U.
      Collection<TypeDecl> EST = LUBType.EST(U);
      if (first) {
        result.addAll(EST);
        first = false;
      } else {
        result.retainAll(EST);
      }
    }
    return result;
  }

  /**
   * The minimal erased candidate set for Tj
   * is MEC = {V | V in EC, forall  W != V in EC, not W <: V}
   * @return minimal erased candidate set for Tj
   */
  public static Collection<TypeDecl> LUBType.MEC(ArrayList<TypeDecl> list) {
    Collection<TypeDecl> EC = LUBType.EC(list);
    if (EC.size() == 1) {
      return EC;
    }
    Collection<TypeDecl> MEC = new HashSet<TypeDecl>();
    for (TypeDecl V : EC) {
      boolean keep = true;
      for (TypeDecl W : EC) {
        if (!(V instanceof TypeVariable) && V != W && W.subtype(V)) {
          keep = false;
        }
      }
      if (keep) {
        MEC.add(V);
      }
    }
    return MEC;
  }

  /**
   * Relevant invocations of G, Inv(G)
   * Inv(G) = {V | 1 <= i <= k, V in ST(Ui), V = G<...>}
   * @return set of relevant invocations of G, Inv(G)
   */
  public static Collection<ParTypeDecl> LUBType.Inv(TypeDecl G, Collection<TypeDecl> Us) {
    Collection<ParTypeDecl> result = new HashSet<ParTypeDecl>();
    for (TypeDecl U : Us) {
      for (TypeDecl V : LUBType.ST(U)) {
        if (V instanceof ParTypeDecl && !V.isRawType() && ((ParTypeDecl) V).genericDecl() == G) {
          result.add((ParTypeDecl) V);
        }
      }
    }
    return result;
  }

  /**
   * @return least containing invocation (lci)
   */
  public TypeDecl LUBType.lci(Collection<ParTypeDecl> set, TypeDecl G) {
    ArrayList<TypeDecl> list = new ArrayList<TypeDecl>();
    boolean first = true;
    for (ParTypeDecl decl : set) {
      java.util.List<TypeDecl> declArgs = decl.getParameterization().args;
      if (first) {
        first = false;
        for (TypeDecl arg : declArgs) {
          list.add(arg);
        }
      } else {
        for (int i = 0; i < declArgs.size(); i++) {
          list.set(i, lcta(list.get(i), declArgs.get(i)));
        }
      }
    }
    return ((GenericTypeDecl) G).lookupParTypeDecl(list);
  }

  /**
   * Least containing type arguments.
   */
  public TypeDecl LUBType.lcta(TypeDecl X, TypeDecl Y) {
    if (!X.isWildcard() && !Y.isWildcard()) {
      TypeDecl U = X;
      TypeDecl V = Y;
      return U == V ? U : lub(U, V).asWildcardExtends();
    } else if (!X.isWildcard() && Y instanceof WildcardExtendsType) {
      TypeDecl U = X;
      TypeDecl V = ((WildcardExtendsType) Y).extendsType();
      return lub(U, V).asWildcardExtends();
    } else if (!Y.isWildcard() && X instanceof WildcardExtendsType) {
      TypeDecl U = Y;
      TypeDecl V = ((WildcardExtendsType) X).extendsType();
      return lub(U, V).asWildcardExtends();
    } else if (!X.isWildcard() && Y instanceof WildcardSuperType) {
      TypeDecl U = X;
      TypeDecl V = ((WildcardSuperType) Y).superType();
      ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>();
      bounds.add(U);
      bounds.add(V);
      return GLBTypeFactory.glb(bounds).asWildcardSuper();
    } else if (!Y.isWildcard() && X instanceof WildcardSuperType) {
      TypeDecl U = Y;
      TypeDecl V = ((WildcardSuperType) X).superType();
      ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>();
      bounds.add(U);
      bounds.add(V);
      return GLBTypeFactory.glb(bounds).asWildcardSuper();
    } else if (X instanceof WildcardExtendsType && Y instanceof WildcardExtendsType) {
      TypeDecl U = ((WildcardExtendsType) X).extendsType();
      TypeDecl V = ((WildcardExtendsType) Y).extendsType();
      return lub(U, V).asWildcardExtends();
    } else if (X instanceof WildcardExtendsType && Y instanceof WildcardSuperType) {
      TypeDecl U = ((WildcardExtendsType) X).extendsType();
      TypeDecl V = ((WildcardSuperType) Y).superType();
      return U == V ? U : U.typeWildcard();
    } else if (Y instanceof WildcardExtendsType && X instanceof WildcardSuperType) {
      TypeDecl U = ((WildcardExtendsType) Y).extendsType();
      TypeDecl V = ((WildcardSuperType) X).superType();
      return U == V ? U : U.typeWildcard();
    } else if (X instanceof WildcardSuperType && Y instanceof WildcardSuperType) {
      TypeDecl U = ((WildcardSuperType) X).superType();
      TypeDecl V = ((WildcardSuperType) Y).superType();
      ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>();
      bounds.add(U);
      bounds.add(V);
      return GLBTypeFactory.glb(bounds).asWildcardSuper();
    } else {
      throw new Error("lcta not defined for (" + X.getClass().getName()
          + ", " + Y.getClass().getName() + ")");
    }
  }

  /**
   * Computes the least upper bound of two types.
   */
  public TypeDecl LUBType.lub(TypeDecl X, TypeDecl Y) {
    ArrayList<TypeDecl> list = new ArrayList<TypeDecl>(2);
    list.add(X);
    list.add(Y);
    return lub(list);
  }

  /**
   * Computes the least upper bound of a list of types.
   */
  public TypeDecl LUBType.lub(ArrayList<TypeDecl> list) {
    return lookupLUBType(list);
  }

  /** Computes the erased supertype set of type. */
  public static Collection<TypeDecl> LUBType.EST(TypeDecl type) {
    Collection<TypeDecl> result = new HashSet<TypeDecl>();
    for (TypeDecl typeDecl : LUBType.ST(type)) {
      if (typeDecl instanceof TypeVariable) {
        result.add(typeDecl);
      } else {
        result.add(typeDecl.erasure());
      }
    }
    return result;
  }

  /** Computes the supertype set of a type. */
  public static Collection<TypeDecl> LUBType.ST(TypeDecl type) {
    Collection<TypeDecl> result = new HashSet<TypeDecl>();
    LUBType.addSupertypes(result, type);
    return result;
  }

  public static void LUBType.addSupertypes(Collection<TypeDecl> set, TypeDecl t) {
    set.add(t);
    if (t instanceof ClassDecl) {
      ClassDecl type = (ClassDecl) t;
      if (type.hasSuperclass()) {
        addSupertypes(set, type.superclass());
      }
      for (int i = 0; i < type.getNumImplements(); i++) {
        addSupertypes(set, type.getImplements(i).type());
      }
    } else if (t instanceof InterfaceDecl) {
      InterfaceDecl type = (InterfaceDecl) t;
      for (int i = 0; i < type.getNumSuperInterface(); i++) {
        addSupertypes(set, type.getSuperInterface(i).type());
      }
      if (type.getNumSuperInterface() == 0) {
        set.add(type.typeObject());
      }
    } else if (t instanceof TypeVariable) {
      TypeVariable type = (TypeVariable) t;
      for (int i = 0; i < type.getNumTypeBound(); i++) {
        addSupertypes(set, type.getTypeBound(i).type());
      }
      if (type.getNumTypeBound() == 0) {
        set.add(type.typeObject());
      }
    } else if (t instanceof LUBType) {
      LUBType type = (LUBType) t;
      for (int i = 0; i < type.getNumTypeBound(); i++) {
        addSupertypes(set, type.getTypeBound(i).type());
      }
      if (type.getNumTypeBound() == 0) {
        set.add(type.typeObject());
      }
    } else if (! (t instanceof NullType)) {
      throw new Error(String.format(
            "Operation not supported for %s, %s",
            t.fullName(), t.getClass().getName()));
    }
  }
}
