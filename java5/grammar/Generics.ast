/** A generic class declaration. */
GenericClassDecl : ClassDecl ::= Modifiers <ID:String> [SuperClass:Access] Implements:Access*
    BodyDecl* TypeParameter:TypeVariable*;
GenericInterfaceDecl : InterfaceDecl ::= Modifiers <ID:String> SuperInterface:Access* BodyDecl*
    TypeParameter:TypeVariable*;

/**
 * A specific parameterization of a generic class declaration.
 *
 * <p>The parameterization is specified by the Parameterization token.
 *
 * <p>The members declarations of this class are constructed on demand using
 * the BodyDecl nonterminal attribute.  The member declarations are "signature"
 * copies of the original declarations, keeping only the information needed for
 * type analysis.
 */
ParClassDecl : ClassDecl ::=
    TypeParameter:TypeVariable*
    /SubstTypeParam:TypeVariable*/
    <Parameterization:Parameterization>
    [SuperClass:Access]
	Implements:Access*
	/BodyDecl*/;

/**
 * The superclass and implemented interfaces in a raw type are also raw types.
 */
RawClassDecl : ParClassDecl;

/**
 * A specific parameterization of a generic interface declaration.
 *
 * <p>The parameterization is specified by the Parameterization token.
 *
 * <p>The members declarations of this interface are constructed on demand using
 * the BodyDecl nonterminal attribute.  The member declarations are "signature"
 * copies of the original declarations, keeping only the information needed for
 * type analysis.
 */
ParInterfaceDecl : InterfaceDecl ::=
    TypeParameter:TypeVariable*
    /SubstTypeParam:TypeVariable*/
    <Parameterization:Parameterization>
    SuperInterface:Access*
	/BodyDecl*/;

/**
 * The superclass and implemented interfaces in a raw type are also raw types.
 */
RawInterfaceDecl : ParInterfaceDecl;

/** Parameterized type access. */
ParTypeAccess : Access ::= TypeAccess:Access TypeArgument:Access*;

/** Represents a type variable of a parameterized type. */
TypeVariable : ReferenceType ::= Modifiers <ID:String> BodyDecl* Bound:Access*;

/**
 * A type variable that should have its type bounds substituted during type
 * argument bounds checking.
 */
SubstitutedTypeVariable : TypeVariable ::=
    Modifiers <ID:String> BodyDecl* Bound:Access* <Parameterization:Parameterization>;

abstract AbstractWildcard : Access;
Wildcard : AbstractWildcard;
WildcardExtends : AbstractWildcard ::= Access;
WildcardSuper : AbstractWildcard ::= Access;

abstract AbstractWildcardType : TypeDecl;
WildcardType : AbstractWildcardType;
WildcardExtendsType : AbstractWildcardType ::= Access;
WildcardSuperType : AbstractWildcardType ::= Access;

SubstitutedBodyDecl : BodyDecl ::= <Original:BodyDecl> <Parameterization:Parameterization>;

MethodDeclSubstituted : MethodDecl ::= <Original:MethodDecl>;
GenericMethodDeclSubstituted : GenericMethodDecl ::= <Original:GenericMethodDecl>;
GenericMethodDeclErased : GenericMethodDecl ::= <Original:GenericMethodDecl>;
ConstructorDeclSubstituted : ConstructorDecl ::= <Original:ConstructorDecl>;
GenericConstructorDeclSubstituted : GenericConstructorDecl ::= <Original:GenericConstructorDecl>;
GenericConstructorDeclErased : GenericConstructorDecl ::= <Original:GenericConstructorDecl>;
FieldDeclSubstituted : FieldDecl ::= <Original:FieldDecl>;
FieldDeclarationSubstituted : FieldDeclarator ::= <Original:FieldDeclarator>;

/**
 * This is a "signature" copy of a class declaration used inside a
 * parameterized declaration.
 *
 * <p>Member declaration signatures are copied on demand by the BodyDecl NTA.
 */
ClassDeclSubstituted : ClassDecl ::= <Original:TypeDecl> /BodyDecl*/;

/**
 * An erased class declaration. All parameterized type accesses are erased.
 */
ClassDeclErased : ClassDeclSubstituted;

InterfaceDeclSubstituted : InterfaceDecl ::= <Original:TypeDecl>;

/**
 * This is a "signature" copy of a class declaration used inside a
 * parameterized declaration.
 *
 * <p>Member declaration signatures are copied on demand by the BodyDecl NTA.
 */
GenericClassDeclSubstituted : GenericClassDecl ::= <Original:TypeDecl> /BodyDecl*/;

/**
 * An erased class declaration. All parameterized type accesses are erased.
 */
GenericClassDeclErased : GenericClassDeclSubstituted;

GenericInterfaceDeclSubstituted : GenericInterfaceDecl ::= <Original:TypeDecl>;

/**
 * Intersection type.
 * Occurs in, for example, conditional expression type analysis.
 */
LUBType : ReferenceType ::= Modifiers <ID:String> BodyDecl* TypeBound:Access*;
GLBType : ReferenceType ::= Modifiers <ID:String> BodyDecl* TypeBound:Access*;

WildcardsCompilationUnit : CompilationUnit;

BridgeMethodDecl : MethodDecl;
