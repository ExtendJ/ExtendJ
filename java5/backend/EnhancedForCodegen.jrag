/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2017-2018, Jesper Ã–qvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect EnhancedForToBytecode {
  // Code generation.
  syn lazy int EnhancedForStmt.cond_label() = hostType().constantPool().newLabel();
  syn lazy int EnhancedForStmt.update_label() = hostType().constantPool().newLabel();
  syn lazy int EnhancedForStmt.end_label() = hostType().constantPool().newLabel();

  syn lazy int EnhancedForStmt.extraLocalIndex() = localNum();
  eq EnhancedForStmt.getVariableDecl().localNum() =
      localNum() + (getExpr().type().isArrayDecl() ? 2 : 1);
  eq EnhancedForStmt.getStmt().localNum() =
      getVariableDecl().localNum() + getTypeAccess().type().variableSize();

  // EnhancedForStmt can be both break and continue target.
  eq EnhancedForStmt.break_label() = end_label();
  eq EnhancedForStmt.continue_label() = update_label();

  syn lazy int EnhancedForStmt.variableScopeEndLabel(CodeGeneration gen) =
      gen.variableScopeLabel();

  public void EnhancedForStmt.createBCode(CodeGeneration gen) {
    VariableDeclarator var = getVariableDecl();
    gen.addLocalVariableEntryAtCurrentPC(var.name(), var.type(),
        extraLocalIndex(), variableScopeEndLabel(gen));
    TypeDecl exprType = getExpr().type();
    TypeDecl targetType = getTypeAccess().type();
    if (exprType.isArrayDecl()) {
      getExpr().createBCode(gen);
      getExpr().emitCastTo(gen, exprType); // The expression may need a cast.
      gen.ASTORE(extraLocalIndex(), exprType);
      IntegerLiteral.push(gen, 0);
      gen.ISTORE(extraLocalIndex() + 1);
      gen.addLabel(cond_label());
      gen.ILOAD(extraLocalIndex() + 1);
      gen.ALOAD(extraLocalIndex(), exprType);
      gen.ARRAYLENGTH();
      gen.IF_ICMPGE(end_label());
      gen.ALOAD(extraLocalIndex(), exprType);
      gen.ILOAD(extraLocalIndex() + 1);
      exprType.componentType().emitArrayLoad(gen);
      exprType.componentType().emitCastTo(gen, targetType);
      targetType.emitStoreLocal(gen, var.localNum());
      getStmt().createBCode(gen);
      gen.addLabel(update_label());
      gen.IINC(extraLocalIndex() + 1, 1);
      gen.GOTO(cond_label());
      gen.addLabel(end_label());
    } else {
      TypeDecl typeIterable = lookupType("java.lang", "Iterable");
      TypeDecl typeIterator = lookupType("java.util", "Iterator");
      MethodDecl iteratorMethod = getMethod(typeIterable, "iterator");
      MethodDecl hasNextMethod = getMethod(typeIterator, "hasNext");
      MethodDecl nextMethod = getMethod(typeIterator, "next");
      getExpr().createBCode(gen);
      iteratorMethod.emitInvokeMethod(gen, typeIterable);
      gen.ASTORE(extraLocalIndex(), typeIterator);
      gen.addLabel(cond_label());
      gen.ALOAD(extraLocalIndex(), typeIterator);
      hasNextMethod.emitInvokeMethod(gen, typeIterator);
      gen.IFEQ(end_label());
      gen.ALOAD(extraLocalIndex(), typeIterator);
      nextMethod.emitInvokeMethod(gen, typeIterator);
      if (!targetType.boxed().isUnknown()) {
        gen.CHECKCAST(targetType.boxed());
        targetType.boxed().emitCastTo(gen, targetType);
        targetType.emitStoreLocal(gen, var.localNum());
      } else {
        gen.CHECKCAST(targetType);
        gen.ASTORE(var.localNum(), targetType);
      }
      getStmt().createBCode(gen);
      gen.addLabel(update_label());
      gen.GOTO(cond_label());
      gen.addLabel(end_label());
    }
    gen.addVariableScopeLabel(variableScopeEndLabel(gen));
  }

  /**
   * Finds one method with the given name, and no parameters, in the specified
   * type.
   * @param type type to search for the method declaration
   * @param name name of the method
   * @return method declaration
   */
  protected static MethodDecl ASTNode.getMethod(TypeDecl type, String name) {
    Collection<MethodDecl> methods = (Collection<MethodDecl>) type.memberMethods(name);
    for (MethodDecl method : methods) {
      if (method.getNumParameter() == 0) {
        return method;
      }
    }
    throw new Error("Could not find " + type.typeName() +
        "." + name + "()");
  }
}
