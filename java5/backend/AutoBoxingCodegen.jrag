/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2017, Jesper Ã–qvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Refines code generation to use Java 5 autoboxing conversions.
 */
aspect AutoBoxingCodegen {
  refine CodeGeneration void BooleanType.emitCastTo(CodeGeneration gen, TypeDecl type) {
    // For a well-typed expression, the target type will be either
    // java.lang.Boolean or BooleanType, so we use type equality to
    // determine if a boxing operation is needed.
    if (type != this) {
      boxed().emitBoxingOperation(gen);
    }
  }

  void ReferenceType.byteToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeByte().boxed().byteToThis(gen);
    } else {
      unboxed().byteToThis(gen);
      emitBoxingOperation(gen);
    }
  }

  void ReferenceType.charToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeChar().boxed().charToThis(gen);
    } else {
      unboxed().charToThis(gen);
      emitBoxingOperation(gen);
    }
  }

  void ReferenceType.shortToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeShort().boxed().shortToThis(gen);
    } else {
      unboxed().shortToThis(gen);
      emitBoxingOperation(gen);
    }
  }

  void ReferenceType.intToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeInt().boxed().intToThis(gen);
    } else {
      unboxed().intToThis(gen); // TODO(joqvist): is this redundant?
      emitBoxingOperation(gen);
    }
  }

  void ReferenceType.longToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeLong().boxed().longToThis(gen);
    } else {
      unboxed().longToThis(gen); // TODO(joqvist): is this redundant?
      emitBoxingOperation(gen);
    }
  }

  void ReferenceType.floatToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeFloat().boxed().floatToThis(gen);
    } else {
      unboxed().floatToThis(gen); // TODO(joqvist): is this redundant?
      emitBoxingOperation(gen);
    }
  }

  void ReferenceType.doubleToThis(CodeGeneration gen) {
    if (isUnknown()) {
      throw new Error("Trying to cast to Unknown");
    }
    if (!isNumericType()) {
      typeDouble().boxed().doubleToThis(gen);
    } else {
      unboxed().doubleToThis(gen); // TODO(joqvist): is this redundant?
      emitBoxingOperation(gen);
    }
  }

  protected void TypeDecl.emitBoxingOperation(CodeGeneration gen) {
    // Box the value on the stack into this Reference type.
    String classname = constantPoolName();
    String desc = "(" + unboxed().typeDescriptor() + ")" + typeDescriptor();
    String name = "valueOf";
    int index = gen.constantPool().addMethodref(classname, name, desc);
    gen.INVOKESTATIC(index, 1, this);
  }

  // Code generation for Unboxing Conversion.
  refine CodeGeneration
  public void ReferenceType.emitCastTo(CodeGeneration gen, TypeDecl type) {
    if (type instanceof PrimitiveType) {
      if (unboxed().isUnknown()) {
        emitCastTo(gen, type.boxed());
        type.boxed().emitUnboxingOperation(gen);
      } else {
        emitUnboxingOperation(gen);
        unboxed().emitCastTo(gen, type);
      }
    } else {
      type = type.erasure(); // Erase the target type!
      if (!subtype(type) && !type.isNull()) {
        gen.CHECKCAST(type);
      }
    }
  }

  protected void TypeDecl.emitUnboxingOperation(CodeGeneration gen) {
    // Unbox the value on the stack from this Reference type.
    String classname = constantPoolName();
    String desc = "(" + ")" + unboxed().typeDescriptor();
    String name = unboxed().name() + "Value";
    int index = gen.constantPool().addMethodref(classname, name, desc);
    gen.INVOKEVIRTUAL(index, 1, unboxed());
  }

  /**
   * Generate unboxing code for conditions
   * 14.9 If, 14.12 While, 14.13 Do, 14.14 For
   *
   * branchTrue is used to emit the condition from these constructs
   * refine behavior to include unboxing of the value when needed
   */
  refine CreateBCode public void Expr.branchTrue(CodeGeneration gen, int target) {
    // Branch when true.
    if (type().isReferenceType()) {
      createBCode(gen);
      emitCastTo(gen, typeBoolean());
      gen.IFNE(target);
    } else {
      refined(gen, target);
    }
  }

  refine CreateBCode public void Expr.branchFalse(CodeGeneration gen, int target) {
    // Branch when false.
    if (type().isReferenceType()) {
      createBCode(gen);
      emitCastTo(gen, typeBoolean());
      gen.IFEQ(target);
    } else {
      refined(gen, target);
    }
  }

  /**
   * An enum case label.
   */
  class EnumLabel extends CaseLabel {
    public EnumLabel(int index, ConstCase cc) {
      super(index, cc.label());
    }
  }


  // 14.11 Switch
  // Refine swithch code generation to handle autoboxing and enum types.
  refine CreateBCode public void SwitchStmt.createBCode(CodeGeneration gen) {
    super.createBCode(gen);
    int cond_label = gen.constantPool().newLabel();
    int switch_label = gen.constantPool().newLabel();

    ArrayList<CaseLabel> cases = new ArrayList<CaseLabel>();
    if (getExpr().type().isEnumDecl()) {
      enumIndexExpr().createBCode(gen);
      Map<EnumConstant, Integer> enumIndices = hostType().enumIndices(getExpr().type());
      for (ConstCase cc : constCases()) {
        cases.add(new EnumLabel(enumIndices.get((EnumConstant) cc.getValue().varDecl()), cc));
      }
    } else {
      getExpr().createBCode(gen);
      if (getExpr().type().isReferenceType()) {
        getExpr().type().emitUnboxingOperation(gen);
      }
      for (ConstCase cc : constCases()) {
        cases.add(new CaseLabel(cc));
      }
    }

    gen.SWITCH(cases, defaultLabel());

    getBlock().createBCode(gen);

    gen.addLabel(end_label());
  }

  // 15.12.2 Determine Method Signature.

  // 15.14.2 Postix Increment Operator ++
  // 15.14.3 Postix Decrement Operator --
  refine CreateBCode public void Unary.emitPostfix(CodeGeneration gen, int constant) {
    Expr operand = getOperand();
    while (operand instanceof ParExpr) {
      operand = ((ParExpr) operand).getExpr();
    }
    Access access = ((Access) operand).lastAccess();
    access.createAssignLoadDest(gen);
    if (needsPush()) {
      access.createPushAssignmentResult(gen);
    }
    TypeDecl type = access.type().binaryNumericPromotion(typeInt());
    access.type().emitCastTo(gen, type); // Added for AutoBoxing.
    type.emitPushConstant(gen, constant);
    type.add(gen);
    type.emitCastTo(gen, access.type());
    access.emitStore(gen);
  }

  // 15.15.1 Prefix Increment Operator ++
  // 15.15.2 Prefix Decrement Operator --
  refine CreateBCode public void Unary.emitPrefix(CodeGeneration gen, int constant) {
    Expr operand = getOperand();
    while (operand instanceof ParExpr) {
      operand = ((ParExpr) operand).getExpr();
    }
    Access access = ((Access) operand).lastAccess();
    access.createAssignLoadDest(gen);
    TypeDecl type = access.type().binaryNumericPromotion(typeInt());
    access.type().emitCastTo(gen, type); // Added for AutoBoxing.
    type.emitPushConstant(gen, constant);
    type.add(gen);
    type.emitCastTo(gen, access.type());
    if (needsPush()) {
      access.createPushAssignmentResult(gen);
    }
    access.emitStore(gen);
  }

  refine CreateBCode public void ArrayCreationExpr.createBCode(CodeGeneration gen) {
    if (hasArrayInit()){
      getArrayInit().createBCode(gen);
    } else {
      getTypeAccess().createBCode(gen); // push array sizes
      if (type().componentType().isPrimitive() && !type().componentType().isReferenceType()) {
        gen.NEWARRAY(type());
      } else {
        if (numArrays() == 1) {
          gen.ANEWARRAY(type());
        } else {
          gen.MULTIANEWARRAY(type(), numArrays());
        }
      }
    }
  }

  refine CreateBCode public void ArrayTypeWithSizeAccess.createBCode(CodeGeneration gen) {
    getAccess().createBCode(gen);
    getExpr().createBCode(gen);
    if (getExpr().type().isReferenceType()) {
      getExpr().type().emitUnboxingOperation(gen);
    }
  }

  refine CreateBCode public void ArrayInit.createBCode(CodeGeneration gen) {
    IntegerLiteral.push(gen, getNumInit());
    if (type().componentType().isPrimitive() && !type().componentType().isReferenceType()) {
      gen.NEWARRAY(type());
    } else {
      gen.ANEWARRAY(type());
    }
    for (int i = 0; i < getNumInit(); i++) {
      gen.DUP();
      IntegerLiteral.push(gen, i);
      getInit(i).createBCode(gen);
      if (getInit(i) instanceof ArrayInit) {
        gen.AASTORE();
      } else {
        getInit(i).emitAssignConvTo(gen, expectedType());
        expectedType().emitArrayStore(gen);
      }
    }
  }

  refine CodeGeneration
  void TypeDecl.emitAssignConvTo(CodeGeneration gen, TypeDecl type) {
    if (!type.isIntegralType() || !isIntegralType() || type.isLong()
        || type.isReferenceType() || isReferenceType()) {
      emitCastTo(gen, type);
    }
  }


  protected void Unary.boxingGen(CodeGeneration gen) {
    getOperand().createBCode(gen);
    TypeDecl type = getOperand().type();
    if (type.isReferenceType()) {
      type.emitCastTo(gen, type());
    }
    emitOperation(gen);
  }

  public void MinusExpr.createBCode(CodeGeneration gen) {
    boxingGen(gen);
  }

  public void PlusExpr.createBCode(CodeGeneration gen) {
    boxingGen(gen);
  }

  public void BitNotExpr.createBCode(CodeGeneration gen) {
    boxingGen(gen);
  }

  refine CreateBCode public void AssignExpr.createBCode(CodeGeneration gen) {
    TypeDecl dest = getDest().type();
    TypeDecl source = getSource().type();
    TypeDecl type;
    if (dest.isNumericType() && source.isNumericType()) {
      type = dest.binaryNumericPromotion(source);
    } else if (dest.isBoolean() && source.isBoolean()) {
      type = dest.isReferenceType() ? dest.unboxed() : dest;
    } else {
      type = dest;
    }
    getDest().createAssignLoadDest(gen);
    dest.emitCastTo(gen, type);
    getSource().createBCode(gen);
    getSource().emitCastTo(gen, type);
    emitAssignOp(gen, type);
    type.emitCastTo(gen, dest);
    if (needsPush()) {
      getDest().createPushAssignmentResult(gen);
    }
    getDest().emitStore(gen);
  }

  public void EqualityExpr.branchTrue(CodeGeneration gen, int target) {
    // Branch when true.
    if (isConstant()) {
      if (isTrue()) {
        gen.GOTO(target);
        return;
      }
    } else {
      TypeDecl type = getLeftOperand().type();
      if (type.isNumericType()
          && !(type.isReferenceType() && getRightOperand().type().isReferenceType())) {
        type = binaryNumericPromotedType();
        getLeftOperand().createBCode(gen);
        getLeftOperand().emitCastTo(gen, type); // Binary numeric promotion.
        getRightOperand().createBCode(gen);
        getRightOperand().emitCastTo(gen, type); // Binary numeric promotion.
      } else if (type.isBoolean() && type != getRightOperand().type()) {
        type = binaryNumericPromotedType();
        getLeftOperand().createBCode(gen);
        getLeftOperand().emitCastTo(gen, type); // Binary numeric promotion.
        getRightOperand().createBCode(gen);
        getRightOperand().emitCastTo(gen, type); // Binary numeric promotion.
      } else {
        getLeftOperand().createBCode(gen);
        getRightOperand().createBCode(gen);
      }
      compareBranch(gen, target, type);
    }
  }

  public void EqualityExpr.branchFalse(CodeGeneration gen, int target) {
    // Branch when false.
    if (isConstant()) {
      if (isFalse()) {
        gen.GOTO(target);
        return;
      }
    } else {
      TypeDecl type = getLeftOperand().type();
      if (type.isNumericType() && !(type.isReferenceType() && getRightOperand().type().isReferenceType())) {
        type = binaryNumericPromotedType();
        getLeftOperand().createBCode(gen);
        getLeftOperand().emitCastTo(gen, type); // Binary numeric promotion.
        getRightOperand().createBCode(gen);
        getRightOperand().emitCastTo(gen, type); // Binary numeric promotion.
      } else if (type.isBoolean() && type != getRightOperand().type()) {
        type = binaryNumericPromotedType();
        getLeftOperand().createBCode(gen);
        getLeftOperand().emitCastTo(gen, type); // Binary numeric promotion.
        getRightOperand().createBCode(gen);
        getRightOperand().emitCastTo(gen, type); // Binary numeric promotion.
      } else {
        getLeftOperand().createBCode(gen);
        getRightOperand().createBCode(gen);
      }
      compareNotBranch(gen, target, type);
    }
  }

  refine CreateBCode public void ArrayAccess.createBCode(CodeGeneration gen) {
    prevExpr().createBCode(gen);
    prevExpr().emitCastTo(gen, type().arrayType());
    getExpr().createBCode(gen);
    getExpr().emitCastTo(gen, typeInt());
    type().emitArrayLoad(gen);
  }

  refine CreateBCode public void ArrayAccess.createAssignSimpleLoadDest(CodeGeneration gen) {
    prevExpr().createBCode(gen);
    prevExpr().emitCastTo(gen, type().arrayType());
    getExpr().createBCode(gen);
    getExpr().emitCastTo(gen, typeInt());
  }

  refine CreateBCode public void ArrayAccess.createAssignLoadDest(CodeGeneration gen) {
    prevExpr().createBCode(gen);
    prevExpr().emitCastTo(gen, type().arrayType());
    gen.DUP();
    getExpr().createBCode(gen);
    getExpr().emitCastTo(gen, typeInt());
    gen.DUP_X1(typeInt());
    type().emitArrayLoad(gen);
  }

  public void ConditionalExpr.emitBooleanCondition(CodeGeneration gen) {
    super.emitBooleanCondition(gen);
    if (type().isReferenceType()) {
      type().emitBoxingOperation(gen);
    }
  }

}
