/* Copyright (c) 2017, Jesper Ã–qvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// Stack map frames were introduced in bytecode version 50 (Java 6).
aspect StackMapTable {
  /**
   * Bytecode attribute for stack map frames.
   */
  public class StackMapTableAttribute extends Attribute {
    public StackMapTableAttribute(CodeGeneration codeGen) {
      super(codeGen.constantPool(), "StackMapTable");

      java.util.List<StackFrame> frames = codeGen.stackFrames();
      u2(frames.size());
      for (StackFrame frame : frames) {
        frame.emit(this, codeGen.constantPool());
      }
    }
  }

  refine Attributes
  static Collection<Attribute> ASTNode.codeAttributes(CodeGeneration codeGen, MethodDecl m) {
    Collection<Attribute> attributes = refined(codeGen, m);

    if (!codeGen.stackFrames().isEmpty()) {
      attributes.add(new StackMapTableAttribute(codeGen));
    }
    return attributes;
  }

}
