# Copyright (c) 2015-2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

## this file is used to generate java5/frontend/PrettyPrint.jadd

AnnotationDecl [[$Modifiers@interface $ID {
  $join(BodyDecls,"\n\n")
}]]

AnnotationMethodDecl [[
$if(hasDocComment)#docComment$endif
$Modifiers$TypeAccess $ID()$if(hasDefaultValue) default $DefaultValue$endif;]]

Annotation [[@$Access$if(hasElementValuePair)($join(ElementValuePairList,", "))$endif]]

ElementValuePair [[$Name = $ElementValue]]
ElementConstantValue  [[$Expr]]
ElementAnnotationValue  [[$Annotation]]
ElementArrayValue  [[{ $join(ElementValueList,", ") }]]

GenericMethodDecl [[
$if(hasDocComment)#docComment$endif
$Modifiers<$join(TypeParameterList,", ")> $TypeAccess $ID($join(ParameterList,", "))$if(hasExceptions) throws $join(ExceptionList,", ")$endif$if(hasBlock) $Block$else;$endif]]

GenericConstructorDecl [[
$if(!isImplicitConstructor)
$if(hasDocComment)#docComment$endif
$Modifiers<$join(TypeParameterList,", ")> $ID($join(ParameterList,", "))$if(hasExceptions) throws $join(ExceptionList,", ")$endif {
  $ParsedConstructorInvocation

  $join(#blockStmts,"\n")
}$endif]]

TypeVariable [[$ID$if(hasBound) extends $join(BoundList," & ")$endif]]
ParTypeAccess [[$TypeAccess<$join(TypeArgumentList,", ")>]]

GenericClassDecl [[
$if(hasDocComment)#docComment$endif
$(Modifiers)class $ID<$join(TypeParameterList,", ")>$if(hasSuperClass) extends $SuperClass$endif$if(hasImplements) implements $join(Implementss,", ")$endif {
  $join(BodyDecls,"\n\n")
}]]

GenericInterfaceDecl [[
$if(hasDocComment)#docComment$endif
$(Modifiers)interface $ID<$join(ArgumentList,", ")>$if(hasSuperInterface) extends $join(SuperInterfaceList,", ")$endif {
  $join(BodyDecls,"\n\n")
}]]

GenericInterfaceDecl [[
$if(hasDocComment)#docComment$endif
$(Modifiers)interface $ID<$join(TypeParameterList,", ")>$if(hasSuperInterface) extends $join(SuperInterfaceList,", ")$endif {
  $join(BodyDecls,"\n\n")
}]]

Wildcard [[?]]
WildcardExtends [[? extends $Access]]
WildcardSuper [[? super $Access]]

SingleStaticImportDecl [[import static $Access.$ID;]]
StaticImportOnDemandDecl [[import static $Access.*;]]

VariableArityParameterDeclaration [[$Modifiers$TypeAccess... $ID]]

EnumConstant [[
$(Modifiers)$ID$if(hasBodyDecl)($join(ArgList,", ")) {
  $join(BodyDeclList,"\n\n")
}$else$if(hasArg)($join(ArgList,", "))$endif$endif]]
