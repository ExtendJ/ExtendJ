/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Modifiers {
  syn boolean Modifiers.isDefault() = hasModifier("default");

  syn boolean MethodDecl.isDefault() = getModifiers().isDefault();

  refine Modifiers
  eq MethodDecl.isAbstract() {
    return getModifiers().isAbstract() || (hostType().isInterfaceDecl() && !isStatic() && !isDefault());
  }


  // 8.4.3
  refine Enums eq MethodDecl.modifierProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (hostType().isClassDecl()) {
      // 8.4.3.1
      if (!hostType().isEnumDecl() && isAbstract() && !hostType().isAbstract()) {
        problems.add(error("class must be abstract to include abstract methods"));
      }
      // 8.4.3.1
      if (isAbstract() && isPrivate()) {
        problems.add(error("method may not be abstract and private"));
      }
      // 8.4.3.1
      // 8.4.3.2
      if (isAbstract() && isStatic()) {
        problems.add(error("method may not be abstract and static"));
      }
      if (isAbstract() && isSynchronized()) {
        problems.add(error("method may not be abstract and synchronized"));
      }
      // 8.4.3.4
      if (isAbstract() && isNative()) {
        problems.add(error("method may not be abstract and native"));
      }
      if (isAbstract() && isStrictfp()) {
        problems.add(error("method may not be abstract and strictfp"));
      }
      if (isNative() && isStrictfp()) {
        problems.add(error("method may not be native and strictfp"));
      }
      if (isDefault()) {
        problems.add(error("non-interface methods may not use the default modifier"));
      }
    }
    if (hostType().isInterfaceDecl()) {
      // 9.4
      if (isAbstract()) {
        if (isStatic()) {
          problems.add(errorf("interface method %s in %s cannot be both abstract and static",
              signature(), hostType().typeName()));
        }
        if (isDefault()) {
          problems.add(errorf("interface method %s in %s cannot be both abstract and default",
              signature(), hostType().typeName()));
        }
        if (isStrictfp()) {
          problems.add(errorf("interface method %s in %s cannot be both abstract and strictfp",
              signature(), hostType().typeName()));
        }
      }
      if (isStatic() && isDefault()) {
        problems.add(errorf("interface method %s in %s cannot be both static and default",
            signature(), hostType().typeName()));
      }
      if (isNative()) {
        problems.add(errorf("interface method %s in %s may not be native",
            signature(), hostType().typeName()));
      }
      if (isSynchronized()) {
        problems.add(errorf("interface method %s in %s may not be synchronized",
            signature(), hostType().typeName()));
      }
      if (isProtected()) {
        problems.add(errorf("interface method %s in %s may not be protected",
            signature(), hostType().typeName()));
      }
      if (isPrivate()) {
        problems.add(errorf("interface method %s in %s may not be private",
            signature(), hostType().typeName()));
      } else if (isFinal()) {
        problems.add(errorf("interface method %s in %s may not be final",
            signature(), hostType().typeName()));
      }
    }
    return problems;
  }

  refine Modifiers eq TypeDecl.modifierProblems() {
    Collection<Problem> problems = refined();
    if (getModifiers().hasModifier("default")) {
      problems.add(error("the default modifier is only legal for interface method declarations"));
    }
    return problems;
  }

  // 8.4.3
  refine Modifiers eq Modifiers.modifierProblems() {
    Collection<Problem> problems = refined();
    if (numModifier("default") > 1) {
      problems.add(error("only one default allowed"));
    }
    return problems;
  }
}
