/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect FunctionalInterface {

  syn lazy boolean TypeDecl.isFunctionalInterface() = false;
  eq InterfaceDecl.isFunctionalInterface() = isFunctional();

  syn lazy boolean InterfaceDecl.isFunctional();

  //8.4.2
  syn boolean GenericMethodDecl.sameSignature(MethodDecl m) {
    if (!m.isGeneric()) {
      return false;
    }
    GenericMethodDecl gm = m.genericDecl();
    return !(!name().equals(gm.name()) || !sameTypeParameters(gm) || !sameFormalParameters(gm));
  }

  syn lazy boolean MethodDecl.subsignatureTo(MethodDecl m) {
    if (fullSignature().equals(m.fullSignature())) {
      return true;
    } else if (fullSignature().equals(m.signature())) {
      return true;
    } else {
      return false;
    }
  }

  syn lazy boolean GenericMethodDecl.subsignatureTo(MethodDecl m) {
    if (m.isGeneric()) {
      GenericMethodDecl gm = m.genericDecl();
      if (this == gm) {
        return true;
      }
      return sameSignature(gm);
    } else {
      // A generic method can never be subsignature to a non-generic method.
      return false;
    }
  }

  //8.4.5
  syn lazy boolean MethodDecl.returnTypeSubstitutableFor(MethodDecl m) {
    TypeDecl t1 = type();
    TypeDecl t2 = m.type();
    if (t1 instanceof VoidType && t2 instanceof VoidType) {
      return true;
    } else if (t1 instanceof PrimitiveType && t2 instanceof PrimitiveType) {
      PrimitiveType p1 = (PrimitiveType) t1;
      PrimitiveType p2 = (PrimitiveType) t2;
      return p1 == p2;
    } else if (t1.isReferenceType() && t2.isReferenceType()) {
      if (t1.strictSubtype(t2)) {
        return true;
      } else {
        return !sameSignature(m) && (t1 == t2.erasure() || t1.erasure() == t2);
      }
    } else {
      return false;
    }
  }


  //8.4.4
  syn lazy boolean GenericMethodDecl.sameTypeParameters(GenericMethodDecl gm) {
    if (getNumTypeParameter() != gm.getNumTypeParameter()) {
      return false;
    }

    for (int i = 0; i < getNumTypeParameter(); i++) {
      TypeVariable tv1 = getTypeParameter(i);
      TypeVariable tv2 = gm.getTypeParameter(i);
      if (!tv1.sameType(tv2)) {
        return false;
      }
    }
    return true;
  }

  //8.4.2
  syn lazy boolean GenericMethodDecl.sameFormalParameters(GenericMethodDecl gm) {
    if (getNumParameter() != gm.getNumParameter()) {
      return false;
    }
    if (getNumParameter() == 0) {
      return true;
    }

    for (int i = 0; i < getNumParameter(); i++) {
      ParameterDeclaration p1 = getParameter(i);
      ParameterDeclaration p2 = gm.getParameter(i);
      Access a1 = p1.getTypeAccess();
      Access a2 = p2.getTypeAccess();
      if (!a1.sameType(a2)) {
        return false;
      }
    }
    return true;
  }

  syn lazy boolean TypeVariable.sameType(TypeVariable tv2) {
    TypeVariable tv1 = this;
    if (tv1.getNumTypeBound() != tv2.getNumTypeBound()) {
      return false;
    }

    // The bounds have to be the same in the way that a bound
    // that exists in type variable tv1 must exist exactly the same
    // number of times in tv2, but the order doesn't matter.

    boolean[] checkedBound = new boolean[tv1.getNumTypeBound()];

    for (int j = 0; j < tv1.getNumTypeBound(); j++) {
      boolean found = false;
      for (int k = 0; k < tv2.getNumTypeBound(); k++) {
        if (checkedBound[k]) {
          continue;
        }
        Access a1 = tv1.getTypeBound(j);
        Access a2 = tv2.getTypeBound(k);

        if (a1.sameType(a2)) {
          checkedBound[k] = true;
          found = true;
          break;
        }
      }
      if (!found) {
        return false;
      }
    }
    return true;
  }

  /**
   * Checks that two type accesses are the same, while taking type variable
   * substitution into account.
   */
  public boolean Access.sameType(Access a) {
    if (this instanceof ArrayTypeAccess && a instanceof ArrayTypeAccess) {
      ArrayTypeAccess at1 = (ArrayTypeAccess) this;
      ArrayTypeAccess at2 = (ArrayTypeAccess) a;
      return at1.sameType(at2);
    } else if (this instanceof AbstractWildcard && a instanceof AbstractWildcard) {
      AbstractWildcard w1 = (AbstractWildcard) this;
      AbstractWildcard w2 = (AbstractWildcard) a;
      return w1.sameType(w2);
    } else if (this instanceof TypeAccess && a instanceof TypeAccess) {
      TypeAccess t1 = (TypeAccess) this;
      TypeAccess t2 = (TypeAccess) a;
      return t1.sameType(t2);
    } else if (this instanceof ParTypeAccess && a instanceof ParTypeAccess) {
      ParTypeAccess pta1 = (ParTypeAccess) this;
      ParTypeAccess pta2 = (ParTypeAccess) a;
      return pta1.sameType(pta2);
    } else {
      return false;
    }
  }

  public boolean TypeAccess.sameType(TypeAccess t) {
    // First, two type variables that are to be compared are checked to see if
    // they are both declared by methods and that one of the methods is not
    // inside the scope of the other method. If this is the case it is enough
    // to simply check that the positions are equal.  Otherwise the types has
    // to equal.

    if (type() instanceof TypeVariable && t.type() instanceof TypeVariable) {
      TypeVariable t1 = (TypeVariable) type();
      TypeVariable t2 = (TypeVariable) t.type();
      if (t1.typeVarInMethod() && t2.typeVarInMethod()
          && t1.genericMethodLevel() == t2.genericMethodLevel()) {
        return t1.typeVarPosition() == t2.typeVarPosition();
      } else {
        if (t1.enclosingType() == t2.enclosingType()) {
          return t1 == t2;
        } else {
          return t1.sameType(t2);
        }
      }
    } else if (type() instanceof TypeVariable && !(t.type() instanceof TypeVariable)) {
      TypeVariable t1 = (TypeVariable) type();
      TypeDecl t2 = t.type().erasure();
      for (Access bound : t1.getTypeBoundList()) {
        if (bound.type() != t2) {
          return false;
        }
      }
      return true;
    } else if (t.type() instanceof TypeVariable && !(type() instanceof TypeVariable)) {
      TypeDecl t1 = type().erasure();
      TypeVariable t2 = (TypeVariable) t.type();
      for (Access bound : t2.getTypeBoundList()) {
        if (bound.type() != t1) {
          return false;
        }
      }
      return true;
    } else if (type() == t.type()) {
      return true;
    } else {
      return false;
    }
  }

  public boolean ParTypeAccess.sameType(ParTypeAccess p) {
    TypeAccess ta1 = (TypeAccess) getTypeAccess();
    TypeAccess ta2 = (TypeAccess) p.getTypeAccess();
    if (!ta1.sameType(ta2)) {
      return false;
    }

    if (getNumTypeArgument() != p.getNumTypeArgument()) {
      return false;
    }

    for (int i = 0; i < getNumTypeArgument(); i++) {
      Access a1 = getTypeArgument(i);
      Access a2 = p.getTypeArgument(i);
      if (!a1.sameType(a2)) {
        return false;
      }
    }

    return true;
  }

  public boolean AbstractWildcard.sameType(AbstractWildcard w) {
    if (this instanceof Wildcard && w instanceof Wildcard) {
      return true;
    } else if (this instanceof WildcardExtends && w instanceof WildcardExtends) {
      Access a1 = ((WildcardExtends) this).getAccess();
      Access a2 = ((WildcardExtends) w).getAccess();
      return a1.sameType(a2);
    } else if (this instanceof WildcardSuper && w instanceof WildcardSuper) {
      Access a1 = ((WildcardSuper) this).getAccess();
      Access a2 = ((WildcardSuper) w).getAccess();
      return a1.sameType(a2);
    } else {
      return false;
    }
  }

  public boolean ArrayTypeAccess.sameType(ArrayTypeAccess a) {
    ArrayTypeAccess at1 = this;
    ArrayTypeAccess at2 = a;
    while (true) {
      Access a1 = at1.getAccess();
      Access a2 = at2.getAccess();
      if (a1 instanceof ArrayTypeAccess && a2 instanceof ArrayTypeAccess) {
        at1 = (ArrayTypeAccess) a1;
        at2 = (ArrayTypeAccess) a2;
        continue;
      } else {
        return a1.sameType(a2);
      }
    }
  }

  // 9.8
  eq InterfaceDecl.isFunctional() {
    java.util.List<MethodDecl> methods = collectAbstractMethods();
    boolean foundMethod = false;

    if (methods.isEmpty()) {
      return false;
    } else if (methods.size() == 1) {
      return true;
    } else {
      for (MethodDecl current : methods) {
        foundMethod = true;
        for (MethodDecl inner : methods) {
          if (!current.subsignatureTo(inner) || !current.returnTypeSubstitutableFor(inner)) {
            foundMethod = false;
          }
        }
        if (foundMethod) {
          break;
        }
      }
    }
    return foundMethod;
  }

  eq ParInterfaceDecl.isFunctional() = ((InterfaceDecl) original()).isFunctional();

  //9.8
  /**
   * Collects all abstract methods in an interface. Used to compute
   * a function type from a functional interface.
   */
  syn lazy java.util.List<MethodDecl> InterfaceDecl.collectAbstractMethods() {
    java.util.List<MethodDecl> methods = new ArrayList<MethodDecl>();
    Map<String, SimpleSet<MethodDecl>> map = localMethodsSignatureMap();
    Map<String, SimpleSet<MethodDecl>> objectMethods = typeObject().methodsSignatureMap();
    MethodDecl inObject;

    for (SimpleSet<MethodDecl> set : map.values()) {
      MethodDecl m = set.iterator().next();

      SimpleSet<MethodDecl> objectSet = objectMethods.get(m.signature());
      if (m.isAbstract()) {
        if (objectSet == null || objectSet.isEmpty()) {
          methods.add(m);
        } else {
          inObject = objectSet.iterator().next();
          if (!inObject.isPublic()) {
            methods.add(m);
          }
        }
      }
    }

    for (InterfaceDecl iface : superInterfaces()) {
      for (MethodDecl m : iface.methods()) {
        if (m.isAbstract() && !m.isPrivate() && m.accessibleFrom(this)) {
          SimpleSet<MethodDecl> objectSet = objectMethods.get(m.signature());
          if (objectSet == null || objectSet.isEmpty()) {
            methods.add(m);
          } else {
            inObject = objectSet.iterator().next();
            if (!inObject.isPublic()) {
              methods.add(m);
            }
          }
        }
      }
    }
    return methods;
  }

  eq GenericMethodDecl.usesTypeVariable() =
      super.usesTypeVariable() || getTypeParameterList().usesTypeVariable();
}
