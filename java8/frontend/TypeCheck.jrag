/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2016-2017, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect TypeCheck {
  inh TypeDecl LambdaParameters.unknownType();
  inh TypeDecl InferredParameterDeclaration.unknownType();
  inh TypeDecl LambdaBody.unknownType();
  eq LambdaExpr.getLambdaParameters().unknownType() = unknownType();
  eq LambdaExpr.getLambdaBody().unknownType() = unknownType();

  syn lazy TypeDecl IntersectionCastExpr.type() = unknownType();

  // Lambdas should propagate target return type to returns in lambda body.
  eq BlockLambdaBody.getBlock().returnType() {
    TypeDecl decl = enclosingLambda().targetType();
    if (decl == null) {
      return unknownType();
    } else if (!(decl instanceof InterfaceDecl)) {
      return unknownType();
    } else {
      InterfaceDecl iDecl = (InterfaceDecl) decl;
      if (!iDecl.isFunctional()) {
        return unknownType();
      } else {
        FunctionDescriptor fd = iDecl.functionDescriptor();
        if (fd.method.hasValue()) {
          return fd.method.get().type();
        } else {
          return unknownType();
        }
      }
    }
  }


  syn TypeDecl LambdaExpr.type() circular [unknownType()] {
    // 15.27.3
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      return unknownType();
    }
    if (targetInterface() == null) {
      return unknownType();
    }

    InterfaceDecl iDecl = targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    }
    if (congruentTo(iDecl.functionDescriptor())) {
      return iDecl;
    } else {
      return unknownType();
    }
  }

  syn lazy TypeDecl MethodReference.type() circular [unknownType()] {
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      return unknownType();
    }
    if (targetInterface() == null) {
      return unknownType();
    }

    InterfaceDecl iDecl = targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    }

    if (congruentTo(iDecl.functionDescriptor())) {
      return iDecl;
    } else {
      return unknownType();
    }
  }

  syn lazy TypeDecl ConstructorReference.type() circular [unknownType()] {
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      return unknownType();
    }
    if (targetInterface() == null) {
      return unknownType();
    }

    InterfaceDecl iDecl = targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    }

    return iDecl;
  }

  LambdaExpr contributes each typeProblems() to CompilationUnit.problems();

  // TODO(erik): Type check that works for wildcard-parameterized interfaces.
  syn Collection<Problem> LambdaExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      // 15.27
      problems.add(error("Lambda expressions must target a functional interface"));
      return problems;
    }

    // This means there was an error in the overload resolution, will be reported elsewhere
    if (invocationContext() && targetType() == unknownType()) {
      return Collections.emptyList();
    }

    if (!targetType().isFunctionalInterface()) {
      // 15.27
      problems.add(error("Lambda expressions must target a functional interface"));
      return problems;
    }

    InterfaceDecl iDecl = targetInterface();

    if (!iDecl.isFunctional()) {
      // 15.27
      problems.add(errorf(
          "Interface %s is not functional and can therefore not be targeted by a lambda expression",
          iDecl.typeName()));
      return problems;
    }

    FunctionDescriptor fd = iDecl.functionDescriptor();
    if (!fd.method.hasValue()) {
      problems.add(errorf(
            "Found no matching method in the interface %s for this lambda expression.",
            iDecl.typeName()));
    } else {
      MethodDecl targetMethod = fd.method.get();

      if (fd.isGeneric()) {
        // 15.27
        problems.add(errorf("Illegal lambda expression: Method %s in interface %s is generic",
            targetMethod.name(), iDecl.typeName()));
        return problems;
      }

      if (!getLambdaParameters().congruentTo(fd)) {
        problems.add(errorf("Lambda expression parameters incompatible with"
            + " parameters in method %s in interface %s",
            targetMethod.name(), iDecl.typeName()));
      }

      if (getLambdaBody() instanceof ExprLambdaBody) {
        ExprLambdaBody exprBody = (ExprLambdaBody) getLambdaBody();
        if (targetMethod.type().isVoid()) {
          if (!exprBody.getExpr().stmtCompatible()) {
            problems.add(errorf("Lambda expression body must be a statement expression,"
                + " because the method %s in interface %s has return type void",
                targetMethod.name(), iDecl.typeName()));
          }
        } else {
          if (!exprBody.getExpr().type().assignConversionTo(targetMethod.type(), exprBody.getExpr())) {
            problems.add(errorf("Lambda expression body is not compatible with"
                + " the return type %s in method %s in interface %s",
                targetMethod.type().typeName(), targetMethod.name(), iDecl.typeName()));
          }
        }
      } else {
        BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
        if (targetMethod.type().isVoid()) {
          if (!blockBody.voidCompatible()) {
            problems.add(errorf("Lambda expression body is not allowed to return a value,"
                + " because the method %s in interface %s has return type void",
                targetMethod.name(), iDecl.typeName()));
          }
        } else if (!blockBody.valueCompatible()) {
          problems.add(errorf("Lambda expression body must not complete normally or contain empty return"
              + " statments, because the method %s in interface"
              + " %s has a return type which is non-void",
              targetMethod.name(), iDecl.typeName()));
        }
      }
    }
    return problems;
  }

  // 15.27.2
  BlockLambdaBody contributes
      error("Block lambda bodies must be either void or value compatible")
      when !voidCompatible() && !valueCompatible()
      to CompilationUnit.problems();

  refine TypeCheck eq ReturnStmt.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (enclosingLambda() == null || enclosingLambda().hostType() != hostType()) {
      if (hasResult() && !returnType().isVoid()) {
        TypeDecl resultType = getResult().type();
        if (!resultType.isUnknown()
            && !resultType.assignConversionTo(returnType(), getResult())) {
          problems.add(errorf("return value must be an instance of %s which %s is not",
              returnType().typeName(), resultType.typeName()));
        }
      }
      // 8.4.5 8.8.5
      if (returnType().isVoid() && hasResult()) {
        problems.add(error("return statement may not have an expression in void methods"));
      }
      // 8.4.5
      if (!returnType().isVoid() && !hasResult()) {
        problems.add(error("return statement must have an expression in non void methods"));
      }
      if (enclosingBodyDecl() instanceof InstanceInitializer
          || enclosingBodyDecl() instanceof StaticInitializer) {
        problems.add(error("Initializers may not return"));
      }
    } else {
      if (hasResult() && !returnType().isVoid() && !(getResult() instanceof LambdaExpr)) {
        TypeDecl resultType = getResult().type();
        if (!resultType.isUnknown()
            && !resultType.assignConversionTo(returnType(), getResult())) {
          problems.add(errorf("return value must be an instance of %s which %s is not",
              returnType().typeName(), resultType.typeName()));
        }
      }
    }
    return problems;
  }

  MethodReference contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> MethodReference.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      problems.add(error("Method references must target a functional interface"));
      return problems;
    }

    // This means there was an error in the overload resolution, will be reported elsewhere.
    if (invocationContext() && targetType() == unknownType()) {
      return Collections.emptyList();
    }

    if (!targetType().isFunctionalInterface()) {
      problems.add(error("Method references must target a functional interface"));
      return problems;
    }

    InterfaceDecl iDecl = targetInterface();

    if (!iDecl.isFunctional()) {
      problems.add(errorf("Interface %s is not functional and can therefore not be targeted by a method reference",
          iDecl.typeName()));
      return problems;
    }

    FunctionDescriptor fd = iDecl.functionDescriptor();
    if (!fd.method.hasValue()) {
      problems.add(errorf(
            "Found no matching method in the interface %s for this method reference.",
            iDecl.typeName()));
    } else {
      MethodDecl targetMethod = fd.method.get();
      MethodDecl found = null;
      // Lookup method here and check that one most specific can be found
      if (this instanceof ExprMethodReference) {
        ExprMethodReference ref = (ExprMethodReference) this;
        found = ref.targetMethod(fd);
        if (unknownMethod() == found) {
          // 15.13.1
          problems.add(errorf("Found no method %s that is compatible with the method %s in the interface %s",
              name(), targetMethod.fullSignature(), iDecl.typeName()));
        } else if (found.isStatic()) {
          problems.add(errorf("The method %s in type %s must be accessed in a static way",
              found.fullSignature(), found.hostType().typeName()));
        } else if (ref.getExpr() instanceof Access && ((Access) ref.getExpr()).lastAccess() instanceof SuperAccess) {
          // 15.13.2
          if (found.isAbstract()) {
            problems.add(errorf("Cannot directly invoke the abstract method %s in type %s",
                found.fullSignature(), found.hostType().typeName()));
          }

          SuperAccess superAccess = (SuperAccess)((Access) ref.getExpr()).lastAccess();
          if (superAccess.isQualified() && superAccess.decl() instanceof InterfaceDecl) {
            if (hostType().isClassDecl()) {
              ClassDecl classDecl = (ClassDecl) hostType();
              if (classDecl.hasOverridingMethodInSuper(found)) {
                problems.add(errorf(
                    "Cannot make a super reference to method %s, there is a more specific override",
                    found.fullSignature()));
              }
            } else if (hostType().isInterfaceDecl()) {
              InterfaceDecl interfaceDecl = (InterfaceDecl) hostType();
              if (interfaceDecl.hasOverridingMethodInSuper(found)) {
                problems.add(errorf(
                    "Cannot make a super reference to method %s, there is a more specific override",
                    found.fullSignature()));
              }
            }
          }
        }
      } else if (this instanceof TypeMethodReference) {
        TypeMethodReference ref = (TypeMethodReference) this;
        MethodDecl staticMethod = ref.targetStaticMethod(fd);
        MethodDecl instanceMethod = ref.targetInstanceMethod(fd);
        if (ref.validStaticMethod(fd) && ref.validInstanceMethod(fd)) {
          problems.add(errorf("Ambiguity error: two possible methods %s was found",
              staticMethod.name()));
          return problems;
        } else if (unknownMethod() == staticMethod && unknownMethod() == instanceMethod) {
          problems.add(errorf(
              "Found no method %s that is compatible with the method %s in the interface %s",
              name(), targetMethod.fullSignature(), iDecl.typeName()));
           return problems;
        } else if (ref.validStaticMethod(fd)) {
          if (ref.getTypeAccess() instanceof ParTypeAccess) {
            problems.add(
                error("Parameterized qualifier is not allowed for static method references"));
          } else {
            found = staticMethod;
          }
        } else if (ref.validInstanceMethod(fd)) {
          found = instanceMethod;
        } else if (unknownMethod() != staticMethod && !staticMethod.isStatic()) {
          problems.add(errorf("Cannot make a static reference to the non-static method %s in type %s",
              staticMethod.fullSignature(), staticMethod.hostType().typeName()));
          return problems;
        } else if (instanceMethod.isStatic()) {
          problems.add(errorf("The method %s in type %s must be accessed in a static way",
              instanceMethod.fullSignature(), instanceMethod.hostType().typeName()));
          return problems;
        }
      }

      if (found != null && unknownMethod() != found) {
        // Check that found is compatible with the function descriptor
        if (!targetMethod.type().isVoid()) {
          // 15.13.1
          if (found.type().isVoid()
              || !found.type().assignConversionTo(targetMethod.type(), null)) {
            problems.add(errorf("Return type of referenced method %s is not compatible with method %s in interface %s",
                found.fullSignature(), targetMethod.fullSignature(),
                iDecl.typeName()));
          }
        }

        for (int i = 0; i < found.getNumException(); i++) {
          TypeDecl exception = found.getException(i).type();
          if (exception.isUncheckedException()) {
            continue;
          }

          boolean legalException = false;
          for (TypeDecl descriptorThrows : iDecl.functionDescriptor().throwsList) {
            if (exception.strictSubtype(descriptorThrows)) {
              legalException = true;
              break;
            }
          }
          if (!legalException) {
            // 15.13.1
            problems.add(errorf("Referenced method %s throws unhandled exception type %s",
                found.name(), exception.typeName()));
          }
        }
      }
    }
    return problems;
  }

  ConstructorReference contributes each typeProblems() to CompilationUnit.problems();

  // 15.13.1
  syn Collection<Problem> ConstructorReference.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      problems.add(error("Constructor references must target a functional interface"));
      return problems;
    }

    // This means there was an error in the overload resolution, will be reported elsewhere
    if (invocationContext() && targetType() == unknownType()) {
      return problems;
    }

    if (!targetType().isFunctionalInterface()) {
      problems.add(error("Constructor references must target a functional interface"));
      return problems;
    }
    InterfaceDecl iDecl = targetInterface();

    if (!iDecl.isFunctional()) {
      problems.add(errorf("Interface %s is not functional and can therefore not be targeted by a constructor reference",
          iDecl.typeName()));
      return problems;
    }

    FunctionDescriptor fd = iDecl.functionDescriptor();
    if (!fd.method.hasValue()) {
      problems.add(errorf(
            "Found no matching method in the interface %s for this constructor reference.",
            iDecl.typeName()));
    } else {
      MethodDecl targetMethod = fd.method.get();
      if (this instanceof ClassReference) {
        ClassReference ref = (ClassReference) this;
        ConstructorDecl decl = ref.targetConstructor(fd);
        if (unknownConstructor() == decl) {
          problems.add(errorf("Found no constructor for the type %s that is compatible with "
              + "the method %s in interface %s",
              getTypeAccess().type().typeName(), targetMethod.fullSignature(), iDecl.typeName()));
        }
        if (!targetMethod.type().isVoid()) {
          // 15.13.1
          TypeDecl returnType = ref.syntheticInstanceExpr(fd).type();
          if (!returnType.assignConversionTo(targetMethod.type(), null)) {
            problems.add(errorf("Return type of method %s in interface %s is not compatible with"
                + " referenced constructor which has return type: %s",
                targetMethod.fullSignature(), iDecl.typeName(), returnType.typeName()));
          }
        }
        for (int i = 0; i < decl.getNumException(); i++) {
          TypeDecl exception = decl.getException(i).type();
          if (exception.isUncheckedException()) {
            continue;
          }

          boolean legalException = false;
          for (TypeDecl descriptorThrows : iDecl.functionDescriptor().throwsList) {
            if (exception.strictSubtype(descriptorThrows)) {
              legalException = true;
              break;
            }
          }
          if (!legalException) {
            // 15.13.1
            problems.add(errorf("Referenced constructor %s throws unhandled exception type %s",
                decl.name(), exception.typeName()));
          }
        }
        problems.addAll(ref.syntheticInstanceExpr(fd).typeProblems());
      } else {
        ArrayReference ref = (ArrayReference) this;
        if (targetMethod.getNumParameter() != 1) {
          problems.add(errorf("Array reference not compatible with method %s in interface %s,"
              + " should have a single parameter of type int",
              targetMethod.fullSignature(), iDecl.typeName()));
          return problems;
        }
        if (!targetMethod.paramType(0).assignConversionTo(iDecl.typeInt(), null)) {
          problems.add(errorf("Array reference not compatible with method %s in interface %s,"
              + " should have a single parameter of type int",
              targetMethod.fullSignature(), iDecl.typeName()));
          return problems;
        }
        if (!targetMethod.type().isVoid()) {
          if (!getTypeAccess().type().assignConversionTo(targetMethod.type(), null)) {
            problems.add(errorf("Return type %s of method %s in interface %s is not compatible with"
                + " the array reference type %s",
                targetMethod.type().typeName(), targetMethod.fullSignature(), iDecl.typeName(),
                getTypeAccess().type().typeName()));
          }
        }
      }
    }
    return problems;
  }

  refine TypeCheck eq MethodDecl.mayOverride(MethodDecl m) {
    // 9.4.3
    if (isDefault() && m.hostType().isType("java.lang", "Object") && !m.isPrivate()) {
      return false;
    } else {
      MethodDecl self = this;
      if (self.isGeneric()) {
        self = genericDecl().rawMethodDecl();
      }
      if (m.isGeneric()) {
        m = m.genericDecl().rawMethodDecl();
      }
      return self.returnTypeSubstitutableFor(m);
    }
  }
}

aspect LambdaParametersInference {
  inh lazy TypeDecl InferredParameterDeclaration.inferredType();
  eq InferredLambdaParameters.getParameter(int i).inferredType() {
    if (enclosingLambda().targetInterface() == null) {
      return unknownType();
    }
    InterfaceDecl iDecl = (InterfaceDecl) enclosingLambda().targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    } else {
      FunctionDescriptor fd = iDecl.functionDescriptor();
      if (fd.method.hasValue()) {
        MethodDecl targetMethod = fd.method.get();
        if (targetMethod.getNumParameter() < i + 1) {
          return unknownType();
        } else {
          // The target functional interface matches this lambda.
          return targetMethod.getParameter(i).type();
        }
      } else {
        // No target method.
        return unknownType();
      }
    }
  }

  /**
   * If the method is parameterized, this returns the non-wildcard parameterization
   * according to the rules specified in JLS 8 &sect;9.9.
   * Otherwise, an unknown method is returned.
   */
  syn Option<MethodDecl> MethodDecl.nonWildcardParameterization() = Option.some(this);

  eq MethodDeclSubstituted.nonWildcardParameterization() {
    TypeDecl host = hostType();
    Option<TypeDecl> param = host.nonWildcardParameterization();
    if (param.hasValue()) {
      TypeDecl paramType = param.get();
      if (paramType == host) {
        // No change to generic type parameterization.
        return Option.<MethodDecl>some(this);
      } else {
        for (BodyDecl decl : paramType.getBodyDeclList()) {
          if (decl.isSubstitutionOf(this.sourceMethodDecl())) {
            return Option.some((MethodDecl) decl);
          }
        }
        // This should not happen.
        return Option.none();
      }
    } else {
      // No applicable wildcard parameterization.
      return Option.none();
    }
  }

  /**
   * @return {@code true} if this method is a substituted method declaration with
   * the source declaration being identical to the given method.
   */
  syn boolean BodyDecl.isSubstitutionOf(MethodDecl method) = false;

  eq MethodDeclSubstituted.isSubstitutionOf(MethodDecl method) = sourceMethodDecl() == method;

  /**
   * If this type is parameterized, this returns the non-wildcard parameterization
   * of the type according to the rules specified in JLS 8 &sect;9.9.
   */
  syn Option<TypeDecl> TypeDecl.nonWildcardParameterization() = Option.some(this);

  eq ParInterfaceDecl.nonWildcardParameterization() {
    TypeDecl genericDecl = genericDecl();
    if (genericDecl instanceof GenericInterfaceDecl) {
      GenericInterfaceDecl generic = (GenericInterfaceDecl) genericDecl();
      Collection<TypeDecl> typeArgs = new ArrayList<TypeDecl>();
      boolean allSame = true;
      for (int i = 0; i < getNumTypeParameter(); ++i) {
        TypeDecl Ai = getParameterization().getArg(i);

        if (!Ai.isWildcard()) {
          // Ti = Ai.
          typeArgs.add(Ai);
        } else {
          allSame = false;
          TypeVariable Pi = generic.getTypeParameter(i);
          if (Pi.mentionsTypeVariable(generic.getTypeParameterList())) {
            // Ti is undefined, there is no function type.
            return Option.none();
          } else {
            typeArgs.add(Ai.nonWildcardParamType(Pi));
          }
        }
      }
      if (allSame) {
        // No changes to the parameterization needed.
        return Option.<TypeDecl>some(this);
      } else {
        return Option.maybe(generic.lookupParTypeDecl(typeArgs));
      }
    } else {
      return Option.<TypeDecl>some(this);
    }
  }

  /**
   * Returns true if this type variable contains a mention of any of the
   * given type variables.
   */
  syn boolean TypeVariable.mentionsTypeVariable(List<TypeVariable> vars) {
    for (Access bound : getBoundList()) {
      for (TypeVariable var : vars) {
        if (bound.mentionsTypeVariable(var)) {
          return true;
        }
      }
    }
    return false;
  }

  syn boolean Access.mentionsTypeVariable(TypeVariable var) = false;

  eq TypeAccess.mentionsTypeVariable(TypeVariable var) =
      getPackage().isEmpty() && getID().equals(var.getID());

  eq WildcardExtends.mentionsTypeVariable(TypeVariable var) =
      getAccess().mentionsTypeVariable(var);

  eq WildcardSuper.mentionsTypeVariable(TypeVariable var) =
      getAccess().mentionsTypeVariable(var);

  /**
   * For a wildcard type this gives the bound of the wildcard.
   * For non-wildcard types this is just the same type.
   */
  syn TypeDecl TypeDecl.boundType() = this;

  eq WildcardType.boundType() = typeObject();

  eq WildcardExtendsType.boundType() = extendsType();

  eq WildcardSuperType.boundType() = superType();

  /**
   * This computes the non-wildcard parameterization type of a parameter
   * in a generic function type according to the rules in JLS 8 &sect;9.9.
   */
  syn TypeDecl TypeDecl.nonWildcardParamType(TypeVariable bound) = this;

  eq WildcardType.nonWildcardParamType(TypeVariable bound) = bound.lubType();

  eq WildcardExtendsType.nonWildcardParamType(TypeVariable bound) {
    ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>();
    bounds.add(extendsType().nonWildcardParamType(bound));
    bounds.add(bound.lubType());
    return GLBTypeFactory.glb(bounds);
  }

  eq WildcardSuperType.nonWildcardParamType(TypeVariable bound) =
      superType().nonWildcardParamType(bound);
}
