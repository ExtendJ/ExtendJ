/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect StrictSubtype {

  /*
  Most of this is a redeclaration of the already existing subtype attribute,
  but this one also takes type variables into consideration. The existing attribute
  does not compute the subtype correctly for type variables, but still uses the attribute
  to check that types lies within the bounds of type variables and just changing the subtype
  attribute would thus result in broken code
  */

  eq GenericClassDecl.strictSubtype(TypeDecl type) = type.strictSupertypeGenericClassDecl(this);
  syn boolean TypeDecl.strictSupertypeGenericClassDecl(GenericClassDecl type) =
      strictSupertypeClassDecl(type);
  eq RawClassDecl.strictSupertypeGenericClassDecl(GenericClassDecl type) =
      type.strictSubtype(genericDecl().original());

  eq GenericInterfaceDecl.strictSubtype(TypeDecl type) =
      type.strictSupertypeGenericInterfaceDecl(this);
  syn boolean TypeDecl.strictSupertypeGenericInterfaceDecl(GenericInterfaceDecl type) =
      this == type || strictSupertypeInterfaceDecl(type);
  eq RawInterfaceDecl.strictSupertypeGenericInterfaceDecl(GenericInterfaceDecl type) =
      type.strictSubtype(genericDecl().original());

  eq RawClassDecl.strictSubtype(TypeDecl type) = type.strictSupertypeRawClassDecl(this);
  syn boolean TypeDecl.strictSupertypeRawClassDecl(RawClassDecl type) =
      strictSupertypeParClassDecl(type);

  eq RawInterfaceDecl.strictSubtype(TypeDecl type) = type.strictSupertypeRawInterfaceDecl(this);
  syn boolean TypeDecl.strictSupertypeRawInterfaceDecl(RawInterfaceDecl type) =
      strictSupertypeParInterfaceDecl(type);

  // 5.1.9 Unchecked Conversion
  eq ParClassDecl.strictSupertypeGenericClassDecl(GenericClassDecl type) =
      type.strictSubtype(genericDecl().original());
  eq ParInterfaceDecl.strictSupertypeGenericClassDecl(GenericClassDecl type) =
      type.strictSubtype(genericDecl().original());
  eq ParInterfaceDecl.strictSupertypeGenericInterfaceDecl(GenericInterfaceDecl type) =
      type.strictSubtype(genericDecl().original());

  eq WildcardType.strictSubtype(TypeDecl type) = type.strictSupertypeWildcard(this);
  syn boolean TypeDecl.strictSupertypeWildcard(WildcardType type) = false;
  eq WildcardType.strictSupertypeWildcard(WildcardType type) = true;
  eq TypeVariable.strictSupertypeWildcard(WildcardType type) = true;
  eq WildcardExtendsType.strictSupertypeWildcard(WildcardType type) =
      typeObject().strictSubtype(this);
  eq WildcardSuperType.strictSupertypeWildcard(WildcardType type) =
      superType().strictSubtype(typeObject());

  eq WildcardExtendsType.strictSubtype(TypeDecl type) = extendsType().strictSubtype(type);

  eq WildcardSuperType.strictSubtype(TypeDecl type) = type.strictSupertypeWildcardSuper(this);
  syn boolean TypeDecl.strictSupertypeWildcardSuper(WildcardSuperType type) = false;
  eq WildcardType.strictSupertypeWildcardSuper(WildcardSuperType type) = true;
  eq TypeVariable.strictSupertypeWildcardSuper(WildcardSuperType type) =
      type.superType().strictSubtype(this);
  eq WildcardSuperType.strictSupertypeWildcardSuper(WildcardSuperType type) =
      type.superType().strictSubtype(superType());

  eq WildcardType.strictSupertypeClassDecl(ClassDecl type) = true;
  eq WildcardType.strictSupertypeInterfaceDecl(InterfaceDecl type) = true;
  eq WildcardType.strictSupertypeParClassDecl(ParClassDecl type) = true;
  eq WildcardType.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) = true;
  eq WildcardType.strictSupertypeRawClassDecl(RawClassDecl type) = true;
  eq WildcardType.strictSupertypeRawInterfaceDecl(RawInterfaceDecl type) = true;
  eq WildcardType.strictSupertypeTypeVariable(TypeVariable type) = true;
  eq WildcardType.strictSupertypeArrayDecl(ArrayDecl type) = true;

  eq WildcardExtendsType.strictSupertypeClassDecl(ClassDecl type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeInterfaceDecl(InterfaceDecl type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeParClassDecl(ParClassDecl type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeRawClassDecl(RawClassDecl type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeRawInterfaceDecl(RawInterfaceDecl type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeTypeVariable(TypeVariable type) =
      type.strictSubtype(extendsType());
  eq WildcardExtendsType.strictSupertypeArrayDecl(ArrayDecl type) =
      type.strictSubtype(extendsType());

  eq WildcardSuperType.strictSupertypeClassDecl(ClassDecl type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeInterfaceDecl(InterfaceDecl type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeParClassDecl(ParClassDecl type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeRawClassDecl(RawClassDecl type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeRawInterfaceDecl(RawInterfaceDecl type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeTypeVariable(TypeVariable type) =
      superType().strictSubtype(type);
  eq WildcardSuperType.strictSupertypeArrayDecl(ArrayDecl type) =
      superType().strictSubtype(type);

  eq ParClassDecl.strictSupertypeClassDecl(ClassDecl type) =
      super.strictSupertypeClassDecl(type);
  eq ParInterfaceDecl.strictSupertypeClassDecl(ClassDecl type) =
      super.strictSupertypeClassDecl(type);

  eq RawClassDecl.strictSupertypeClassDecl(ClassDecl type) =
      type.strictSubtype(genericDecl().original());
  eq RawClassDecl.strictSupertypeInterfaceDecl(InterfaceDecl type) =
      type.strictSubtype(genericDecl().original());
  eq RawClassDecl.strictSupertypeParClassDecl(ParClassDecl type) =
      type.genericDecl().original().strictSubtype(genericDecl().original());

  eq RawInterfaceDecl.strictSupertypeClassDecl(ClassDecl type) =
      type.strictSubtype(genericDecl().original());
  eq RawInterfaceDecl.strictSupertypeInterfaceDecl(InterfaceDecl type) =
      type.strictSubtype(genericDecl().original());
  eq RawInterfaceDecl.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) =
      type.genericDecl().original().strictSubtype(genericDecl().original());

  eq ParClassDecl.strictSubtype(TypeDecl type) = type.strictSupertypeParClassDecl(this);
  syn boolean TypeDecl.strictSupertypeParClassDecl(ParClassDecl type) =
      strictSupertypeClassDecl(type);

  eq ParInterfaceDecl.strictSubtype(TypeDecl type) = type.strictSupertypeParInterfaceDecl(this);
  syn boolean TypeDecl.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) =
      strictSupertypeInterfaceDecl(type);

  eq ParClassDecl.strictSupertypeRawClassDecl(RawClassDecl type) =
      type.genericDecl().original().strictSubtype(genericDecl().original());
  eq ParClassDecl.strictSupertypeRawInterfaceDecl(RawInterfaceDecl type) =
      type.genericDecl().original().strictSubtype(genericDecl().original());
  eq ParInterfaceDecl.strictSupertypeRawClassDecl(RawClassDecl type) =
      type.genericDecl().original().strictSubtype(genericDecl().original());
  eq ParInterfaceDecl.strictSupertypeRawInterfaceDecl(RawInterfaceDecl type) =
      type.genericDecl().original().strictSubtype(genericDecl().original());

  syn boolean TypeDecl.strictContainedIn(TypeDecl type) circular [true] {
    if (type == this || type instanceof WildcardType) {
      return true;
    } else if (type instanceof WildcardExtendsType) {
      return this.strictSubtype(((WildcardExtendsType) type).extendsType());
    } else if (type instanceof WildcardSuperType) {
      return ((WildcardSuperType) type).superType().strictSubtype(this);
    } else if (type instanceof TypeVariable) {
      return strictSubtype(type);
    }
    return sameStructure(type);
  }

  eq WildcardExtendsType.strictContainedIn(TypeDecl type) {
    if (type == this || type instanceof WildcardType) {
      return true;
    } else if (type instanceof WildcardExtendsType) {
      return extendsType().strictSubtype(((WildcardExtendsType) type).extendsType());
    } else {
      return false;
    }
  }

  eq WildcardSuperType.strictContainedIn(TypeDecl type) {
    if (type == this || type instanceof WildcardType) {
      return true;
    } else if (type instanceof WildcardSuperType) {
      return ((WildcardSuperType) type).superType().strictSubtype(superType());
    } else {
      return false;
    }
  }

  eq WildcardType.strictContainedIn(TypeDecl type) {
    if (type == this) {
      return true;
    } else if (type instanceof WildcardExtendsType) {
      return typeObject().strictSubtype(((WildcardExtendsType) type).extendsType());
    } else {
      return false;
    }
  }

  public static final TypeProperty Parameterization.STRICT_CONTAINED_IN = new TypeProperty() {
    @Override
    public boolean holds(TypeDecl t1, TypeDecl t2) {
      return t1.strictContainedIn(t2);
    }
  };

  eq ParClassDecl.strictSupertypeParClassDecl(ParClassDecl type) {
    if (isRawType()) {
      return true;
    }
    if (type.genericDecl().original() == genericDecl().original()) {
      if (!type.getParameterization().compare(getParameterization(),
          Parameterization.STRICT_CONTAINED_IN)) {
        return false;
      }
      if (isNestedType() && type.isNestedType()) {
        return type.enclosingType().strictSubtype(enclosingType());
      }
      return true;
    }
    return strictSupertypeClassDecl(type);
  }

  eq ParClassDecl.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) = false;

  eq ParInterfaceDecl.strictSupertypeParClassDecl(ParClassDecl type) {
    if (isRawType()) {
      return true;
    }
    if (type.genericDecl().original() == genericDecl().original()) {
      if (!type.getParameterization().compare(getParameterization(),
          Parameterization.STRICT_CONTAINED_IN)) {
        return false;
      }
      if (isNestedType() && type.isNestedType()) {
        return type.enclosingType().strictSubtype(enclosingType());
      }
      return true;
    }
    return strictSupertypeClassDecl(type);
  }

  eq ParInterfaceDecl.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) {
    if (isRawType()) {
      return true;
    }
    if (type.genericDecl().original() == genericDecl().original()) {
      if (!type.getParameterization().compare(getParameterization(),
          Parameterization.STRICT_CONTAINED_IN)) {
        return false;
      }
      if (isNestedType() && type.isNestedType()) {
        return type.enclosingType().strictSubtype(enclosingType());
      }
      return true;
    }
    return strictSupertypeInterfaceDecl(type);
  }

  eq GenericClassDecl.strictSupertypeParClassDecl(ParClassDecl type) =
      type.genericDecl().original().strictSubtype(this);
  eq GenericClassDecl.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) =
      type.genericDecl().original().strictSubtype(this);
  eq GenericInterfaceDecl.strictSupertypeParClassDecl(ParClassDecl type) =
      type.genericDecl().original().strictSubtype(this);
  eq GenericInterfaceDecl.strictSupertypeParInterfaceDecl(ParInterfaceDecl type) =
      type.genericDecl().original().strictSubtype(this);

  eq TypeVariable.strictSupertypeArrayDecl(ArrayDecl type) = false;

  eq TypeVariable.strictSubtype(TypeDecl type) = type.strictSupertypeTypeVariable(this);

  syn boolean TypeDecl.strictSupertypeTypeVariable(TypeVariable type) {
    if (type == this) {
      return true;
    }
    for (int i = 0; i < type.getNumTypeBound(); i++) {
      if (type.getTypeBound(i).type().strictSubtype(this)) {
        return true;
      }
    }
    return false;
  }

  eq TypeVariable.strictSupertypeTypeVariable(TypeVariable type) {
    if (typeVarInMethod() && type.typeVarInMethod()
        && genericMethodLevel() == type.genericMethodLevel()) {
      if (typeVarPosition() == type.typeVarPosition() || this == type) {
        return true;
      }
    } else {
      if (this == type) {
        return true;
      }
    }
    for (int i = 0; i < type.getNumTypeBound(); i++) {
      if (type.getTypeBound(i).type().strictSubtype(this)) {
        return true;
      }
    }
    return false;
  }

  eq TypeVariable.strictSupertypeClassDecl(ClassDecl type) {
    return false;
  }

  eq TypeVariable.strictSupertypeInterfaceDecl(InterfaceDecl type) {
    return false;
  }

  eq LUBType.strictSubtype(TypeDecl type) = type.strictSupertypeLUBType(this);
  syn boolean TypeDecl.strictSupertypeLUBType(LUBType type) {
    for (int i = 0; i < type.getNumTypeBound(); i++) {
      if (!type.getTypeBound(i).type().strictSubtype(this)) {
        return false;
      }
    }
    return true;
  }
  eq GLBType.strictSupertypeLUBType(LUBType type){
    // TODO(joqvist): changed from Access to TypeDecl, is this correct?
    ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>(getNumTypeBound());
    for (int i = 0; i < getNumTypeBound(); i++) {
      bounds.add(getTypeBound(i).type());
    }
    return type == lookupLUBType(bounds);
  }

  eq LUBType.strictSupertypeClassDecl(ClassDecl type) = type.strictSubtype(lub());
  eq LUBType.strictSupertypeInterfaceDecl(InterfaceDecl type) = type.strictSubtype(lub());

  eq GLBType.strictSubtype(TypeDecl type) = type.strictSupertypeGLBType(this);
  syn boolean TypeDecl.strictSupertypeGLBType(GLBType type) {
    // T1 && .. && Tn <: this, if exists  0 < i <= n Ti <: this
    for (int i = 0; i < type.getNumTypeBound(); i++) {
      if (type.getTypeBound(i).type().strictSubtype(this)) {
        return true;
      }
    }
    return false;
  }

  eq GLBType.strictSupertypeGLBType(GLBType type) = this == type;

  eq LUBType.strictSupertypeGLBType(GLBType type) {
    // TODO(joqvist): changed from Access to TypeDecl, is this correct?
    ArrayList<TypeDecl> bounds = new ArrayList<TypeDecl>(getNumTypeBound());
    for (int i = 0; i < getNumTypeBound(); i++) {
      bounds.add(getTypeBound(i).type());
    }
    return type == lookupGLBType(bounds);
  }

  syn boolean TypeDecl.strictSubtype(TypeDecl type) circular [true] = type == this;
  eq ClassDecl.strictSubtype(TypeDecl type) = type.strictSupertypeClassDecl(this);
  eq InterfaceDecl.strictSubtype(TypeDecl type) = type.strictSupertypeInterfaceDecl(this);
  eq ArrayDecl.strictSubtype(TypeDecl type) = type.strictSupertypeArrayDecl(this);
  eq PrimitiveType.strictSubtype(TypeDecl type) = type.supertypePrimitiveType(this);
  eq NullType.strictSubtype(TypeDecl type) = type.supertypeNullType(this);
  eq VoidType.strictSubtype(TypeDecl type) = type.supertypeVoidType(this);

  eq UnknownType.strictSubtype(TypeDecl type) = true;
  eq UnknownType.strictSupertypeClassDecl(ClassDecl type) = true;
  eq UnknownType.strictSupertypeInterfaceDecl(InterfaceDecl type) = true;
  eq UnknownType.strictSupertypeArrayDecl(ArrayDecl type) = true;

  syn boolean TypeDecl.strictSupertypeClassDecl(ClassDecl type) = type == this;

  eq ClassDecl.strictSupertypeClassDecl(ClassDecl type) =
      super.strictSupertypeClassDecl(type) || type.hasSuperclass()
      && type.superclass() != null && type.superclass().strictSubtype(this);

  eq InterfaceDecl.strictSupertypeClassDecl(ClassDecl type) {
    if (super.strictSupertypeClassDecl(type)) {
      return true;
    }
    for (InterfaceDecl iface : type.superInterfaces()) {
      if (iface.strictSubtype(this)) {
        return true;
      }
    }
    return type.hasSuperclass() && type.superclass() != null
        && type.superclass().strictSubtype(this);
  }

  syn boolean TypeDecl.strictSupertypeInterfaceDecl(InterfaceDecl type) = type == this;

  eq ClassDecl.strictSupertypeInterfaceDecl(InterfaceDecl type) = isObject();

  eq InterfaceDecl.strictSupertypeInterfaceDecl(InterfaceDecl type) {
    if (super.strictSupertypeInterfaceDecl(type)) {
      return true;
    }
    for (InterfaceDecl superinterface : type.superInterfaces()) {
      if (superinterface.strictSubtype(this)) {
        return true;
      }
    }
    return false;
  }

  syn boolean TypeDecl.strictSupertypeArrayDecl(ArrayDecl type) = this == type;

  eq ClassDecl.strictSupertypeArrayDecl(ArrayDecl type) {
    if (super.strictSupertypeArrayDecl(type)) {
      return true;
    }
    return type.hasSuperclass() && type.superclass() != null
        && type.superclass().strictSubtype(this);
  }

  eq InterfaceDecl.strictSupertypeArrayDecl(ArrayDecl type) {
    if (super.strictSupertypeArrayDecl(type)) {
      return true;
    }
    for (InterfaceDecl iface : type.superInterfaces()) {
      if (iface.strictSubtype(this)) {
        return true;
      }
    }
    return false;
  }

  eq ArrayDecl.strictSupertypeArrayDecl(ArrayDecl type) {
    if (type.elementType().isPrimitive() && elementType().isPrimitive()) {
      return type.dimension() == dimension() && type.elementType() == elementType();
    }
    return type.componentType().strictSubtype(componentType());
  }

  eq ClassDeclSubstituted.strictSubtype(TypeDecl type) =
      type.strictSupertypeClassDeclSubstituted(this);
  syn boolean TypeDecl.strictSupertypeClassDeclSubstituted(ClassDeclSubstituted type) =
      type.original() == this || strictSupertypeClassDecl(type);
  eq ClassDeclSubstituted.strictSupertypeClassDeclSubstituted(ClassDeclSubstituted type) =
      original() == type.original() && type.enclosingType().strictSubtype(enclosingType())
      || super.strictSupertypeClassDeclSubstituted(type);

  eq ClassDeclSubstituted.strictSupertypeClassDecl(ClassDecl type) =
      super.strictSupertypeClassDecl(type) || original().strictSupertypeClassDecl(type);

  eq InterfaceDeclSubstituted.strictSubtype(TypeDecl type) =
      type.strictSupertypeInterfaceDeclSubstituted(this);
  syn boolean TypeDecl.strictSupertypeInterfaceDeclSubstituted(InterfaceDeclSubstituted type) =
      type.original() == this || strictSupertypeInterfaceDecl(type);
  eq InterfaceDeclSubstituted.strictSupertypeInterfaceDeclSubstituted(
        InterfaceDeclSubstituted type) =
      original() == type.original() && type.enclosingType().strictSubtype(enclosingType())
      || super.strictSupertypeInterfaceDeclSubstituted(type);

  eq InterfaceDeclSubstituted.strictSupertypeInterfaceDecl(InterfaceDecl type) =
      super.strictSupertypeInterfaceDecl(type) || original().strictSupertypeInterfaceDecl(type);

  eq GenericClassDeclSubstituted.strictSubtype(TypeDecl type) =
      type.strictSupertypeGenericClassDeclSubstituted(this);
  syn boolean TypeDecl.strictSupertypeGenericClassDeclSubstituted(
        GenericClassDeclSubstituted type) =
      type.original() == this || strictSupertypeGenericClassDecl(type);
  eq GenericClassDeclSubstituted.strictSupertypeGenericClassDeclSubstituted(
        GenericClassDeclSubstituted type) =
      original() == type.original() && type.enclosingType().strictSubtype(enclosingType())
      || super.strictSupertypeGenericClassDeclSubstituted(type);

  eq GenericClassDeclSubstituted.strictSupertypeGenericClassDecl(GenericClassDecl type) =
      super.strictSupertypeGenericClassDecl(type)
      || original().strictSupertypeGenericClassDecl(type);

  eq GenericInterfaceDeclSubstituted.strictSubtype(TypeDecl type) =
      type.strictSupertypeGenericInterfaceDeclSubstituted(this);
  syn boolean TypeDecl.strictSupertypeGenericInterfaceDeclSubstituted(
        GenericInterfaceDeclSubstituted type) =
      type.original() == this || strictSupertypeGenericInterfaceDecl(type);
  eq GenericInterfaceDeclSubstituted.strictSupertypeGenericInterfaceDeclSubstituted(
        GenericInterfaceDeclSubstituted type) =
      original() == type.original() && type.enclosingType().strictSubtype(enclosingType())
      || super.strictSupertypeGenericInterfaceDeclSubstituted(type);
  eq GenericInterfaceDeclSubstituted.strictSupertypeGenericInterfaceDecl(GenericInterfaceDecl type) =
      super.strictSupertypeGenericInterfaceDecl(type)
      || original().strictSupertypeGenericInterfaceDecl(type);


}
