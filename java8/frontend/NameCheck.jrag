/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Java8NameCheck {
  inh BodyDecl InferredParameterDeclaration.enclosingBodyDecl();
  inh VariableScope InferredParameterDeclaration.outerScope();
  inh VariableScope LambdaParameters.outerScope();

  //6.3
  eq LambdaExpr.getLambdaParameters().outerScope() = this;
  eq LambdaExpr.getLambdaBody().outerScope() = this;


  InferredParameterDeclaration contributes each nameProblems() to CompilationUnit.problems();

  syn Collection<Problem> InferredParameterDeclaration.nameProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    SimpleSet<Variable> decls = outerScope().lookupVariable(name());
    for (Variable var : decls) {
      if (var instanceof VariableDeclarator) {
        VariableDeclarator decl = (VariableDeclarator) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      problems.add(errorf("duplicate declaration of parameter %s", name()));
    }
    return problems;
  }

  refine MultiCatch eq CatchParameterDeclaration.nameProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    SimpleSet<Variable> decls = outerScope().lookupVariable(name());
    for (Variable var : decls) {
      if (var instanceof VariableDeclarator) {
        VariableDeclarator decl = (VariableDeclarator) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of catch parameter %s", name()));
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of catch parameter %s", name()));
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of catch parameter %s", name()));
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of catch parameter %s", name()));
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      problems.add(errorf("duplicate declaration of catch parameter %s", name()));
    }
    return problems;
  }

  refine MultiCatch eq ParameterDeclaration.nameProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    SimpleSet<Variable> decls = outerScope().lookupVariable(name());
    for (Variable var : decls) {
      if (var instanceof VariableDeclarator) {
        VariableDeclarator decl = (VariableDeclarator) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of parameter %s", name()));
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      problems.add(errorf("duplicate declaration of parameter %s", name()));
    }
    return problems;
  }

  refine MultiCatch eq VariableDeclarator.nameProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    for (Variable var : lookupVariable(name())) {
      if (var instanceof VariableDeclarator) {
        VariableDeclarator decl = (VariableDeclarator) var;
        if (decl != this && decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("duplicate declaration of local variable %s", name()));
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("formal parameter is shadowed by local variable %s", name()));
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("catch parameter is shadowed by local variable %s", name()));
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          problems.add(errorf("lambda parameter is shadowed by local variable %s", name()));
        }
      }
    }
    return problems;
  }

  refine NameCheck eq VarAccess.nameProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (decls().isEmpty() && (!isQualified() || !qualifier().type().isUnknown()
          || qualifier().isPackageAccess())) {
      problems.add(errorf("no field named %s is accessible", name()));
    }

    if (decls().size() > 1) {
      StringBuilder sb = new StringBuilder();
      sb.append("several fields named " + name());
      ArrayList<String> fields = new ArrayList<String>();
      for (Variable v : decls()) {
        fields.add(String.format("%n    %s %s declared in %s",
            v.type().typeName(), v.name(), v.hostType().typeName()));
      }
      Collections.sort(fields);
      for (String line : fields) {
        sb.append(line);
      }
      problems.add(error(sb.toString()));
    }

    // 8.8.5.1
    if (inExplicitConstructorInvocation() && !isQualified() && decl().isInstanceVariable()
        && hostType() == decl().hostType()) {
      problems.add(errorf("instance variable %s may not be accessed in an explicit constructor invocation",
          name()));
    }

    Variable var = decl();
    if (!var.isClassVariable() && !var.isInstanceVariable() && var.hostType() != hostType()
        && !var.isEffectivelyFinal()) {
      problems.add(error("A parameter/variable used but not declared in an inner class must be"
          + " final or effectively final"));
    }

    // 8.3.2.3
    if ((decl().isInstanceVariable() || decl().isClassVariable()) && !isQualified()) {
      if (hostType() != null && !declaredBefore(decl())) {
        if (inSameInitializer() && !simpleAssignment() && inDeclaringClass()) {
          BodyDecl b = closestBodyDecl(hostType());
          problems.add(errorf("variable %s is used in %s before it is declared",
              decl().name(), b.prettyPrint()));
        }
      }
    }

    if (!var.isClassVariable() && !var.isInstanceVariable() && enclosingLambda() != null) {
      if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingLambda() != enclosingLambda()) {
          // 15.27.2
          if (!decl.isEffectivelyFinal()) {
            problems.add(errorf("Parameter %s must be effectively final", var.name()));
          }
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingLambda() != enclosingLambda()) {
          // 15.27.2
          if (!decl.isEffectivelyFinal()) {
            problems.add(errorf("Parameter %s must be effectively final", var.name()));
          }
        }
      } else if (var instanceof VariableDeclarator) {
        VariableDeclarator decl = (VariableDeclarator) var;
        if (decl.enclosingLambda() != enclosingLambda()) {
          // 15.27.2
          if (!decl.isEffectivelyFinal()) {
            problems.add(errorf("Variable %s must be effectively final", var.name()));
          }
          // 15.27.2
          if (!enclosingLambda().assignedBefore(decl)) {
            problems.add(errorf("Variable %s must be definitely assigned before used in a lambda",
                var.name()));
          }
        }
      }
    }
    return problems;
  }

  // TODO(joqvist): refine from wrong aspect??
  refine TypeCheck
  protected void TypeDecl.checkAbstractMethodDecls(Collection<Problem> problems,
      MethodDecl m1, MethodDecl m2) {
    if (!m1.subsignatureTo(m2) && !m2.subsignatureTo(m1)) {
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      String inh1 = "";
      String inh2 = "";
      if (host1 != this) {
        inh1 = "inherited ";
      }
      if (host2 != this) {
        inh2 = "inherited ";
      }

      //8.4.8.3
      problems.add(errorf("%smethod %s and %smethod %s are multiply declared with"
          + " the same erasure but not override-equivalent signatures in %s",
          inh1, m1.fullSignature(), inh2, m2.fullSignature(), fullName()));
    }
    // DON'T FORGET TO CHECK THIS, REALLY OK TO CHECK BOTH WAYS???
    if (!m1.returnTypeSubstitutableFor(m2) && !m2.returnTypeSubstitutableFor(m1)) {
      String inh1 = "";
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      if (host1 != this || host2 != this) {
        inh1 = "inherited ";
      }

      problems.add(errorf("%smethod %s is multiply declared with incompatible return types in %s",
          inh1, m1.fullSignature(), fullName()));
    }
  }

  protected void TypeDecl.checkInterfaceMethodDecls(Collection<Problem> problems,
      MethodDecl m1, MethodDecl m2) {
    if (m1.isAbstract() && m2.isAbstract()) {
      checkAbstractMethodDecls(problems, m1, m2);
      return;
    } else {
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      String inh1 = "";
      String inh2 = "";
      if (host1 != this) {
        inh1 = "inherited ";
      }
      if (host2 != this) {
        inh2 = "inherited ";
      }

      //9.4
      problems.add(errorf("%smethod %s and %smethod %s are multiply declared in %s",
          inh1, m1.fullSignature(), inh2, m2.fullSignature(), fullName()));
    }
  }

  refine TypeHierarchyCheck eq ClassDecl.nameProblems() {
    Collection<Problem> problems = refined();
    for (SimpleSet<MethodDecl> set : methodsSignatureMap().values()) {
      if (set.size() > 1) {
        boolean foundClassAbstract = false;
        MethodDecl foundNonAbstract = null;
        for (MethodDecl m : set) {
          if (!m.isAbstract()) {
            foundNonAbstract = m;
          } else if (m.hostType().isClassDecl() && m.hostType() != this) {
            foundClassAbstract = true;
          }
        }
        // 8.4.8.1
        if (foundNonAbstract != null && !foundClassAbstract) {
          problems.add(errorf("Method %s is multiply declared in %s",
              foundNonAbstract.fullSignature(), typeName()));
        }
      }
    }
    return problems;
  }

  refine TypeHierarchyCheck eq InterfaceDecl.typeHierarchyProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    //9.6.3.8
    if (hasAnnotationFunctionalInterface() && !isFunctional()) {
      problems.add(errorf("%s is not a functional interface", name()));
    }

    if (isCircular()) {
      problems.add(errorf("circular inheritance dependency in %s", typeName()));
    } else {
      for (int i = 0; i < getNumSuperInterface(); i++) {
        TypeDecl typeDecl = getSuperInterface(i).type();
        if (typeDecl.isCircular()) {
          problems.add(errorf("circular inheritance dependency in %s", typeName()));
        }
      }
    }
    for (SimpleSet<MethodDecl> set : methodsSignatureMap().values()) {
      if (set.size() > 1) {
        Iterator i2 = set.iterator();
        MethodDecl m = (MethodDecl) i2.next();
        while (i2.hasNext()) {
          MethodDecl n = (MethodDecl) i2.next();
          checkInterfaceMethodDecls(problems, m, n);
        }
      }
    }
    return problems;
  }

  refine TypeHierarchyCheck eq SuperAccess.typeHierarchyProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (isQualified()) {
      if (decl().isInterfaceDecl()) {
        InterfaceDecl decl = (InterfaceDecl) decl();
        if (hostType().isClassDecl()) {
          ClassDecl hostDecl = (ClassDecl) hostType();
          InterfaceDecl found = null;
          for (int i = 0; i < hostDecl.getNumImplements(); i++) {
            if (hostDecl.getImplements(i).type() == decl) {
              found = (InterfaceDecl) hostDecl.getImplements(i).type();
              break;
            }
          }
          if (found == null) {
            // 15.12.1 - fourth bullet
            problems.add(errorf("Type %s is not a direct superinterface of %s",
                decl().typeName(), hostType().typeName()));
            return problems;
          }
          InterfaceDecl foundRedundant = null;
          for (int i = 0; i < hostDecl.getNumImplements(); i++) {
            if (hostDecl.getImplements(i).type() != found && hostDecl.getImplements(i).type().strictSubtype(found)) {
              foundRedundant = (InterfaceDecl) hostDecl.getImplements(i).type();
              break;
            }
          }
          if (foundRedundant != null) {
            // 15.12.1 - fourth bullet
            problems.add(errorf("Type %s cannot be used as qualifier, it is extended by implemented interface %s and is redundant",
                decl().typeName(), foundRedundant.typeName()));
            return problems;
          }
          if (hasNextAccess() && nextAccess() instanceof MethodAccess) {
            MethodAccess methodAccess = (MethodAccess) nextAccess();
            if (hostDecl.hasOverridingMethodInSuper(methodAccess.decl())) {
              problems.add(errorf("Cannot make a super reference to method %s,"
                  + " there is a more specific override",
                  methodAccess.decl().fullSignature()));
            }
          }
        } else if (hostType().isInterfaceDecl()) {
          InterfaceDecl hostDecl = (InterfaceDecl) hostType();
          InterfaceDecl found = null;
          for (int i = 0; i < hostDecl.getNumSuperInterface(); i++) {
            if (hostDecl.getSuperInterface(i).type() == decl) {
              found = (InterfaceDecl) hostDecl.getSuperInterface(i).type();
              break;
            }
          }
          if (found == null) {
            // 15.12.1 - fourth bullet
            problems.add(errorf("Type %s is not a direct superinterface of %s",
                decl().typeName(), hostType().typeName()));
            return problems;
          }
          InterfaceDecl foundRedundant = null;
          for (int i = 0; i < hostDecl.getNumSuperInterface(); i++) {
            if (hostDecl.getSuperInterface(i).type() != found && hostDecl.getSuperInterface(i).type().strictSubtype(found)) {
              foundRedundant = (InterfaceDecl) hostDecl.getSuperInterface(i).type();
              break;
            }
          }
          if (foundRedundant != null) {
            // 15.12.1 - fourth bullet
            problems.add(errorf("Type %s cannot be used as qualifier, it is extended by"
                + " implemented interface %s and is redundant",
                decl().typeName(), foundRedundant.typeName()));
            return problems;
          }
          if (hasNextAccess() && nextAccess() instanceof MethodAccess) {
            MethodAccess methodAccess = (MethodAccess) nextAccess();
            if (hostDecl.hasOverridingMethodInSuper(methodAccess.decl())) {
              problems.add(errorf("Cannot make a super reference to method %s,"
                  + " there is a more specific override",
                  methodAccess.decl().fullSignature()));
            }
          }
        } else {
          problems.add(error("Illegal context for super access"));
        }

        if (hasNextAccess() && nextAccess() instanceof MethodAccess) {
          if (((MethodAccess) nextAccess()).decl().isStatic()) {
            problems.add(error("Cannot reference static interface methods with super"));
          }
        }

        if (!hostType().strictSubtype(decl())) {
          problems.add(errorf("Type %s is not a superinterface for %s",
              decl().typeName(), hostType().typeName()));
        }
      } else if (!hostType().isInnerTypeOf(decl()) && hostType() != decl()) {
        problems.add(error("qualified super must name an enclosing type"));
      }
      if (inStaticContext()) {
        problems.add(error("*** Qualified super may not occur in static context"));
      }
    }
    // 8.8.5.1
    // JLSv7 8.8.7.1
    TypeDecl constructorHostType = enclosingExplicitConstructorHostType();
    if (constructorHostType != null && (constructorHostType == decl())) {
      problems.add(error("super may not be accessed in an explicit constructor invocation"));
    }
    // 8.4.3.2
    if (inStaticContext()) {
      problems.add(error("super may not be accessed in a static context"));
    }
    return problems;
  }

  refine NameCheck eq MethodAccess.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).isPolyExpression() && getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  refine NameCheck eq ConstructorAccess.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).isPolyExpression() && getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  refine NameCheck eq ClassInstanceExpr.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).isPolyExpression() && getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  MethodReference contributes each nameProblems() to CompilationUnit.problems();

  syn Collection<Problem> MethodReference.nameProblems() {
    for (int i = 0; i < getNumTypeArgument(); i++) {
      if (getTypeArgument(i) instanceof AbstractWildcard) {
        return Collections.singletonList(
            error("Wildcard not allowed in method reference type argument lists"));
      }
    }
    return Collections.emptyList();
  }

  ExprMethodReference contributes
      error("Expression in a method reference must have reference type")
      when !getExpr().isSuperAccess() && !getExpr().type().isReferenceType()
      to CompilationUnit.problems();

  ClassReference contributes each nameProblems() to CompilationUnit.problems();

  syn Collection<Problem> ClassReference.nameProblems() {
    for (int i = 0; i < getNumTypeArgument(); i++) {
      if (getTypeArgument(i) instanceof AbstractWildcard) {
        return Collections.singletonList(
            error("Wildcard not allowed in constructor reference type argument lists"));
      }
    }
    return Collections.emptyList();
  }

  ArrayReference contributes each nameProblems() to CompilationUnit.problems();

  syn Collection<Problem> ArrayReference.nameProblems() {
    Access typeAccess = getTypeAccess();
    while (typeAccess instanceof ArrayTypeAccess) {
      typeAccess = ((ArrayTypeAccess) typeAccess).getAccess();
    }
    if (typeAccess instanceof ParTypeAccess) {
      return Collections.singletonList(error("Cannot create array of generic type"));
    }
    return Collections.emptyList();
  }

  DeclaredLambdaParameters contributes each nameProblems() to CompilationUnit.problems();

  syn Collection<Problem> DeclaredLambdaParameters.nameProblems() {
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).name().equals("_")) {
        // 15.27.1
        return Collections.singletonList(
            error("Underscore is not a valid identifier for a lambda parameter"));
      }
    }
    return Collections.emptyList();
  }

  InferredLambdaParameters contributes each nameProblems() to CompilationUnit.problems();

  syn Collection<Problem> InferredLambdaParameters.nameProblems() {
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).name().equals("_")) {
        // 15.27.1
        return Collections.singletonList(
            error("Underscore is not a valid identifier for a lambda parameter"));
      }
    }
    return Collections.emptyList();
  }
}
