/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2017, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect MethodSignature18 {

  /**
   * Creates a method access with a fixed target method declaration.
   *
   * <p>This is used to pin the type inference to inferring types based on a
   * candidate method declaration, instead of inferring types for an unbound
   * method access - which would cause circularity.
   *
   * <p>Binding a method access to a fixed method declaration solves a
   * circularity issue by creating bottom values for the inference attributes.
   * This fixes circularlity problems in nested type inference (inferred type
   * inside generic method argument).
   * When the innermost type inference is performed, it will try to
   * access the target type given by the context - this is the point
   * where the inference becomes circular.
   *
   * @return a BoundMethodAccess with the argument method as the target
   * declaration.
   */
  syn nta MethodAccess MethodAccess.boundAccess(MethodDecl decl) {
    return new BoundMethodAccess(name(), getArgList().treeCopyNoTransform(), decl);
  }

  // Propagate type lookups correctly for the bound access:
  eq MethodAccess.boundAccess().lookupType(String name) =
      unqualifiedScope().lookupType(name);

  /** Used to compute compatibility during phase 1 of overload resolution. */
  syn lazy boolean Expr.compatibleStrictContext(TypeDecl type) = type().subtype(type);

  eq LambdaExpr.compatibleStrictContext(TypeDecl type) {
    if (!type.isFunctionalInterface()) {
      return false;
    }
    InterfaceDecl iDecl = (InterfaceDecl) type;
    return congruentTo(iDecl.functionDescriptor());
  }

  eq MethodReference.compatibleStrictContext(TypeDecl type) {
    if (!type.isFunctionalInterface()) {
      return false;
    }
    InterfaceDecl iDecl = (InterfaceDecl) type;
    return congruentTo(iDecl.functionDescriptor());
  }

  eq ConstructorReference.compatibleStrictContext(TypeDecl type) {
    if (!type.isFunctionalInterface()) {
      return false;
    }
    InterfaceDecl iDecl = (InterfaceDecl) type;
    return congruentTo(iDecl.functionDescriptor());
  }

  eq ParExpr.compatibleStrictContext(TypeDecl type) = getExpr().compatibleStrictContext(type);

  eq ConditionalExpr.compatibleStrictContext(TypeDecl type) {
    if (isPolyExpression()) {
      return getTrueExpr().compatibleStrictContext(type)
          && getFalseExpr().compatibleStrictContext(type);
    } else {
      return super.compatibleStrictContext(type);
    }
  }

  eq ClassInstanceExpr.compatibleStrictContext(TypeDecl type) =
      isPolyExpression()
      ? assignConversionTo(type)
      : super.compatibleStrictContext(type);

  /* Used to compute compatibility during phase 2 of overload resolution */

  syn lazy boolean Expr.compatibleLooseContext(TypeDecl type) =
      type().methodInvocationConversionTo(type)
      || type().boxed().withinBounds(type);

  eq LambdaExpr.compatibleLooseContext(TypeDecl type) = compatibleStrictContext(type);

  eq MethodReference.compatibleLooseContext(TypeDecl type) = compatibleStrictContext(type);

  eq ConstructorReference.compatibleLooseContext(TypeDecl type) = compatibleStrictContext(type);

  eq ParExpr.compatibleLooseContext(TypeDecl type) = getExpr().compatibleLooseContext(type);

  eq ConditionalExpr.compatibleLooseContext(TypeDecl type) {
    if (isPolyExpression()) {
      return getTrueExpr().compatibleLooseContext(type)
          && getFalseExpr().compatibleLooseContext(type);
    } else {
      return super.compatibleLooseContext(type);
    }
  }

  eq ClassInstanceExpr.compatibleLooseContext(TypeDecl type) =
      isPolyExpression()
      ? assignConversionTo(type)
      : super.compatibleLooseContext(type);

  /* Computes pertinent to applicability, defined in 15.12.2.2 */

  syn lazy boolean Expr.pertinentToApplicability(Expr access, BodyDecl decl, int argIndex) = true;

  eq LambdaExpr.pertinentToApplicability(Expr access, BodyDecl decl, int argIndex) {
    if (isImplicit()) {
      return false;
    }
    if (decl instanceof MethodDecl
        && decl.isGeneric()
        && !(access instanceof ParMethodAccess)
        && ((MethodDecl) decl).genericDecl().getParameter(argIndex).type().isTypeVariable()) {
      GenericMethodDecl genericDecl = ((MethodDecl) decl).genericDecl();
      TypeVariable typeVar = (TypeVariable) genericDecl.getParameter(argIndex).type();
      for (int i = 0; i < genericDecl.getNumTypeParameter(); i++) {
        if (typeVar == genericDecl.getTypeParameter(i)) {
          return false;
        }
      }
    } else if (decl instanceof ConstructorDecl
        && decl.isGeneric()
        && !(access instanceof ParConstructorAccess)
        && !(access instanceof ParSuperConstructorAccess)
        && !(access instanceof ParClassInstanceExpr)
        && ((ConstructorDecl) decl).genericDecl().getParameter(argIndex).type().isTypeVariable()) {
      GenericConstructorDecl genericDecl = ((ConstructorDecl) decl).genericDecl();
      TypeVariable typeVar = (TypeVariable) genericDecl.getParameter(argIndex).type();
      for (int i = 0; i < genericDecl.getNumTypeParameter(); i++) {
        if (typeVar == genericDecl.getTypeParameter(i)) {
          return false;
        }
      }
    }
    if (getLambdaBody() instanceof ExprLambdaBody) {
      ExprLambdaBody exprBody = (ExprLambdaBody) getLambdaBody();
      if (!exprBody.getExpr().pertinentToApplicability(access, decl, argIndex)) {
        return false;
      }
    } else {
      BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
      ArrayList<ReturnStmt> returnList = blockBody.lambdaReturns();
      for (ReturnStmt returnStmt : returnList) {
        if (returnStmt.hasResult()
            && !returnStmt.getResult().pertinentToApplicability(access, decl, argIndex)) {
          return false;
        }
      }
    }
    return true;
  }

  eq MethodReference.pertinentToApplicability(Expr access, BodyDecl decl, int argIndex) {
    if (!isExact()) {
      return false;
    }
    if (decl instanceof MethodDecl
        && decl.isGeneric()
        && !(access instanceof ParMethodAccess)
        && ((MethodDecl) decl).genericDecl().getParameter(argIndex).type().isTypeVariable()) {
      GenericMethodDecl genericDecl = ((MethodDecl) decl).genericDecl();
      TypeVariable typeVar = (TypeVariable) genericDecl.getParameter(argIndex).type();
      for (int i = 0; i < genericDecl.getNumTypeParameter(); i++) {
        if (typeVar == genericDecl.getTypeParameter(i)) {
          return false;
        }
      }
    } else if (decl instanceof ConstructorDecl
        && decl.isGeneric()
        && !(access instanceof ParConstructorAccess)
        && !(access instanceof ParSuperConstructorAccess)
        && !(access instanceof ParClassInstanceExpr)
        && ((ConstructorDecl) decl).genericDecl().getParameter(argIndex).type().isTypeVariable()) {
      GenericConstructorDecl genericDecl = ((ConstructorDecl) decl).genericDecl();
      TypeVariable typeVar = (TypeVariable) genericDecl.getParameter(argIndex).type();
      for (int i = 0; i < genericDecl.getNumTypeParameter(); i++) {
        if (typeVar == genericDecl.getTypeParameter(i)) {
          return false;
        }
      }
    }
    return true;
  }

  eq ConstructorReference.pertinentToApplicability(Expr access, BodyDecl decl, int argIndex) {
    if (!isExact()) {
      return false;
    }
    if (decl instanceof MethodDecl
        && decl.isGeneric()
        && !(access instanceof ParMethodAccess)
        && ((MethodDecl) decl).genericDecl().getParameter(argIndex).type().isTypeVariable()) {
      GenericMethodDecl genericDecl = ((MethodDecl) decl).genericDecl();
      TypeVariable typeVar = (TypeVariable) genericDecl.getParameter(argIndex).type();
      for (int i = 0; i < genericDecl.getNumTypeParameter(); i++) {
        if (typeVar == genericDecl.getTypeParameter(i)) {
          return false;
        }
      }
    } else if (decl instanceof ConstructorDecl
        && decl.isGeneric()
        && !(access instanceof ParConstructorAccess)
        && !(access instanceof ParSuperConstructorAccess)
        && !(access instanceof ParClassInstanceExpr)
        && ((ConstructorDecl) decl).genericDecl().getParameter(argIndex).type().isTypeVariable()) {
      GenericConstructorDecl genericDecl = ((ConstructorDecl) decl).genericDecl();
      TypeVariable typeVar = (TypeVariable) genericDecl.getParameter(argIndex).type();
      for (int i = 0; i < genericDecl.getNumTypeParameter(); i++) {
        if (typeVar == genericDecl.getTypeParameter(i)) {
          return false;
        }
      }
    }
    return true;
  }

  eq ParExpr.pertinentToApplicability(Expr access, BodyDecl decl, int argIndex) =
      getExpr().pertinentToApplicability(access, decl, argIndex);

  eq ConditionalExpr.pertinentToApplicability(Expr access, BodyDecl decl, int argIndex) =
      getFalseExpr().pertinentToApplicability(access, decl, argIndex)
      && getTrueExpr().pertinentToApplicability(access, decl, argIndex);

  /**
   * Computes which type is more specific for a specific argument, as defined in 15.12.2.5
   * @param type1
   * @param type2
   * @return {@code true} if type1 is more specific than type2, {@code false} otherwise
   */
  syn lazy boolean Expr.moreSpecificThan(TypeDecl type1, TypeDecl type2) =
      type1.subtype(type2) || type1.withinBounds(type2);
      // TODO(jesper): Does not check proper subtype... should it?

  // 15.12.2.5
  eq LambdaExpr.moreSpecificThan(TypeDecl type1, TypeDecl type2) {
    if (super.moreSpecificThan(type1, type2)) {
      return true;
    }
    if (!type1.isFunctionalInterface() || !type2.isFunctionalInterface()) {
      return false;
    }
    if (type2.subtype(type1)) {
      // type1 cannot be more specific than type2 if it is a subtype of type2
      return false;
    }
    InterfaceDecl iDecl1 = (InterfaceDecl) type1;
    InterfaceDecl iDecl2 = (InterfaceDecl) type2;

    if (isImplicit()) {
      return false;
    }

    FunctionDescriptor fd1 = iDecl1.functionDescriptor();
    FunctionDescriptor fd2 = iDecl2.functionDescriptor();

    if (fd1.method.hasValue() && fd2.method.hasValue()) {
      // Can only compare method types if both function descriptors have target methods.
      TypeDecl methodType1 = fd1.method.get().type();
      TypeDecl methodType2 = fd2.method.get().type();

      // First bullet
      if (methodType2.isVoid()) {
        return true;
      }

      // Second bullet
      if (methodType1.subtype(methodType2)) {
        return true;
      }

      // Third bullet
      if (methodType1.isFunctionalInterface() && methodType2.isFunctionalInterface()) {
        if (getLambdaBody().isBlockBody()) {
          BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
          boolean allMoreSpecific = true;
          ArrayList<ReturnStmt> returnList = blockBody.lambdaReturns();
          for (ReturnStmt returnStmt : returnList) {
            if (returnStmt.hasResult() && !returnStmt.getResult().moreSpecificThan(methodType1,
                methodType2)) {
              allMoreSpecific = false;
              break;
            }
          }
          return allMoreSpecific;
        } else {
          ExprLambdaBody exprBody = (ExprLambdaBody) getLambdaBody();
          return exprBody.getExpr().moreSpecificThan(methodType1, methodType2);
        }
      }

      // Fourth bullet
      if (methodType1.isPrimitiveType() && methodType2.isReferenceType()) {
        if (getLambdaBody().isBlockBody()) {
          BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
          boolean allPrimitive = true;
          ArrayList<ReturnStmt> returnList = blockBody.lambdaReturns();
          for (ReturnStmt returnStmt : returnList) {
            if (returnStmt.hasResult() && returnStmt.getResult().isPolyExpression()) {
              allPrimitive = false;
              break;
            } else if (returnStmt.hasResult() && !returnStmt.getResult().type().isPrimitiveType()) {
              allPrimitive = false;
              break;
            }
          }
          return allPrimitive;
        } else {
          ExprLambdaBody exprBody = (ExprLambdaBody) getLambdaBody();
          if (exprBody.getExpr().isPolyExpression()) {
            return false;
          }
          return exprBody.getExpr().type().isPrimitiveType();
        }
      }

      // Fifth bullet
      if (methodType1.isReferenceType() && methodType2.isPrimitiveType()) {
        if (getLambdaBody().isBlockBody()) {
          BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
          boolean allReference = true;
          ArrayList<ReturnStmt> returnList = blockBody.lambdaReturns();
          for (ReturnStmt returnStmt : returnList) {
            if (returnStmt.hasResult() && !returnStmt.getResult().isPolyExpression()
                && !returnStmt.getResult().type().isReferenceType()) {
              allReference = false;
              break;
            }
          }
          return allReference;
        } else {
          ExprLambdaBody exprBody = (ExprLambdaBody) getLambdaBody();
          if (exprBody.getExpr().isPolyExpression()) {
            return true;
          }
          return exprBody.getExpr().type().isReferenceType();
        }
      }
    }
    return false;
  }

  // 15.12.2.5
  eq MethodReference.moreSpecificThan(TypeDecl type1, TypeDecl type2) {
    if (super.moreSpecificThan(type1, type2)) {
      return true;
    }
    if (!type1.isFunctionalInterface() || !type2.isFunctionalInterface()) {
      return false;
    }
    if (type2.subtype(type1)) {
      return false;
    }
    InterfaceDecl iDecl1 = (InterfaceDecl) type1;
    InterfaceDecl iDecl2 = (InterfaceDecl) type2;

    if (!isExact()) {
      return false;
    }

    FunctionDescriptor fd1 = iDecl1.functionDescriptor();
    FunctionDescriptor fd2 = iDecl2.functionDescriptor();
    if (fd1.method.hasValue() && fd2.method.hasValue()) {
      // Can only compare method types if both function descriptors have target methods.
      MethodDecl method1 = fd1.method.get();
      MethodDecl method2 = fd2.method.get();
      TypeDecl methodType1 = method1.type();
      TypeDecl methodType2 = method2.type();

      if (method1.arity() != method2.arity()) {
        return false;
      }

      for (int i = 0; i < method1.getNumParameter(); i++) {
        if (method1.getParameter(i).type() != method2.getParameter(i).type()) {
          return false;
        }
      }

      // First bullet
      if (methodType2.isVoid()) {
        return true;
      }

      // Second bullet
      if (methodType1.subtype(methodType2)) {
        return true;
      }

      // Third bullet
      if (methodType1.isPrimitiveType() && methodType2.isReferenceType()) {
        return exactCompileTimeDeclaration().type().isPrimitiveType();
      }

      // Fourth bullet
      if (methodType1.isReferenceType() && methodType2.isPrimitiveType()) {
        return exactCompileTimeDeclaration().type().isReferenceType();
      }
    }

    return false;
  }

  // 15.12.2.5
  eq ConstructorReference.moreSpecificThan(TypeDecl type1, TypeDecl type2) {
    if (super.moreSpecificThan(type1, type2)) {
      return true;
    }
    if (!type1.isFunctionalInterface() || !type2.isFunctionalInterface()) {
      return false;
    }
    if (type2.subtype(type1)) {
      return false;
    }
    InterfaceDecl iDecl1 = (InterfaceDecl) type1;
    InterfaceDecl iDecl2 = (InterfaceDecl) type2;

    if (!isExact()) {
      return false;
    }

    FunctionDescriptor fd1 = iDecl1.functionDescriptor();
    FunctionDescriptor fd2 = iDecl2.functionDescriptor();
    if (fd1.method.hasValue() && fd2.method.hasValue()) {
      // Can only compare method types if both function descriptors have target methods.
      MethodDecl method1 = fd1.method.get();
      MethodDecl method2 = fd2.method.get();
      TypeDecl methodType1 = method1.type();
      TypeDecl methodType2 = method2.type();

      if (method1.arity() != method2.arity()) {
        return false;
      }

      for (int i = 0; i < method1.getNumParameter(); i++) {
        if (method1.getParameter(i).type() != method2.getParameter(i).type()) {
          return false;
        }
      }

      // First bullet
      if (methodType2.isVoid()) {
        return true;
      }

      // Second bullet
      if (methodType1.subtype(methodType2)) {
        return true;
      }

      // Third bullet
      if (methodType1.isPrimitiveType() && methodType2.isReferenceType()) {
        // A constructor can never have primitive return type
        return false;
      }

      // Fourth bullet
      if (methodType1.isReferenceType() && methodType2.isPrimitiveType()) {
        // A constructor always have reference return type
        return true;
      }
    }

    return false;

  }

  eq ParExpr.moreSpecificThan(TypeDecl type1, TypeDecl type2) {
    if (super.moreSpecificThan(type1, type2)) {
      return true;
    }
    return getExpr().moreSpecificThan(type1, type2);
  }

  eq ConditionalExpr.moreSpecificThan(TypeDecl type1, TypeDecl type2) {
    if (super.moreSpecificThan(type1, type2)) {
      return true;
    }
    return getTrueExpr().moreSpecificThan(type1, type2)
        && getFalseExpr().moreSpecificThan(type1, type2);
  }

  /* Computes whether a certain candidate method or constructor is potentially compatible
     as defined in 15.12.2.1 */

  syn lazy boolean Expr.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) = true;

  eq LambdaExpr.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (type.isTypeVariable()) {
      if (candidateDecl.isGeneric()) {
        boolean foundTypeVariable = false;
        List<TypeVariable> typeParams = candidateDecl.typeParameters();
        for (int i = 0; i < typeParams.getNumChild(); i++) {
          if (type == typeParams.getChild(i)) {
            foundTypeVariable = true;
            break;
          }
        }
        return foundTypeVariable;
      } else {
        return false;
      }
    }

    if (!type.isFunctionalInterface()) {
      return false;
    }
    InterfaceDecl iDecl = (InterfaceDecl) type;
    FunctionDescriptor fd = iDecl.functionDescriptor();
    if (fd.method.hasValue()) {
      MethodDecl targetMethod = fd.method.get();

      if (arity() != targetMethod.arity()) {
        return false;
      }
      if (targetMethod.type().isVoid()) {
        if (getLambdaBody().isExprBody()) {
          ExprLambdaBody exprBody = (ExprLambdaBody) getLambdaBody();
          if (!exprBody.getExpr().stmtCompatible()) {
            return false;
          }
        } else {
          BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
          if (!blockBody.voidCompatible()) {
            return false;
          }
        }
      } else {
        if (getLambdaBody().isBlockBody()) {
          BlockLambdaBody blockBody = (BlockLambdaBody) getLambdaBody();
          if (!blockBody.valueCompatible()) {
            return false;
          }
        }
      }
      return true;
    } else {
      // No target method.
      return false;
    }
  }

  eq MethodReference.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (type.isTypeVariable()) {
      if (candidateDecl.isGeneric()) {
        boolean foundTypeVariable = false;
        List<TypeVariable> typeParams = candidateDecl.typeParameters();
        for (int i = 0; i < typeParams.getNumChild(); i++) {
          if (type == typeParams.getChild(i)) {
            foundTypeVariable = true;
            break;
          }
        }
        return foundTypeVariable;
      } else {
        return false;
      }
    }

    if (!type.isFunctionalInterface()) {
      return false;
    }
    return true;
  }

  eq ExprMethodReference.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (super.potentiallyCompatible(type, candidateDecl) && type.isTypeVariable()) {
      return true;
    } else if (!super.potentiallyCompatible(type, candidateDecl)) {
      return false;
    }

    InterfaceDecl iDecl = (InterfaceDecl) type;
    FunctionDescriptor fd = iDecl.functionDescriptor();
    boolean foundMethod = false;
    if (fd.method.hasValue()) {
      MethodDecl targetMethod = fd.method.get();
      for (MethodDecl decl : potentiallyApplicableMethods(fd)) {
        if (!decl.isStatic() && targetMethod.arity() == decl.arity()) {
          foundMethod = true;
          break;
        }
      }
    }
    return foundMethod;
  }

  eq TypeMethodReference.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (super.potentiallyCompatible(type, candidateDecl) && type.isTypeVariable()) {
      return true;
    } else if (!super.potentiallyCompatible(type, candidateDecl)) {
      return false;
    }

    InterfaceDecl iDecl = (InterfaceDecl) type;
    FunctionDescriptor fd = iDecl.functionDescriptor();
    boolean foundMethod = false;
    if (fd.method.hasValue()) {
      MethodDecl targetMethod = fd.method.get();
      for (MethodDecl decl : potentiallyApplicableMethods(fd)) {
        if (decl.isStatic() && targetMethod.arity() == decl.arity()) {
          foundMethod = true;
          break;
        } else if (!decl.isStatic() && targetMethod.arity() - 1 == decl.arity()) {
          foundMethod = true;
          break;
        }
      }
    }
    return foundMethod;
  }

  eq ConstructorReference.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (type.isTypeVariable()) {
      if (candidateDecl.isGeneric()) {
        boolean foundTypeVariable = false;
        List<TypeVariable> typeParams = candidateDecl.typeParameters();
        for (int i = 0; i < typeParams.getNumChild(); i++) {
          if (type == typeParams.getChild(i)) {
            foundTypeVariable = true;
            break;
          }
        }
        return foundTypeVariable;
      } else {
        return false;
      }
    }

    if (!type.isFunctionalInterface()) {
      return false;
    }
    return true;
  }

  eq ClassReference.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (super.potentiallyCompatible(type, candidateDecl) && type.isTypeVariable()) {
      return true;
    } else if (!super.potentiallyCompatible(type, candidateDecl)) {
      return false;
    }

    InterfaceDecl iDecl = (InterfaceDecl) type;
    FunctionDescriptor fd = iDecl.functionDescriptor();

    boolean foundMethod = false;
    if (fd.method.hasValue()) {
      MethodDecl targetMethod = fd.method.get();
      for (ConstructorDecl decl : potentiallyApplicableConstructors(fd)) {
        if (targetMethod.arity() == decl.arity()) {
          foundMethod = true;
          break;
        }
      }
    }
    return foundMethod;
  }

  eq ArrayReference.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (super.potentiallyCompatible(type, candidateDecl) && type.isTypeVariable()) {
      return true;
    } else if (!super.potentiallyCompatible(type, candidateDecl)) {
      return false;
    }
    InterfaceDecl iDecl = (InterfaceDecl) type;
    FunctionDescriptor fd = iDecl.functionDescriptor();
    if (fd.method.hasValue()) {
      return fd.method.get().arity() == 1;
    } else {
      return false;
    }
  }

  eq ParExpr.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) =
      getExpr().potentiallyCompatible(type, candidateDecl);

  eq ConditionalExpr.potentiallyCompatible(TypeDecl type, BodyDecl candidateDecl) {
    if (!isPolyExpression()) {
      return true;
    }
    return getTrueExpr().potentiallyCompatible(type, candidateDecl)
        && getFalseExpr().potentiallyCompatible(type, candidateDecl);
  }



  /* Below are the relevant overload resolution computations for choosing a method */

  refine MethodSignature15
  protected SimpleSet<MethodDecl> MethodAccess.maxSpecific(Iterable<MethodDecl> candidates) {
    SimpleSet<MethodDecl> potentiallyApplicable = potentiallyApplicable(candidates);

    // First phase.
    SimpleSet<MethodDecl> maxSpecific = emptySet();
    for (MethodDecl method : potentiallyApplicable) {
      if (boundAccess(method).applicableBySubtyping(method)) {
        maxSpecific = mostSpecific(maxSpecific, method);
      }
    }

    // Second phase.
    if (maxSpecific.isEmpty()) {
      for (MethodDecl method : potentiallyApplicable) {
        if (boundAccess(method).applicableByMethodInvocationConversion(method)) {
          maxSpecific = mostSpecific(maxSpecific, method);
        }
      }
    }

    // Third phase.
    if (maxSpecific.isEmpty()) {
      for (MethodDecl method : potentiallyApplicable) {
        if (method.isVariableArity() && boundAccess(method).applicableVariableArity(method)) {
          maxSpecific = mostSpecific(maxSpecific, method);
        }
      }
    }
    return maxSpecific;
  }

  refine MethodSignature15
  eq MethodAccess.applicableBySubtyping(MethodDecl m) {
    if (m.getNumParameter() != getNumArg()) {
      return false;
    }
    for (int i = 0; i < m.getNumParameter(); i++) {
      if (!getArg(i).pertinentToApplicability(this, m, i)) {
        continue;
      } else if (!getArg(i).compatibleStrictContext(m.getParameter(i).type())) {
        return false;
      }
    }
    return true;
  }

  refine MethodSignature15
  eq MethodAccess.applicableByMethodInvocationConversion(MethodDecl m) {
    if (m.getNumParameter() != getNumArg()) {
      return false;
    }
    for (int i = 0; i < m.getNumParameter(); i++) {
      if (!getArg(i).pertinentToApplicability(this, m, i)) {
        continue;
      } else if (!getArg(i).compatibleLooseContext(m.getParameter(i).type())) {
        return false;
      }
    }
    return true;
  }

  refine MethodSignature15
  eq MethodAccess.applicableVariableArity(MethodDecl m) {
    for (int i = 0; i < m.getNumParameter() - 1; i++) {
      if (!getArg(i).pertinentToApplicability(this, m, i)) {
        continue;
      }
      if (!getArg(i).compatibleLooseContext(m.getParameter(i).type())) {
        return false;
      }
    }
    for (int i = m.getNumParameter() - 1; i < getNumArg(); i++) {
      if (!getArg(i).pertinentToApplicability(this, m, i)) {
        continue;
      }
      if (!getArg(i).compatibleLooseContext(m.lastParameter().type().componentType())) {
        return false;
      }
    }
    return true;
  }

  protected boolean MethodAccess.moreSpecificThan(MethodDecl m1, MethodDecl m2) {
    if (m1 instanceof ParMethodDecl) {
      return m1.moreSpecificThan(m2);
    }
    if (m1.getNumParameter() == 0) {
      return false;
    }
    if (!m1.isVariableArity() && !m2.isVariableArity()) {
      for (int i = 0; i < m1.getNumParameter(); i++) {
        if (!getArg(i).moreSpecificThan(m1.getParameter(i).type(), m2.getParameter(i).type())) {
          return false;
        }
      }
      return true;
    }

    boolean expandVarargs = m1.isVariableArity() && m2.isVariableArity();

    int num = getNumArg();
    for (int i = 0; i < num; i++) {
      ParameterDeclaration p1 = i < m1.getNumParameter()
          ? m1.getParameter(i)
          : m1.getParameter(m1.getNumParameter() - 1);
      ParameterDeclaration p2 = i < m2.getNumParameter()
          ? m2.getParameter(i)
          : m2.getParameter(m2.getNumParameter() - 1);
      TypeDecl t1 = expandVarargs && p1.isVariableArity() ? p1.type().componentType() : p1.type();
      TypeDecl t2 = expandVarargs && p2.isVariableArity() ? p2.type().componentType() : p2.type();
      if (!getArg(i).moreSpecificThan(t1, t2)) {
          return false;
      }
    }
    num++;
    if (m2.getNumParameter() == num) {
      ParameterDeclaration p1 = num < m1.getNumParameter()
          ? m1.getParameter(num)
          : m1.getParameter(m1.getNumParameter() - 1);
      ParameterDeclaration p2 = num < m2.getNumParameter()
          ? m2.getParameter(num)
          : m2.getParameter(m2.getNumParameter() - 1);
      TypeDecl t1 = expandVarargs && p1.isVariableArity() ? p1.type().componentType() : p1.type();
      TypeDecl t2 = expandVarargs && p2.isVariableArity() ? p2.type().componentType() : p2.type();
      if (!t1.subtype(t2) && !t1.withinBounds(t2)) {
        return false;
      }
    }
    return true;
  }

  refine MethodSignature15
  private SimpleSet<MethodDecl> MethodAccess.mostSpecific(SimpleSet<MethodDecl> maxSpecific,
      MethodDecl decl) {
    SimpleSet<MethodDecl> newMax;
    if (maxSpecific.isEmpty()) {
      newMax = maxSpecific.add(decl);
    } else {
      boolean foundStricter = false;
      newMax = emptySet();
      for (MethodDecl toCompare : maxSpecific) {
        if (!(moreSpecificThan(decl, toCompare) && !moreSpecificThan(toCompare, decl))) {
          newMax = newMax.add(toCompare);
        }
        if (!moreSpecificThan(decl, toCompare) && moreSpecificThan(toCompare, decl)) {
          foundStricter = true;
        }
      }
      if (!foundStricter) {
        newMax = newMax.add(decl);
      }
    }
    return newMax;
  }

  refine MethodSignature15
  protected SimpleSet<MethodDecl> MethodAccess.potentiallyApplicable(
      Iterable<MethodDecl> candidates) {
    SimpleSet<MethodDecl> potentiallyApplicable = emptySet();
    // Select potentially applicable methods.
    for (MethodDecl method : candidates) {
      if (potentiallyApplicable(method) && accessible(method)) {
        if (method.isGeneric()) {
          GenericMethodDecl gm = method.genericDecl();
          MethodAccess inferenceNode;
          if (this instanceof ParMethodAccess) {
            inferenceNode = this;
          } else {
            inferenceNode = boundAccess(gm);
          }
          Collection<TypeDecl> typeArguments = inferenceNode.inferTypeArguments(
              method.type(),
              method.getParameterList(),
              inferenceNode.getArgList(),
              gm.getTypeParameterList(),
              gm.getExceptionList());
          method = gm.lookupParMethodDecl(typeArguments);
        }
        potentiallyApplicable = potentiallyApplicable.add(method);
      }
    }
    return potentiallyApplicable;
  }

  refine MethodSignature15 eq MethodAccess.potentiallyApplicable(MethodDecl m) {
    if (!m.name().equals(name())) {
      return false;
    }
    if (!m.accessibleFrom(hostType())) {
      return false;
    }
    if (!m.isVariableArity()) {
      if (arity() != m.arity()) {
        return false;
      }
      for (int i = 0; i < getNumArg(); i++) {
        if (!getArg(i).potentiallyCompatible(m.getParameter(i).type(), m)) {
          return false;
        }
      }
    }
    if (m.isVariableArity()) {
      if (!(arity() >= m.arity() - 1)) {
        return false;
      }
      for (int i = 0; i < m.arity() - 2; i++) {
        if (!getArg(i).potentiallyCompatible(m.getParameter(i).type(), m)) {
          return false;
        }
      }
      TypeDecl varArgType = m.getParameter(m.arity() - 1).type();
      if (arity() == m.arity()) {
        if (!getArg(arity() - 1).potentiallyCompatible(varArgType, m)
            && !getArg(arity() - 1).potentiallyCompatible(varArgType.componentType(), m)) {
          return false;
        }
      } else if (arity() > m.arity()) {
        for (int i = m.arity() - 1; i < arity(); i++) {
          if (!getArg(i).potentiallyCompatible(varArgType.componentType(), m)) {
            return false;
          }
        }
      }
    }

    if (m.isGeneric()) {
      GenericMethodDecl gm = m.genericDecl();
      MethodAccess inferenceNode;
      if (this instanceof ParMethodAccess) {
        // Type inference is not needed for a parameterized method access.
        inferenceNode = this;
      } else {
        inferenceNode = boundAccess(gm);
      }
      ArrayList<TypeDecl> typeArguments = inferenceNode.inferTypeArguments(
          gm.type(),
          gm.getParameterList(),
          inferenceNode.getArgList(),
          gm.getTypeParameterList(),
          gm.getExceptionList());
      if (!typeArguments.isEmpty()) {
        if (gm.getNumTypeParameter() != typeArguments.size()) {
          return false;
        }
        ParMethodDecl parMethod = gm.lookupParMethodDecl(typeArguments);
        for (int i = 0; i < gm.getNumTypeParameter(); i++) {
          if (!((TypeDecl) typeArguments.get(i)).withinBounds(parMethod.getTypeParameter(i))) {
            return false;
          }
        }
      }
    }

    return true;
  }


  /* Below are the relevant overload resolution computations for choosing a constructor */

  refine MethodSignature15
  protected SimpleSet<ConstructorDecl> Expr.chooseConstructor(
      Collection<ConstructorDecl> constructors, List<Expr> argList) {
    SimpleSet<ConstructorDecl> potentiallyApplicable = emptySet();

    // Select potentially applicable constructors.
    for (ConstructorDecl decl : constructors) {
      if (decl.potentiallyApplicable(argList) && decl.accessibleFrom(hostType())) {
        if (decl.isGeneric()) {
          GenericConstructorDecl gc = decl.genericDecl();
          decl = gc.lookupParConstructorDecl(
              inferTypeArguments(
                  gc.type(),
                  gc.getParameterList(),
                  argList,
                  gc.getTypeParameterList(),
                  gc.getExceptionList()));
        }
        potentiallyApplicable = potentiallyApplicable.add(decl);
      }
    }

    // First phase.
    SimpleSet<ConstructorDecl> maxSpecific = emptySet();
    for (ConstructorDecl decl : potentiallyApplicable) {
      if (decl.applicableByStrictInvocation(this, argList)) {
        maxSpecific = mostSpecific(maxSpecific, decl, argList);
      }
    }

    // Second phase.
    if (maxSpecific.isEmpty()) {
      for (ConstructorDecl decl : potentiallyApplicable) {
        if (decl.applicableByLooseInvocation(this, argList)) {
          maxSpecific = mostSpecific(maxSpecific, decl, argList);
        }
      }
    }

    // Third phase.
    if (maxSpecific.isEmpty()) {
      for (ConstructorDecl decl : potentiallyApplicable) {
        if (decl.isVariableArity() && decl.applicableByVariableArityInvocation(this, argList)) {
          maxSpecific = mostSpecific(maxSpecific, decl, argList);
        }
      }
    }
    return maxSpecific;
  }

  refine MethodSignature15
  eq ConstructorDecl.potentiallyApplicable(List<Expr> argList) {
    int argArity = argList.getNumChild();
    if (!isVariableArity()) {
      if (argArity != arity()) {
        return false;
      }
      for (int i = 0; i < argArity; i++) {
        Expr expr = argList.getChild(i);
        if (!expr.potentiallyCompatible(getParameter(i).type(), this)) {
          return false;
        }
      }
    } else {
    //if (isVariableArity()) {
      if (!(argArity >= arity() - 1)) {
        return false;
      }
      for (int i = 0; i < arity() - 2; i++) {
        Expr expr = argList.getChild(i);
        if (!expr.potentiallyCompatible(getParameter(i).type(), this)) {
          return false;
        }
      }
      TypeDecl varArgType = getParameter(arity() - 1).type();
      if (argArity == arity()) {
        Expr expr = argList.getChild(argArity - 1);
        if (!expr.potentiallyCompatible(varArgType, this)
            && !expr.potentiallyCompatible(varArgType.componentType(), this)) {
          return false;
        }
      } else if (argArity > arity()) {
        for (int i = arity() - 1; i < argArity; i++) {
          Expr expr = argList.getChild(i);
          if (!expr.potentiallyCompatible(varArgType.componentType(), this)) {
            return false;
          }
        }
      }
    }

    return true;
  }

  syn boolean ConstructorDecl.applicableByStrictInvocation(Expr expr, List<Expr> argList) {
    if (getNumParameter() != argList.getNumChild()) {
      return false;
    }
    for (int i = 0; i < getNumParameter(); i++) {
      Expr arg = argList.getChild(i);
      if (!arg.pertinentToApplicability(expr, this, i)) {
        continue;
      }
      if (!arg.compatibleStrictContext(getParameter(i).type())) {
        return false;
      }
    }
    return true;
  }

  syn boolean ConstructorDecl.applicableByLooseInvocation(Expr expr, List<Expr> argList) {
    if (getNumParameter() != argList.getNumChild()) {
      return false;
    }
    for (int i = 0; i < getNumParameter(); i++) {
      Expr arg = argList.getChild(i);
      if (!arg.pertinentToApplicability(expr, this, i)) {
        continue;
      }
      if (!arg.compatibleLooseContext(getParameter(i).type())) {
        return false;
      }
    }
    return true;
  }

  syn boolean ConstructorDecl.applicableByVariableArityInvocation(Expr expr, List<Expr> argList) {
    for (int i = 0; i < getNumParameter() - 1; i++) {
      Expr arg = argList.getChild(i);
      if (!arg.pertinentToApplicability(expr, this, i)) {
        continue;
      }
      if (!arg.compatibleLooseContext(getParameter(i).type())) {
        return false;
      }
    }
    for (int i = getNumParameter() - 1; i < argList.getNumChild(); i++) {
      Expr arg = argList.getChild(i);
      if (!arg.pertinentToApplicability(expr, this, i)) {
        continue;
      }
      if (!arg.compatibleLooseContext(lastParameter().type().componentType())) {
        return false;
      }
    }
    return true;
  }

  protected static boolean Expr.moreSpecificThan(ConstructorDecl m1, ConstructorDecl m2,
      List<Expr> argList) {
    if (m1 instanceof ParConstructorDecl) {
      return m1.moreSpecificThan(m2);
    }
    if (m1.getNumParameter() == 0) {
      return false;
    }
    if (!m1.isVariableArity() && !m2.isVariableArity()) {
      for (int i = 0; i < m1.getNumParameter(); i++) {
        Expr arg = argList.getChild(i);
        if (!arg.moreSpecificThan(m1.getParameter(i).type(), m2.getParameter(i).type())) {
          return false;
        }
      }
      return true;
    }

    boolean expandVarargs = m1.isVariableArity() && m2.isVariableArity();

    int num = argList.getNumChild();
    for (int i = 0; i < num; i++) {
      ParameterDeclaration p1 = i < m1.getNumParameter()
          ? m1.getParameter(i)
          : m1.getParameter(m1.getNumParameter() - 1);
      ParameterDeclaration p2 = i < m2.getNumParameter()
          ? m2.getParameter(i)
          : m2.getParameter(m2.getNumParameter() - 1);
      TypeDecl t1 = expandVarargs && p1.isVariableArity() ? p1.type().componentType() : p1.type();
      TypeDecl t2 = expandVarargs && p2.isVariableArity() ? p2.type().componentType() : p2.type();
      Expr arg = argList.getChild(i);
      if (!arg.moreSpecificThan(t1, t2)) {
          return false;
      }
    }
    num++;
    if (m2.getNumParameter() == num) {
      ParameterDeclaration p1 = num < m1.getNumParameter()
          ? m1.getParameter(num)
          : m1.getParameter(m1.getNumParameter() - 1);
      ParameterDeclaration p2 = num < m2.getNumParameter()
          ? m2.getParameter(num)
          : m2.getParameter(m2.getNumParameter() - 1);
      TypeDecl t1 = expandVarargs && p1.isVariableArity() ? p1.type().componentType() : p1.type();
      TypeDecl t2 = expandVarargs && p2.isVariableArity() ? p2.type().componentType() : p2.type();
      if (!t1.subtype(t2) && !t1.withinBounds(t2)) {
        return false;
      }
    }
    return true;
  }

  protected static SimpleSet<ConstructorDecl> Expr.mostSpecific(
      SimpleSet<ConstructorDecl> maxSpecific, ConstructorDecl decl, List<Expr> argList) {
    SimpleSet<ConstructorDecl> newMax;
    if (maxSpecific.isEmpty()) {
      newMax = maxSpecific.add(decl);
    } else {
      boolean foundStricter = false;
      newMax = emptySet();
      for (ConstructorDecl toCompare : maxSpecific) {
        if (!(moreSpecificThan(decl, toCompare, argList)
            && !moreSpecificThan(toCompare, decl, argList))) {
          newMax = newMax.add(toCompare);
        }
        if (!moreSpecificThan(decl, toCompare, argList)
            && moreSpecificThan(toCompare, decl, argList)) {
          foundStricter = true;
        }
      }
      if (!foundStricter) {
        newMax = newMax.add(decl);
      }
    }
    return newMax;
  }

  /* Overload resolution ends here */

  syn lazy boolean InterfaceDecl.hasOverridingMethodInSuper(MethodDecl m) {
    for (InterfaceDecl iface : superInterfaces()) {
      for (MethodDecl superMethod : iface.methods()) {
        if (m != superMethod && superMethod.overrides(m)) {
          return true;
        }
      }
    }
    return false;
  }

  syn lazy boolean ClassDecl.hasOverridingMethodInSuper(MethodDecl m) {
    for (MethodDecl superMethod : interfacesMethods()) {
      if (m != superMethod && superMethod.overrides(m)) {
        return true;
      }

    }
    if (hasSuperclass()) {
      for (MethodDecl superMethod : superclass().methods()) {
        if (m != superMethod && superMethod.overrides(m)) {
          return true;
        }
      }
    }

    return false;
  }


  refine MethodSignature15
  eq InterfaceDecl.methods() {
    Map<String, SimpleSet<MethodDecl>> localMap = localMethodsSignatureMap();
    ArrayList<MethodDecl> methods = new ArrayList<MethodDecl>(localMethods());
    for (MethodDecl m : interfacesMethods()) {
      if (!m.isStatic()
          && m.accessibleFrom(this)
          && !localMap.containsKey(m.signature())
          && !hasOverridingMethodInSuper(m)) {
        methods.add(m);
      }
    }
    for (MethodDecl m : typeObject().methods()) {
      // TODO(joqvist): is it possible to simplify this?
      if (m.isPublic()
          && !containsSignature(methods, m.signature())) {
        methods.add(m);
      }
    }
    return methods;
  }

  refine MethodSignature15
  eq ClassDecl.methods() {
    Map<String, SimpleSet<MethodDecl>> localMap = localMethodsSignatureMap();
    ArrayList<MethodDecl> methods = new ArrayList<MethodDecl>(localMethods());
    Set<String> fromSuperClass = new HashSet<String>();
    if (hasSuperclass()) {
      for (MethodDecl m : superclass().methods()) {
        if (!m.isPrivate()
            && m.accessibleFrom(this)
            && !localMap.containsKey(m.signature())) {
          methods.add(m);
          if (!m.isAbstract()) {
            fromSuperClass.add(m.signature());
          }
        }
      }
    }
    for (MethodDecl m : interfacesMethods()) {
      if (!m.isStatic()
          && m.accessibleFrom(this)
          && !localMap.containsKey(m.signature())
          && !hasOverridingMethodInSuper(m)
          && !fromSuperClass.contains(m.signature())) {
        methods.add(m);
      }
    }
    return methods;
  }
}
