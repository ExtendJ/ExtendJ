/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect PreciseRethrow {
  inh boolean InferredParameterDeclaration.inhModifiedInScope(Variable var);
  inh boolean LambdaParameters.inhModifiedInScope(Variable var);
  inh boolean VariableDeclarator.inhModifiedInScope(Variable var);

  eq LambdaExpr.getLambdaParameters().inhModifiedInScope(Variable var) = modifiedInScope(var);
  eq DeclaredLambdaParameters.getParameter().inhModifiedInScope(Variable var) =
      inhModifiedInScope(var);
  eq InferredLambdaParameters.getParameter().inhModifiedInScope(Variable var) =
      inhModifiedInScope(var);

  syn boolean BodyDecl.modifiedInScope(Variable var);
  syn boolean TypeDecl.modifiedInScope(Variable var);

  syn boolean LambdaBody.modifiedInScope(Variable var);
  eq LambdaExpr.modifiedInScope(Variable var) = getLambdaBody().modifiedInScope(var);
  eq BlockLambdaBody.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
  eq ExprLambdaBody.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);

  eq EnhancedForStmt.getVariableDecl().inhModifiedInScope(Variable var) = modifiedInScope(var);
  eq EnhancedForStmt.getStmt().inhModifiedInScope(Variable var) = false;
  eq Block.getStmt().inhModifiedInScope(Variable var) = modifiedInScope(var);
  eq IfStmt.getThen().inhModifiedInScope(Variable var) = false;
  eq IfStmt.getElse().inhModifiedInScope(Variable var) = false;
  eq WhileStmt.getStmt().inhModifiedInScope(Variable var) = false;
  eq DoStmt.getStmt().inhModifiedInScope(Variable var) = false;
  eq ForStmt.getInitStmt().inhModifiedInScope(Variable var) = modifiedInScope(var);
  eq ForStmt.getUpdateStmt().inhModifiedInScope(Variable var) = modifiedInScope(var);
  eq ForStmt.getStmt().inhModifiedInScope(Variable var) = false;
  eq FieldDecl.getDeclarator().inhModifiedInScope(Variable var) = false;

  eq ConstructorDecl.getParsedConstructorInvocation().inhModifiedInScope(Variable var) = false;
  eq ConstructorDecl.getImplicitConstructorInvocation().inhModifiedInScope(Variable var) = false;

  eq BodyDecl.modifiedInScope(Variable var) = false;
  eq ConstructorDecl.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
  eq InstanceInitializer.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
  eq StaticInitializer.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);

  refine PreciseRethrow
  eq LocalClassDeclStmt.modifiedInScope(Variable var) = getClassDecl().modifiedInScope(var);
  eq MemberClassDecl.modifiedInScope(Variable var) = getClassDecl().modifiedInScope(var);
  eq MemberInterfaceDecl.modifiedInScope(Variable var) = getInterfaceDecl().modifiedInScope(var);
  eq MethodDecl.modifiedInScope(Variable var) = hasBlock() && getBlock().modifiedInScope(var);

  eq TypeDecl.modifiedInScope(Variable var) {
    for (int i = 0; i < getNumBodyDecl(); i++) {
      BodyDecl body = getBodyDecl(i);
      if (body.modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }

  eq ArrayAccess.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);

  refine PreciseRethrow
  eq Dot.modifiedInScope(Variable var) =
      getLeft().modifiedInScope(var) || getRight().modifiedInScope(var);

  eq PostIncExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
  eq PostDecExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
  eq PreIncExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);
  eq PreDecExpr.modifiedInScope(Variable var) = getOperand().isVariable(var);

  refine PreciseRethrow
  eq ClassInstanceExpr.modifiedInScope(Variable var) {
    for (int i = 0; i < getNumArg(); ++i) {
      if (getArg(i).modifiedInScope(var)) {
        return true;
      }
    }
    if (hasTypeDecl()) {
      return getTypeDecl().modifiedInScope(var);
    } else {
      return false;
    }
  }

  refine PreciseRethrow
  eq ConstructorDecl.getParameter().inhModifiedInScope(Variable var) {
    return getBlock().modifiedInScope(var) || getConstructorInvocation().modifiedInScope(var);
  }

  refine PreciseRethrow
  eq AssignExpr.modifiedInScope(Variable var) {
    boolean isLeft = getDest().isVariable(var);
    if (isLeft && var instanceof VariableDeclarator) {
      VariableDeclarator decl = (VariableDeclarator) var;
      if (!decl.hasInit()) {
        // Variable is being written to in an inner class.
        if (decl.hostType() != hostType()) {
          return true;
        }
        // 4.12.4;
        return !getSource().unassignedAfter(var);
      }
      return true;
    } else {
      return isLeft || getSource().modifiedInScope(var);
    }
  }
}

aspect EffectivelyFinal {
  //4.12.4
  syn lazy boolean InferredParameterDeclaration.isEffectivelyFinal() =
      isFinal() || !inhModifiedInScope(this);

  syn lazy boolean FieldDeclarator.isEffectivelyFinal() = isFinal();

  //14.20
  // CatchParameterDeclaration is only used in a multi-catch, and multi-catch parameters are
  // always implicitly final.
  syn lazy boolean CatchParameterDeclaration.isEffectivelyFinal() = true;

  /**
   * Note: this attribute deviates from what the JLS says about effectively finalness,
   * simply because the attribute name would be confusing if it did not return true
   * when the variable was explicitly declared final. The JLS considers declared final
   * and effectively final to be mutually exclusive, we don't.
   */
  syn lazy boolean VariableDeclarator.isEffectivelyFinal() = isFinal() || !inhModifiedInScope(this);
}
