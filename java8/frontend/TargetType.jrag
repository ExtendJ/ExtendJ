/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2017-2019, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Computes the target type to be used in type inference and for finding
 * functional interfaces for lambda expressions.
 */
aspect TargetType {
  // TODO(joqvist): should targetType return the void type instead of null type?
  /**
   * Computes the target type of this expression.
   *
   * <p>The target type depends on the context of the expression and is used for
   * inferring type parameters and finding functional interfaces for lambda expressions.
   *
   * <p>Returns the null type if there is no target type.
   */
  inh lazy TypeDecl Expr.targetType();

  // Default equation:
  eq Program.getChild().targetType() = typeNull();

  // Left side of a dot has no target type:
  eq Dot.getLeft().targetType() = typeNull();

  eq ConditionalExpr.getTrueExpr().targetType() = targetType();
  eq ConditionalExpr.getFalseExpr().targetType() = targetType();
  eq ParExpr.getExpr().targetType() = targetType();
  eq AssignExpr.getSource().targetType() = getDest().type();
  eq Declarator.getInit().targetType() = getTypeAccess().type();
  eq ReturnStmt.getResult().targetType() = returnType();
  eq CastExpr.getExpr().targetType() = type();
  eq EnhancedForStmt.getExpr().targetType() = iterableTypeAccess().type();

  eq AddExpr.getLeftOperand().targetType() {
    if (getLeftOperand().stringContext()) {
      return getRightOperand().type();
    } else if (!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression()) {
      return type();
    } else {
      return targetType();
    }
  }

  eq AddExpr.getRightOperand().targetType() {
    if (getRightOperand().stringContext()) {
      return getLeftOperand().type();
    } else if (!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression()) {
      return type();
    } else {
      return targetType();
    }
  }

  eq ArithmeticExpr.getLeftOperand().targetType() {
    if (!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression()) {
      return type();
    } else {
      return targetType();
    }
  }

  eq ArithmeticExpr.getRightOperand().targetType() {
    if (!getLeftOperand().isPolyExpression() && !getRightOperand().isPolyExpression()) {
      return type();
    } else {
      return targetType();
    }
  }

  eq ArrayInit.getInit().targetType() {
    if (!(targetType() instanceof ArrayDecl)) {
      return targetType();
    } else {
      return ((ArrayDecl) targetType()).componentType();
    }
  }

  eq MethodAccess.getArg(int i).targetType() {
    MethodDecl decl = decl();
    if (decl.unknownMethod() == decl) {
      return decl.type().unknownType();
    }

    if (decl.isVariableArity() && i >= decl.arity() - 1) {
      return decl.getParameter(decl.arity() - 1).type().componentType();
    } else {
      return decl.getParameter(i).type();
    }
  }

  eq ConstructorAccess.getArg(int i).targetType() {
    ConstructorDecl decl = decl();
    if (unknownConstructor() == decl) {
      return decl.type().unknownType();
    }

    if (decl.isVariableArity() && i >= decl.arity() - 1) {
      return decl.getParameter(decl.arity() - 1).type().componentType();
    } else {
      return decl.getParameter(i).type();
    }
  }

  eq ClassInstanceExpr.getArg(int i).targetType() {
    ConstructorDecl decl = decl();
    if (unknownConstructor() == decl) {
      return decl.type().unknownType();
    }

    if (decl.isVariableArity() && i >= decl.arity() - 1) {
      return decl.getParameter(decl.arity() - 1).type().componentType();
    } else {
      return decl.getParameter(i).type();
    }
  }

  eq ExprLambdaBody.getExpr().targetType() {
    TypeDecl decl = enclosingLambda().targetType();
    if (decl.isNull()) {
      return unknownType();
    } else if (!(decl instanceof InterfaceDecl)) {
      return unknownType();
    } else {
      InterfaceDecl iDecl = (InterfaceDecl) decl;
      if (!iDecl.isFunctional()) {
        return unknownType();
      } else {
        FunctionDescriptor fd = iDecl.functionDescriptor();
        if (fd.method.hasValue()) {
          return fd.method.get().type();
        } else {
          return unknownType();
        }
      }
    }
  }

  syn lazy InterfaceDecl LambdaExpr.targetInterface() {
    if (targetType().isNull()) {
      return null;
    } else if (!(targetType() instanceof InterfaceDecl)) {
      return null;
    } else {
      return (InterfaceDecl) targetType();
    }
  }

  syn lazy InterfaceDecl MethodReference.targetInterface() {
    if (targetType().isNull()) {
      return null;
    } else if (!(targetType() instanceof InterfaceDecl)) {
      return null;
    } else {
      return (InterfaceDecl) targetType();
    }
  }

  syn lazy InterfaceDecl ConstructorReference.targetInterface() {
    if (targetType().isNull()) {
      return null;
    } else if (!(targetType() instanceof InterfaceDecl)) {
      return null;
    } else {
      return (InterfaceDecl) targetType();
    }
  }

  // Java 8 extends the analysis of assign converted types.
  eq BoundMethodAccess.getArg(int index).assignConvertedType() = decl().paramType(index);

  eq MethodAccess.boundAccess().assignConvertedType() = assignConvertedType();

  refine AssignConvertedType
  eq MethodAccess.getArg(int index).assignConvertedType() = decl().paramType(index);


  // This is required for type inference to work with method references.
  syn lazy TypeDecl MethodReferenceAccess.assignConvertedType() {
    if (targetDescriptor.method.hasValue()) {
      return targetDescriptor.method.get().type();
    } else {
      return unknownType();
    }
  }

  syn lazy TypeDecl ParMethodReferenceAccess.assignConvertedType() {
    if (targetDescriptor.method.hasValue()) {
      return targetDescriptor.method.get().type();
    } else {
      return unknownType();
    }
  }

  // Required for diamond type inference to work.
  eq ClassInstanceExpr.getAccess().assignConvertedType() = targetType();

  syn lazy TypeDecl ConstructorReferenceAccess.targetType() {
    if (targetDescriptor.method.hasValue()) {
      return targetDescriptor.method.get().type();
    } else {
      return unknownType();
    }
  }

  syn lazy TypeDecl ParConstructorReferenceAccess.targetType() {
    if (targetDescriptor.method.hasValue()) {
      return targetDescriptor.method.get().type();
    } else {
      return unknownType();
    }
  }

  eq ConstructorReferenceAccess.getAccess().targetType() {
    if (targetDescriptor.method.hasValue()) {
      return targetDescriptor.method.get().type();
    } else {
      return unknownType();
    }
  }
}


aspect Contexts {
  // Ch 5
  inh lazy boolean Expr.assignmentContext();
  inh lazy boolean Expr.invocationContext();
  inh lazy boolean Expr.castContext();
  inh lazy boolean Expr.stringContext();
  inh lazy boolean Expr.numericContext();

  eq CompilationUnit.getChild().assignmentContext() = false;
  eq CompilationUnit.getChild().invocationContext() = false;
  eq CompilationUnit.getChild().castContext() = false;
  eq CompilationUnit.getChild().stringContext() = false;
  eq CompilationUnit.getChild().numericContext() = false;

  eq ExprLambdaBody.getExpr().assignmentContext() = true;
  eq ExprLambdaBody.getExpr().invocationContext() = false;
  eq ExprLambdaBody.getExpr().castContext() = false;
  eq ExprLambdaBody.getExpr().stringContext() = false;
  eq ExprLambdaBody.getExpr().numericContext() = false;

  eq BlockLambdaBody.getBlock().assignmentContext() = false;
  eq BlockLambdaBody.getBlock().invocationContext() = false;
  eq BlockLambdaBody.getBlock().castContext() = false;
  eq BlockLambdaBody.getBlock().stringContext() = false;
  eq BlockLambdaBody.getBlock().numericContext() = false;

  eq Binary.getChild().assignmentContext() = false;
  eq Binary.getChild().invocationContext() = false;
  eq Binary.getChild().castContext() = false;
  eq Binary.getChild().stringContext() = false;
  eq Binary.getChild().numericContext() = false;

  eq AddExpr.getLeftOperand().stringContext() {
    if (!getRightOperand().isPolyExpression() && !getLeftOperand().isPolyExpression()) {
      if (getRightOperand().type().isString() && !getLeftOperand().type().isString()) {
        return true;
      }
    }
    return false;
  }

  eq AddExpr.getRightOperand().stringContext() {
    if (!getRightOperand().isPolyExpression() && !getLeftOperand().isPolyExpression()) {
      if (getLeftOperand().type().isString() && !getRightOperand().type().isString()) {
        return true;
      }
    }
    return false;
  }

  eq ArithmeticExpr.getRightOperand().numericContext() = true;
  eq ArithmeticExpr.getLeftOperand().numericContext() = true;

  eq Unary.getOperand().assignmentContext() = false;
  eq Unary.getOperand().invocationContext() = false;
  eq Unary.getOperand().castContext() = false;
  eq Unary.getOperand().stringContext() = false;
  eq Unary.getOperand().numericContext() = false;

  eq InstanceOfExpr.getExpr().assignmentContext() = false;
  eq InstanceOfExpr.getExpr().invocationContext() = false;
  eq InstanceOfExpr.getExpr().castContext() = false;
  eq InstanceOfExpr.getExpr().stringContext() = false;
  eq InstanceOfExpr.getExpr().numericContext() = false;

  eq ConditionalExpr.getCondition().assignmentContext() = false;
  eq ConditionalExpr.getCondition().invocationContext() = false;
  eq ConditionalExpr.getCondition().castContext() = false;
  eq ConditionalExpr.getCondition().numericContext() = false;
  eq ConditionalExpr.getCondition().stringContext() = false;

  // 15.25.3
  eq ConditionalExpr.getTrueExpr().castContext() = false;
  eq ConditionalExpr.getTrueExpr().stringContext() = false;
  eq ConditionalExpr.getTrueExpr().numericContext() = false;

  // 15.25.3
  eq ConditionalExpr.getFalseExpr().castContext() = false;
  eq ConditionalExpr.getFalseExpr().stringContext() = false;
  eq ConditionalExpr.getFalseExpr().numericContext() = false;

  eq ArrayAccess.getExpr().assignmentContext() = false;
  eq ArrayAccess.getExpr().invocationContext() = false;
  eq ArrayAccess.getExpr().castContext() = false;
  eq ArrayAccess.getExpr().stringContext() = false;
  eq ArrayAccess.getExpr().numericContext() = false;

  eq Dot.getLeft().assignmentContext() = false;
  eq Dot.getLeft().invocationContext() = false;
  eq Dot.getLeft().castContext() = false;
  eq Dot.getLeft().stringContext() = false;
  eq Dot.getLeft().numericContext() = false;

  // 15.8.5
  eq CastExpr.getExpr().assignmentContext() = false;
  eq CastExpr.getExpr().invocationContext() = false;
  eq CastExpr.getExpr().castContext() = true;
  eq CastExpr.getExpr().stringContext() = false;
  eq CastExpr.getExpr().numericContext() = false;

  eq AssignExpr.getDest().assignmentContext() = false;
  eq AssignExpr.getDest().invocationContext() = false;
  eq AssignExpr.getDest().castContext() = false;
  eq AssignExpr.getDest().numericContext() = false;
  eq AssignExpr.getDest().stringContext() = false;

  eq AssignExpr.getSource().assignmentContext() = true;
  eq AssignExpr.getSource().invocationContext() = false;
  eq AssignExpr.getSource().castContext() = false;
  eq AssignExpr.getSource().stringContext() = false;
  eq AssignExpr.getSource().numericContext() = false;

  eq ClassInstanceExpr.getArg().assignmentContext() = false;
  eq ClassInstanceExpr.getArg().invocationContext() = true;
  eq ClassInstanceExpr.getArg().castContext() = false;
  eq ClassInstanceExpr.getArg().stringContext() = false;
  eq ClassInstanceExpr.getArg().numericContext() = false;

  eq MethodAccess.getArg().assignmentContext() = false;
  eq MethodAccess.getArg().invocationContext() = true;
  eq MethodAccess.getArg().castContext() = false;
  eq MethodAccess.getArg().stringContext() = false;
  eq MethodAccess.getArg().numericContext() = false;

  eq ConstructorAccess.getArg().assignmentContext() = false;
  eq ConstructorAccess.getArg().invocationContext() = true;
  eq ConstructorAccess.getArg().castContext() = false;
  eq ConstructorAccess.getArg().stringContext() = false;
  eq ConstructorAccess.getArg().numericContext() = false;

  eq ArrayInit.getInit().assignmentContext() = true;
  eq ArrayInit.getInit().invocationContext() = false;
  eq ArrayInit.getInit().castContext() = false;
  eq ArrayInit.getInit().stringContext() = false;
  eq ArrayInit.getInit().numericContext() = false;

  eq ReturnStmt.getResult().assignmentContext() = true;
  eq ReturnStmt.getResult().invocationContext() = false;
  eq ReturnStmt.getResult().castContext() = false;
  eq ReturnStmt.getResult().stringContext() = false;
  eq ReturnStmt.getResult().numericContext() = false;

  eq Declarator.getInit().assignmentContext() = true;
  eq Declarator.getInit().invocationContext() = false;
  eq Declarator.getInit().castContext() = false;
  eq Declarator.getInit().stringContext() = false;
  eq Declarator.getInit().numericContext() = false;

  eq ArrayTypeWithSizeAccess.getExpr().assignmentContext() = false;
  eq ArrayTypeWithSizeAccess.getExpr().invocationContext() = false;
  eq ArrayTypeWithSizeAccess.getExpr().castContext() = false;
  eq ArrayTypeWithSizeAccess.getExpr().stringContext() = false;
  eq ArrayTypeWithSizeAccess.getExpr().numericContext() = false;

  eq Dims.getExpr().assignmentContext() = false;
  eq Dims.getExpr().invocationContext() = false;
  eq Dims.getExpr().castContext() = false;
  eq Dims.getExpr().stringContext() = false;
  eq Dims.getExpr().numericContext() = false;

  eq ExprMethodReference.getExpr().assignmentContext() = false;
  eq ExprMethodReference.getExpr().invocationContext() = false;
  eq ExprMethodReference.getExpr().castContext() = false;
  eq ExprMethodReference.getExpr().stringContext() = false;
  eq ExprMethodReference.getExpr().numericContext() = false;

  eq TypeMethodReference.getTypeAccess().assignmentContext() = false;
  eq TypeMethodReference.getTypeAccess().invocationContext() = false;
  eq TypeMethodReference.getTypeAccess().castContext() = false;
  eq TypeMethodReference.getTypeAccess().stringContext() = false;
  eq TypeMethodReference.getTypeAccess().numericContext() = false;

  eq ConstructorReference.getTypeAccess().assignmentContext() = false;
  eq ConstructorReference.getTypeAccess().invocationContext() = false;
  eq ConstructorReference.getTypeAccess().castContext() = false;
  eq ConstructorReference.getTypeAccess().stringContext() = false;
  eq ConstructorReference.getTypeAccess().numericContext() = false;
}
