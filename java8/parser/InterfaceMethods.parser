BodyDecl abstract_method_declaration := interface_method_declaration;

MethodDecl interface_method_declaration  =
  interface_method_header.m method_body.b    {: m.setBlockOpt(b); return m; :}
;

MethodDecl interface_method_header =
    modifiers.m? type.t IDENTIFIER LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl?
  {: return new MethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, l, tl, new Opt()); :}
  | modifiers.m? VOID IDENTIFIER LPAREN formal_parameter_list.l? RPAREN throws.tl?
  {: return new MethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, l, tl, new Opt()); :}
  | modifiers.m? type_parameters.p type.t IDENTIFIER LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl?
  {: return new GenericMethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, l, tl, new Opt(), p); :}
  | modifiers.m? type_parameters.p VOID IDENTIFIER LPAREN formal_parameter_list.l? RPAREN throws.tl?
  {: return new GenericMethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, l, tl, new Opt(), p); :}
;

Modifier modifier =
    DEFAULT {: return new Modifier("default"); :}
  ;
