/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2016-2017, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect MethodReferenceToClass {
  ExprMethodReference contributes nta toClass() to TypeDecl.nestedTypes();

  ExprMethodReference contributes nta toClass() to TypeDecl.accessors();

  TypeMethodReference contributes toClass().getTypeDecl()
      to TypeDecl.nestedTypes()
      for hostType();

  TypeMethodReference contributes nta toClass() to TypeDecl.accessors();

  /** Name used when creating field declaration. */
  private String ExprMethodReference.syntheticFieldName() {
    return "#1";
  }

  /**
   * Build an anonymous class which will be converted to byte code.
   * Since method access can target a generic method, type variables have to be
   * taken into account by using an access that bypasses the normal type lookup.
   */
  syn nta lazy ClassInstanceExpr ExprMethodReference.toClass() {
    List<Access> implementsList = new List<Access>();
    InterfaceDecl iDecl = targetInterface();

    // First compute the interface implemented by the anonymous class.
    TypeDecl nonWildcard = targetInterface().nonWildcardParameterization().getOrElse(unknownType());
    implementsList.add(nonWildcard.createQualifiedAccess());

    // Next, compute the BodyDecls for the anonymous class.
    List<BodyDecl> bodyDecls = new List<BodyDecl>();

    FieldDecl fieldDecl = null;
    // If this reference uses a primary or expression name, must evaluate that part first.
    if (!(getExpr() instanceof Access)
        || !(((Access) getExpr()).lastAccess() instanceof SuperAccess)) {
      FieldDeclarator decl = new FieldDeclarator(
          syntheticFieldName(),
          new List<Dims>(),
          new Opt<Expr>(getExpr().treeCopyNoTransform()));
      fieldDecl = new FieldDecl(
          new Modifiers(),
          getExpr().type().createQualifiedAccess(),
          new List<FieldDeclarator>(decl));
      bodyDecls.add(fieldDecl);
    }

    // Then we must build the method overriding the abstract methods.
    Modifiers methodModifiers = new Modifiers(new List<Modifier>().add(new Modifier("public")));
    MethodDecl targetMethod = iDecl.functionDescriptor().method.get();
    Access returnType = new SyntheticTypeAccess(targetMethod.type());
    List<ParameterDeclaration> methodParams = toParameterList();
    List<Access> methodThrows = new List<Access>();
    for (TypeDecl throwsType : iDecl.functionDescriptor().throwsList) {
      methodThrows.add(new SyntheticTypeAccess(throwsType));
    }
    Opt<Block> methodBlock = new Opt<Block>(toBlock());
    MethodDecl method = new MethodDecl(methodModifiers, returnType,
        targetMethod.name(), methodParams, methodThrows, methodBlock);

    bodyDecls.add(method);

    // Now the anonymous class can be built. We use the type
    // LambdaAnonymousDecl instead of a normal AnonymousDecl in order for this
    // and super keywords to get the type of the outer scope.
    LambdaAnonymousDecl anonymousDecl = new LambdaAnonymousDecl(new Modifiers(),
        "MethodReference", implementsList, bodyDecls);

    return new ClassInstanceExpr(
        iDecl.createQualifiedAccess(),
        new List<Expr>(), new Opt<TypeDecl>(anonymousDecl));
  }

  syn lazy List<ParameterDeclaration> MethodReference.toParameterList() {
    List<ParameterDeclaration> list = new List<ParameterDeclaration>();
    MethodDecl targetMethod = targetInterface().functionDescriptor().method.get();
    for (int i = 0; i < targetMethod.getNumParameter(); i++) {
      TypeDecl paramType = targetMethod.getParameter(i).type();
      String paramName = targetMethod.getParameter(i).name();
      list.add(new ParameterDeclaration(new SyntheticTypeAccess(paramType), paramName));
    }
    return list;
  }

  syn lazy Block ExprMethodReference.toBlock() {
    Expr qualifier = null;
    if (getExpr() instanceof Access && ((Access) getExpr()).lastAccess() instanceof SuperAccess) {
      qualifier = (Expr) getExpr().treeCopyNoTransform();
    } else {
      qualifier = new VarAccess(syntheticFieldName());
    }

    List<Expr> arguments = new List<Expr>();
    MethodDecl targetMethod = targetInterface().functionDescriptor().method.get();
    for (int i = 0; i < targetMethod.getNumParameter(); i++) {
      String paramName = targetMethod.getParameter(i).name();
      arguments.add(new VarAccess(paramName));
    }

    MethodAccess m = null;
    if (!hasTypeArgument()) {
      m = new MethodAccess(name(), arguments);
    } else {
      m = new ParMethodAccess(name(), arguments,
          (List<Access>) getTypeArgumentList().treeCopyNoTransform());
    }
    Access qualifiedMethod = qualifier.qualifiesAccess(m);
    Stmt blockStmt = null;
    if (targetMethod.type().isVoid()) {
      blockStmt = new ExprStmt(qualifiedMethod);
    } else {
      blockStmt = new ReturnStmt(qualifiedMethod);
    }
    List<Stmt> stmtList = new List<Stmt>();
    stmtList.add(blockStmt);
    return new Block(stmtList);
  }

  syn nta lazy ClassInstanceExpr TypeMethodReference.toClass() {
    List<Access> implementsList = new List<Access>();
    InterfaceDecl iDecl = targetInterface();

    // First compute the interface implemented by the anonymous class.
    TypeDecl nonWildcard = targetInterface().nonWildcardParameterization().getOrElse(unknownType());
    implementsList.add(nonWildcard.createQualifiedAccess());

    // Next, compute the BodyDecl for the anonymous class.
    List<BodyDecl> bodyDecls = new List<BodyDecl>();

    // For TypeMethodReferenes, there is only one body decl.
    Modifiers methodModifiers = new Modifiers(new List<Modifier>().add(new Modifier("public")));
    MethodDecl targetMethod = iDecl.functionDescriptor().method.get();
    Access returnType = new SyntheticTypeAccess(targetMethod.type());
    List<ParameterDeclaration> methodParams = toParameterList();
    List<Access> methodThrows = new List<Access>();
    for (TypeDecl throwsType : iDecl.functionDescriptor().throwsList) {
      methodThrows.add(new SyntheticTypeAccess(throwsType));
    }
    Opt<Block> methodBlock = new Opt<Block>(toBlock());
    MethodDecl method = new MethodDecl(methodModifiers, returnType,
        targetMethod.name(), methodParams, methodThrows, methodBlock);

    bodyDecls.add(method);

    // Now the anonymous class can be built. We use the type
    // LambdaAnonymousDecl instead of a normal AnonymousDecl in order for this
    // and super keywords to get the type of the outer scope.
    LambdaAnonymousDecl anonymousDecl = new LambdaAnonymousDecl(new Modifiers(),
        "MethodReference", implementsList, bodyDecls);

    return new ClassInstanceExpr(
        iDecl.createQualifiedAccess(),
        new List<Expr>(), new Opt<TypeDecl>(anonymousDecl));
  }

  syn lazy Block TypeMethodReference.toBlock() {
    Expr qualifier = null;
    List<Expr> arguments = new List<Expr>();
    FunctionDescriptor f = targetInterface().functionDescriptor();
    MethodDecl targetMethod = targetInterface().functionDescriptor().method.get();
    if (!validStaticMethod(f)) {
      // Should create access to instance method.
      qualifier = new VarAccess(
          targetMethod.getParameter(0).name());
      for (int i = 1; i < targetMethod.getNumParameter(); i++) {
        String paramName = targetMethod.getParameter(i).name();
        arguments.add(new VarAccess(paramName));
      }
    } else {
      // Should create access to static method.
      qualifier = (Access) getTypeAccess().treeCopyNoTransform();
      for (int i = 0; i < targetMethod.getNumParameter(); i++) {
        String paramName = targetMethod.getParameter(i).name();
        arguments.add(new VarAccess(paramName));
      }
    }

    MethodAccess m = null;
    if (!hasTypeArgument()) {
      m = new MethodAccess(name(), arguments);
    } else {
      m = new ParMethodAccess(name(), arguments,
          (List<Access>) getTypeArgumentList().treeCopyNoTransform());
    }
    Access qualifiedMethod = qualifier.qualifiesAccess(m);
    Stmt blockStmt = null;
    if (targetMethod.type().isVoid()) {
      blockStmt = new ExprStmt(qualifiedMethod);
    } else {
      blockStmt = new ReturnStmt(qualifiedMethod);
    }
    List<Stmt> stmtList = new List<Stmt>();
    stmtList.add(blockStmt);
    return new Block(stmtList);
  }
}
