/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2017, Jesper Ã–qvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Java8CreateBCode {
  public void LambdaExpr.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  public void ExprMethodReference.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  public void TypeMethodReference.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  public void ConstructorReference.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  refine CreateBCode
  public void SuperAccess.createBCode(CodeGeneration gen) {
    if (decl().isInterfaceDecl()) {
      emitThis(gen, hostType());
    } else {
      emitThis(gen, decl());
    }
  }

  refine CodeGeneration
  public void MethodDecl.emitInvokeMethod(CodeGeneration gen, TypeDecl hostType) {
    if (hostType.isInterfaceDecl()) {
      String classname = hostType.constantPoolName();
      String desc = descName();
      String name = name();
      int index = gen.constantPool().addInterfaceMethodref(classname, name, desc);
      int numArg = getNumParameter();
      int argSize = 0;
      for (int i = 0; i < getNumParameter(); i++) {
        argSize += getParameter(i).type().variableSize();
      }
      if (isStatic()) {
        gen.INVOKESTATIC(index, numArg, type());
      } else {
        numArg += 1; // Add this reference.
        argSize += 1;
        gen.INVOKEINTERFACE(index, numArg, argSize, type());
      }
    } else {
      String classname = hostType.constantPoolName();
      String desc = descName();
      String name = name();
      int index = gen.constantPool().addMethodref(classname, name, desc);
      int numArg = getNumParameter();
      if (isStatic()) {
        gen.INVOKESTATIC(index, numArg, type());
      } else {
        numArg += 1; // Add this reference.
        gen.INVOKEVIRTUAL(index, numArg, type());
      }
    }
  }

  public void InferredParameterDeclaration.emitLoadVariable(CodeGeneration gen, Access access) {
    throw new Error("Can not generate bytecode for inferred parameter declarations.");
  }
}
