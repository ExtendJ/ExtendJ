/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 *               2017, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect ConstructorReferenceToClass {
  ConstructorReference contributes toClass().getTypeDecl()
      to TypeDecl.nestedTypes()
      for hostType();

  ConstructorReference contributes nta toClass() to TypeDecl.accessors();

  /**
   * Build a nested ArrayTypeWithSizeAccess from the normal
   * ArrayTypeAccess.  This is to be used when generating
   * the anonymous inner class which must instantiate a new
   * array according to the array reference.
   */
  syn ArrayTypeAccess ArrayReference.getArrayTypeWithSizeAccess(Expr expr) {
    return recursiveArrayTypeWithSizeAccess((ArrayTypeAccess) getTypeAccess(),
        (Expr) expr.treeCopyNoTransform());
  }

  syn ArrayTypeAccess ArrayReference.recursiveArrayTypeWithSizeAccess(ArrayTypeAccess access,
      Expr expr) {
    if (!(access.getAccess() instanceof ArrayTypeAccess)) {
      return new ArrayTypeWithSizeAccess(access.getAccess().treeCopy(), expr);
    } else {
      return new ArrayTypeAccess(
          recursiveArrayTypeWithSizeAccess((ArrayTypeAccess) access.getAccess(), expr));
    }
  }

  /** Build an anonymous inner class for bytecode generation. */
  syn nta lazy ClassInstanceExpr ConstructorReference.toClass() {
    List<Access> implementsList = new List<Access>();
    InterfaceDecl iDecl = targetInterface();

    // First compute the interface implemented by the anonymous class.
    TypeDecl nonWildcard = targetInterface().nonWildcardParameterization().getOrElse(unknownType());
    implementsList.add(nonWildcard.createQualifiedAccess());

    // Next, compute the BodyDecls for the anonymous class.
    List<BodyDecl> bodyDecls = new List<BodyDecl>();

    // Which means we must build the method overriding the abstract methods.
    Modifiers methodModifiers = new Modifiers(new List<Modifier>().add(new Modifier("public")));
    MethodDecl targetMethod = iDecl.functionDescriptor().method.get();
    Access returnType = new SyntheticTypeAccess(targetMethod.type());
    List<ParameterDeclaration> methodParams = toParameterList();
    List<Access> methodThrows = new List<Access>();
    for (TypeDecl throwsType : iDecl.functionDescriptor().throwsList) {
      methodThrows.add(new SyntheticTypeAccess(throwsType));
    }
    Opt<Block> methodBlock = new Opt<Block>(toBlock());
    MethodDecl method = new MethodDecl(methodModifiers, returnType,
        targetMethod.name(),
        methodParams, methodThrows, methodBlock);

    bodyDecls.add(method);

    // Now the anonymous class can be built. We use the type
    // LambdaAnonymousDecl instead of a normal AnonymousDecl in order for this
    // and super keywords to get the type of the outer scope.
    LambdaAnonymousDecl anonymousDecl = new LambdaAnonymousDecl(new Modifiers(),
        "ConstructorReference", implementsList, bodyDecls);

    return new ClassInstanceExpr(
        iDecl.createQualifiedAccess(),
        new List<Expr>(),
        new Opt<TypeDecl>(anonymousDecl));
  }

  syn lazy Block ConstructorReference.toBlock();

  syn lazy List<ParameterDeclaration> ConstructorReference.toParameterList() {
    List<ParameterDeclaration> list = new List<ParameterDeclaration>();
    MethodDecl targetMethod = targetInterface().functionDescriptor().method.get();
    for (int i = 0; i < targetMethod.getNumParameter(); i++) {
      TypeDecl paramType = targetMethod.getParameter(i).type();
      String paramName = targetMethod.getParameter(i).name();
      list.add(new ParameterDeclaration(new SyntheticTypeAccess(paramType), paramName));
    }
    return list;
  }

  eq ArrayReference.toBlock() {
    // First, build an ArrayCreationExpr used in the block.
    MethodDecl targetMethod = targetInterface().functionDescriptor().method.get();
    String paramName = targetMethod.getParameter(0).name();
    VarAccess paramAccess = new VarAccess(paramName);
    ArrayCreationExpr arrayExpr = new ArrayCreationExpr(getArrayTypeWithSizeAccess(paramAccess),
        new Opt());

    // Next, build actual block.
    Stmt blockStmt = null;
    if (targetMethod.type().isVoid()) {
      blockStmt = new ExprStmt(arrayExpr);
    } else {
      blockStmt = new ReturnStmt(arrayExpr);
    }
    List<Stmt> stmtList = new List<Stmt>();
    stmtList.add(blockStmt);
    return new Block(stmtList);
  }

  eq ClassReference.toBlock() {
    List<Expr> arguments = new List<Expr>();
    MethodDecl targetMethod = targetInterface().functionDescriptor().method.get();
    for (int i = 0; i < targetMethod.getNumParameter(); i++) {
      String paramName = targetMethod.getParameter(i).name();
      arguments.add(new VarAccess(paramName));
    }

    ClassInstanceExpr instanceExpr = null;
    if (hasTypeArgument()) {
      instanceExpr = new ParClassInstanceExpr((Access) getTypeAccess().treeCopyNoTransform(),
          arguments, new Opt(), (List<Access>) getTypeArgumentList().treeCopyNoTransform());
    } else {
      if (getTypeAccess().type().isRawType()) {
        DiamondAccess diamond = new DiamondAccess((Access) getTypeAccess().treeCopyNoTransform());
        instanceExpr = new ClassInstanceExpr(diamond, arguments);
      } else {
        instanceExpr = new ClassInstanceExpr((Access) getTypeAccess().treeCopyNoTransform(),
            arguments);
      }
    }
    Stmt blockStmt = null;
    if (targetMethod.type().isVoid()) {
      blockStmt = new ExprStmt(instanceExpr);
    } else {
      blockStmt = new ReturnStmt(instanceExpr);
    }
    List<Stmt> stmtList = new List<Stmt>();
    stmtList.add(blockStmt);
    return new Block(stmtList);
  }
}
