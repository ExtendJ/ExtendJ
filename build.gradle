buildscript {
  repositories.mavenCentral()
  dependencies {
    classpath 'org.jastadd:jastaddgradle:1.11.0'
  }
}

repositories {
  mavenCentral()
}

defaultTasks 'jar'

project.version = getVersion()
project.group = 'org.extendj'

println "Building ExtendJ version ${project.version}"

/** Helper function to run a command. Returns the command output if the command succeeded. */
def tryCommand(List command, boolean failOnError = false) {
  def out = new StringBuilder()
  def err = new StringBuilder()
  def proc = command.execute()
  proc.waitForProcessOutput(out, err)
  if (proc.exitValue()) {
    def message = "Failed to run '${command[0]}' command (args: ${command.tail()})\n$err$out"
    if (failOnError) {
      throw new GradleException(message)
    } else {
      println "Warning: ${message}"
    }
    ""
  } else {
    if (err) println "${err}"
    out.toString()
  }
}

/** Helper function to retrieve the current version string. */
def getVersion() {
  if (hasProperty('newVersion')) {
    // A new version string should be saved.
    Properties version = new Properties()
    version['version'] = newVersion
    version.store(file('src/res/Version.properties').newWriter(), null)
    return newVersion
  } else {
    def output = tryCommand(['git', 'describe'])
    if (output) {
      // Use Git describe output.
      output.readLines()[0]
    } else {
      // Git command failed. Read the previous version string instead.
      Properties version = new Properties()
      version.load(new FileInputStream(file('src/res/Version.properties')))
      version['version']
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'jastadd'
  apply plugin: 'maven'
  apply plugin: 'signing'

  //project.version = '8.2.0'
  version = rootProject.version
  group = rootProject.group

  mainClassName = 'org.extendj.JavaCompiler'

  sourceCompatibility = '1.6'
  targetCompatibility = '1.6'

  sourceSets {
    main.java {
      srcDir rootProject.file('src/backend-main')
      srcDir rootProject.file('src/frontend-main')
    }
    main.resources {
      srcDir 'src/gen-res' // JastAdd buildInfo directory.
    }
  }

  jar {
    archiveName = 'extendj.jar'
    manifest.attributes 'Main-Class': mainClassName
    destinationDir = projectDir
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  /*
  TODO:
  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }
  */

  artifacts {
    archives sourcesJar
  }

  processResources.dependsOn 'updateVersionString'

  task updateVersionString {
    outputs.upToDateWhen {
      def props = new Properties()
      def output = file('src/gen-res/Version.properties')
      if (output.isFile()) {
        output.withInputStream { stream -> props.load(stream) }
      }
      props['version'] == project.version
    }

    doLast {
      file('src/gen-res').mkdirs()
      def versionFile = file('src/gen-res/Version.properties')
      ant.propertyfile(file: versionFile) {
        entry(key: 'version', value: project.version)
      }
    }
  }

}

// Set the Gradle wrapper version:
task wrapper(type: Wrapper) {
  gradleVersion = '3.4.1'
}
