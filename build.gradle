plugins {
  id 'application'
  id 'signing'
  id 'maven-publish'
}

repositories {
  mavenCentral()
}

defaultTasks 'jar'

group = 'org.extendj'
def fullVersion
if (hasProperty('newVersion')) {
  // A new version string should be saved.
  def props = new Properties()
  props['version'] = newVersion
  props.store(file('src/res/Version.properties').newWriter(), null)
  version = fullVersion = newVersion
} else {
  try {
    def proc = 'git describe'.execute(null, rootDir)
    if  (proc.waitFor() == 0) {
      fullVersion = proc.text.trim()
      // Trim to get latest tag:
      version = (fullVersion =~ /-\d+\-g.+$/).replaceAll('')
    } else {
      logger.warn('No git tags found.')
    }
  } catch (IOException e) {
    logger.warn("Failded to run git describe (${e.getMessage()}).")
  }
  if (!fullVersion?.trim()) {
    logger.warn('Reading stored version string.')
    def props = new Properties()
    file('src/res/Version.properties').withInputStream { stream -> props.load(stream) }
    version = fullVersion = props['version']
  }
}
println "Building ExtendJ version ${fullVersion}"

subprojects {
  sourceCompatibility = targetCompatibility = '1.6'
  compileJava.options.encoding = 'UTF-8'

  // Copy version info from parent project.
  group = rootProject.group
  version = rootProject.version

  task cleanGeneratedJava(type: Delete) {
    description 'Remove generated Java code.'
    delete file('src/gen')
  }

  processResources.dependsOn 'updateVersionString'
  task updateVersionString {
    outputs.upToDateWhen {
      def props = new Properties()
      def output = project.file('src/gen-res/Version.properties')
      if (output.isFile()) {
        output.withInputStream { stream -> props.load(stream) }
      }
      props['version'] == fullVersion
    }

    doLast {
      file('src/gen-res').mkdirs()
      def props = new Properties()
      props['version'] = fullVersion
      props.store(file('src/gen-res/Version.properties').newWriter(), null)
    }
  }

  java {
    withSourcesJar()
  }
}

clean.dependsOn 'java4:cleanGeneratedJava'
clean.dependsOn 'java5:cleanGeneratedJava'
clean.dependsOn 'java6:cleanGeneratedJava'
clean.dependsOn 'java7:cleanGeneratedJava'
clean.dependsOn 'java8:cleanGeneratedJava'

// We generate this empty Jar to satisfy sonatype.
// We have our own generated documentation at https://extendj.org/doc2/
task emptyJavaDocJar(type: Jar) {
  classifier = 'javadoc'
}

afterEvaluate {
  // Only configure the artifact uploading if the OSSRH credentials are available.
  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'extendj'
        from components.java
        artifact emptyJavaDocJar

        versionMapping {
          usage('java-api') {
            fromResolutionOf('runtimeClasspath')
          }
          usage('java-runtime') {
            fromResolutionResult()
          }
        }

        pom {
          name = 'ExtendJ'
          description = 'Extensible Java Compiler.'
          url = 'https://extendj.org'
          licenses {
            license {
              name = 'Modified BSD License'
              url = 'http://opensource.org/licenses/BSD-3-Clause'
              distribution = 'repo'
            }
          }
          developers {
            developer {
              name = 'Torbjörn Ekman'
            }
            developer {
              name = 'Jesper Öqvist'
              email = 'jesper.oqvist@cs.lth.se'
            }
          }
          scm {
            connection = 'scm:git:https://bitbucket.org/extendj/extendj.git'
            url = 'https://bitbucket.org/extendj/extendj'
          }
        }
      }
    }

    if (project.hasProperty('ossrhUsername')) {
      repositories {
        maven {
          url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
          credentials {
            username = ossrhUsername
            password = ossrhPassword
          }
        }
      }
    }
  }

  signing {
    // Require keyId to sign:
    required { project.hasProperty('signing.keyId') }
    sign publishing.publications.mavenJava
  }
}
