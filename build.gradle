buildscript {
  repositories.mavenCentral()
  dependencies {
    classpath 'org.jastadd:jastaddgradle:1.11.0'
  }
}

repositories {
  mavenCentral()
}

defaultTasks 'jar'

gradle.taskGraph.whenReady { graph ->
  def theVersion = getVersion()
  println "Building ExtendJ version ${theVersion}"
  version = theVersion
  allprojects {
    group = 'org.extendj'
    version = theVersion
  }
}

/** Helper function to run a command. Returns the command output if the command succeeded. */
def tryCommand(List command, boolean failOnError = false) {
  def out = new StringBuilder()
  def err = new StringBuilder()
  def proc = command.execute()
  proc.waitForProcessOutput(out, err)
  if (proc.exitValue()) {
    def message = "Failed to run '${command[0]}' command (args: ${command.tail()})\n$err$out"
    if (failOnError) {
      throw new GradleException(message)
    } else {
      println "Warning: ${message}"
    }
    ""
  } else {
    if (err) println "${err}"
    out.toString()
  }
}

/** Helper function to retrieve the current version string. */
def getVersion() {
  if (hasProperty('newVersion')) {
    // A new version string should be saved.
    Properties version = new Properties()
    version['version'] = newVersion
    version.store(file('src/res/Version.properties').newWriter(), null)
    return newVersion
  } else {
    def output = tryCommand(['git', 'describe'])
    if (output) {
      // Use Git describe output.
      output.readLines()[0]
    } else {
      // Git command failed. Read the previous version string instead.
      Properties version = new Properties()
      version.load(new FileInputStream(file('src/res/Version.properties')))
      version['version']
    }
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'jastadd'
  apply plugin: 'maven'
  apply plugin: 'signing'

  mainClassName = 'org.extendj.JavaCompiler'

  sourceCompatibility = targetCompatibility = '1.6'

  sourceSets {
    main.java {
      srcDir rootProject.file('src/backend-main')
      srcDir rootProject.file('src/frontend-main')
    }
    main.resources {
      srcDir 'src/gen-res' // JastAdd buildInfo directory.
    }
  }

  jar {
    archiveName = 'extendj.jar'
    manifest.attributes 'Main-Class': mainClassName
    destinationDir = projectDir
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // We generate this empty Jar to satisfy sonatype.
  // We have our own generated documentation at https://extendj.org/doc2/
  task fakeJavadocJar(type: Jar) {
    classifier = 'javadoc'
  }

  artifacts {
    archives fakeJavadocJar, sourcesJar
  }

  processResources.dependsOn 'updateVersionString'

  task updateVersionString {
    outputs.upToDateWhen {
      def props = new Properties()
      def output = file('src/gen-res/Version.properties')
      if (output.isFile()) {
        output.withInputStream { stream -> props.load(stream) }
      }
      props['version'] == project.version
    }

    doLast {
      file('src/gen-res').mkdirs()
      def versionFile = file('src/gen-res/Version.properties')
      ant.propertyfile(file: versionFile) {
        entry(key: 'version', value: project.version)
      }
    }
  }

  signing {
    // Require OSSRH credentials for signing artifacts:
    required { project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword') }
    sign configurations.archives
  }

  uploadArchives {
    repositories.mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
        if (project.hasProperty('ossrhUsername')) {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
        if (project.hasProperty('ossrhUsername')) {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }
      }

      pom.project {
        name 'ExtendJ'
        packaging 'jar'
        description 'Extensible Java Compiler'
        url 'https://extendj.org'
        organization {
          name 'ExtendJ Committers'
          url 'https://extendj.org'
        }
        licenses {
          license {
            name 'Modified BSD License'
            url 'http://opensource.org/licenses/BSD-3-Clause'
            distribution 'repo'
          }
        }
        developers {
          developer {
            name 'Torbjörn Ekman'
          }
          developer {
            name 'Jesper Öqvist'
            email 'jesper.oqvist@cs.lth.se'
          }
        }
        scm {
          connection 'scm:git:https://bitbucket.org/extendj/extendj.git'
          url 'https://bitbucket.org/extendj/extendj'
        }
      }
    }
  }
}

// Set the Gradle wrapper version:
task wrapper(type: Wrapper) {
  gradleVersion = '3.4.1'
}
