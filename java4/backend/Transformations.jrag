/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Transformations {
  /**
   * Normalized version of this method access.
   */
  syn lazy Access MethodAccess.transformed() {
    // Note: this attribute should return a MethodAccess that cannot be transformed further!
    if (requiresAccessor()) {
      return transformedQualified();
    } else {
      return this;
    }
  }

  eq MethodAccess.transformedQualified().lookupType(String name) =
      unqualifiedScope().lookupType(name);

  /**
   * Transforms this method access to use a method accessor.
   */
  syn nta Access MethodAccess.transformedQualified() =
      methodQualifierType().methodAccessor(decl())
      .createBoundAccess(getArgList().treeCopyNoTransform());

  /**
   * Normalized version of this qualified access.
   */
  syn lazy Access Dot.transformed() {
    // Note: this attribute should return a Dot that cannot be transformed further!
    if (requiresSuperAccessor()) {
      return transformedSuperAccessor();
    } else {
      return this;
    }
  }

  /**
   * Builds a transformed version of this expression that calls
   * a generated super accessor method.
   */
  syn nta Access Dot.transformedSuperAccessor() {
    MethodAccess method = (MethodAccess) rightSide();
    List<Expr> args = new List<Expr>();
    if (isQualified()) {
      args.add(qualifier().treeCopyNoTransform().qualifiesAccess(new ThisAccess()));
    } else {
      args.add(new ThisAccess());
    }
    for (Expr arg : method.getArgList()) {
      args.add(arg.treeCopyNoTransform());
    }
    return ((SuperAccess) leftSide()).superAccessorTarget()
        .superAccessor(superAccessorTargetMethod()).createBoundAccess(args);
  }

  syn ConstructorAccess ConstructorAccess.transformed() = this;

  syn ClassInstanceExpr ClassInstanceExpr.transformed() = this;

  /**
   * The assert statement is transformed to an if-statement that throws an
   * AssertError if assertions are enabled and the assert condition is false.
   */
  syn nta Stmt AssertStmt.transformed() {
    FieldDeclarator assertionsDisabled = hostType().assertionsDisabled();
    Expr condition = (Expr) getCondition().treeCopyNoTransform();
    List<Expr> args = new List<Expr>();
    if (hasMessage()) {
      if (getMessage().type().isString()) {
        args.add(new CastExpr(new TypeAccess("java.lang", "Object"),
            (Expr) getMessage().treeCopyNoTransform()));
      } else {
        args.add(getMessage().treeCopyNoTransform());
      }
    }
    return new IfStmt(
        new LogNotExpr(
            new OrLogicalExpr(
                new BoundFieldAccess(assertionsDisabled),
                condition)),
        new ThrowStmt(
            new ClassInstanceExpr(
                lookupType("java.lang", "AssertionError").createQualifiedAccess(),
                args,
                new Opt())),
        new Opt());
  }
}
