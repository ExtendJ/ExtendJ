/* Copyright (c) 2017, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Adds an attribute to compute the bytecode verification type of a TypeDecl.
 */
aspect VerificationTypes {
  inh Program ReferenceType.program();

  syn TypeDecl TypeDecl.supertype() = unknownType();
  eq ClassDecl.supertype() = superclass();
  eq InterfaceDecl.supertype() = typeObject();

  syn lazy VerificationType TypeDecl.verificationType() = VerificationTypes.TOP;
  eq ReferenceType.verificationType() {
    String cpname = constantPoolName();
    if (cpname.equals("java/lang/Object")) {
      return VerificationTypes.OBJECT;
    } else if (cpname.equals("java/lang/String")) {
      return VerificationTypes.STRING;
    } else if (cpname.equals("java/lang/Throwable")) {
      return VerificationTypes.THROWABLE;
    } else if (cpname.equals("java/lang/Class")) {
      return VerificationTypes.CLASS;
    } else {
      return new VerificationTypes.JavaType(this, supertype());
    }
  }

  eq ArrayDecl.verificationType() = new VerificationTypes.ArrayType(this);
  eq NullType.verificationType() = VerificationTypes.NULL;
  eq VoidType.verificationType() = VerificationTypes.TOP;
  eq BooleanType.verificationType() = VerificationTypes.INT;
  eq ByteType.verificationType() = VerificationTypes.INT;
  eq CharType.verificationType() = VerificationTypes.INT;
  eq ShortType.verificationType() = VerificationTypes.INT;
  eq IntType.verificationType() = VerificationTypes.INT;
  eq LongType.verificationType() = VerificationTypes.LONG;
  eq FloatType.verificationType() = VerificationTypes.FLOAT;
  eq DoubleType.verificationType() = VerificationTypes.DOUBLE;
}
