/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.io.*;

aspect Attributes {

  public class Attribute {
    int attribute_name_index;
    ByteArrayOutputStream buf = new ByteArrayOutputStream();
    DataOutputStream output = new DataOutputStream(buf);

    public Attribute(ConstantPool cp, String name) {
      attribute_name_index = cp.addUtf8(name);
    }

    public void emit(DataOutputStream out) throws IOException {
      out.writeChar(attribute_name_index);
      out.writeInt(buf.size());
      buf.writeTo(out);
      output.close();
      buf.close();
    }

    public int size() {
      return buf.size();
    }

    public void u1(int v) {
      try {
        output.writeByte(v);
      } catch(IOException e) {
      }
    }

    public void u2(int v) {
      try {
        output.writeChar(v);
      } catch(IOException e) {
      }
    }

    public void u4(int v) {
      try {
        output.writeInt(v);
      } catch(IOException e) {
      }
    }

    public void append(CodeGeneration gen) {
      try {
        gen.write(output);
      } catch(IOException e) {
      }
    }

    public void append(Attribute attribute) {
      try {
        attribute.emit(output);
      } catch(IOException e) {
      }
    }
  }

  public class SourceFileAttribute extends Attribute {
    public SourceFileAttribute(ConstantPool p, String sourcefile) {
      super(p, "SourceFile");
      u2(p.addUtf8(sourcefile));
    }
  }

  public class SyntheticAttribute extends Attribute {
    public SyntheticAttribute(ConstantPool p) {
      super(p, "Synthetic");
    }
  }

  public class ConstantValueAttribute extends Attribute {
    public ConstantValueAttribute(ConstantPool p, FieldDeclarator f) {
      super(p, "ConstantValue");
      int constantvalue_index = f.type().addConstant(p, f.getInit().constant());
      u2(constantvalue_index);
    }
  }

  public int TypeDecl.addConstant(ConstantPool p, Constant c) {
    if (isString()) {
      return p.addConstant(c.stringValue());
    }
    throw new Error("Not supported");
  }

  public int BooleanType.addConstant(ConstantPool p, Constant c) {
    return p.addConstant(c.booleanValue() ? 1 : 0);
  }

  public int IntegralType.addConstant(ConstantPool p, Constant c) {
    return p.addConstant(c.intValue());
  }

  public int LongType.addConstant(ConstantPool p, Constant c) {
    return p.addConstant(c.longValue());
  }

  public int FloatType.addConstant(ConstantPool p, Constant c) {
    return p.addConstant(c.floatValue());
  }

  public int DoubleType.addConstant(ConstantPool p, Constant c) {
    return p.addConstant(c.doubleValue());
  }

  public class InnerClassesAttribute extends Attribute {
    public InnerClassesAttribute(TypeDecl typeDecl) {
      super(typeDecl.constantPool(), "InnerClasses");
      ConstantPool c = typeDecl.constantPool();
      Collection<TypeDecl> list = typeDecl.innerClassesAttributeEntries();
      u2(list.size());
      for (TypeDecl type : list) {
        u2(c.addClass(type.constantPoolName())); // inner_class_info_index
        // outer_class_info_index
        u2(type.isMemberType() ? c.addClass(type.enclosingType().constantPoolName()) : 0);
        u2(type.isAnonymous() ? 0 : c.addUtf8(type.name())); // inner_name_index
        // inner_class_access_flags
        u2(type.isInterfaceDecl() ? (type.flags() | Modifiers.ACC_INTERFACE) : type.flags());
      }
    }
  }

  syn lazy Collection<TypeDecl> TypeDecl.innerClassesAttributeEntries() {
    Collection<TypeDecl> list = new HashSet<TypeDecl>();
    if (isNestedType()) {
      list.add(this);
    }
    for (TypeDecl decl : nestedTypes()) {
      list.add(decl);
    }
    return list;
  }

  public class LocalVariableTableAttribute extends Attribute {
    public LocalVariableTableAttribute(CodeGeneration gen) {
      super(gen.constantPool(), "LocalVariableTable");
      u2(gen.localVariableTable.size());
      for (CodeGeneration.LocalVariableEntry e : gen.localVariableTable) {
        u2(e.start_pc);
        u2(e.length);
        u2(e.name_index);
        u2(e.descriptor_index);
        u2(e.index);
      }
    }
  }

  public class LineNumberTableAttribute extends Attribute {
    public LineNumberTableAttribute(CodeGeneration gen) {
      super(gen.constantPool(), "LineNumberTable");
      u2(gen.lineNumberTable.size());
      for (CodeGeneration.LineNumberEntry e : gen.lineNumberTable) {
        u2(e.start_pc);
        u2(e.line_number);
      }
    }
  }

  public class CodeAttribute extends Attribute {
    public CodeAttribute(CodeGeneration codeGen, MethodDecl m) {
      super(codeGen.constantPool(), "Code");
      u2(codeGen.maxStackDepth());
      u2(codeGen.maxLocals());
      u4(codeGen.pos()); // code_length
      append(codeGen);
      u2(codeGen.exceptions.size());
      for (CodeGeneration.ExceptionEntry e : codeGen.exceptions) {
        u2(e.start_pc);
        u2(e.end_pc);
        u2(e.handlerPC());
        u2(e.catch_type);
      }

      Collection<Attribute> attributes = ASTNode.codeAttributes(codeGen, m);

      u2(attributes.size());
      for (Attribute attr: attributes) {
        append(attr);
      }
    }
  }

  /**
   * Builds a collection of the extra attributes to attach to a code attribute.
   */
  static Collection<Attribute> ASTNode.codeAttributes(CodeGeneration codeGen, MethodDecl m) {
    Collection<Attribute> attributes = new ArrayList<Attribute>();

    if (m == null || !m.getModifiers().isSynthetic()) {
      if (!codeGen.lineNumberTable.isEmpty()) {
        attributes.add(new LineNumberTableAttribute(codeGen));
      }
      if (!codeGen.localVariableTable.isEmpty()) {
        attributes.add(new LocalVariableTableAttribute(codeGen));
      }
    }
    return attributes;
  }

  interface ExceptionHolder {
    public int getNumException();
    public Access getException(int i);
  }
  MethodDecl implements ExceptionHolder;
  ConstructorDecl implements ExceptionHolder;

  public class ExceptionsAttribute extends Attribute {
    public ExceptionsAttribute(CodeGeneration gen, ExceptionHolder m) {
      super(gen.constantPool(), "Exceptions");
      u2(m.getNumException());
      for (int i = 0; i < m.getNumException(); i++) {
        u2(gen.constantPool().addClass(m.getException(i).type().constantPoolName()));
      }
    }
  }

  syn lazy Collection<Attribute> TypeDecl.attributes() {
    Collection<Attribute> attributes = new ArrayList<Attribute>();
    if (!innerClassesAttributeEntries().isEmpty()) {
      attributes.add(new InnerClassesAttribute(this));
    }
    if (isSynthetic()) {
      attributes.add(new SyntheticAttribute(constantPool()));
    }
    if (compilationUnit().fromSource()) {
      String relativeName = compilationUnit().relativeName();
      if (relativeName != null) {
        String splitToken = java.io.File.separator;
        if (splitToken.equals("\\")) {
          splitToken = "\\\\";
        }
        String[] strings = relativeName.split(splitToken);
        attributes.add(new SourceFileAttribute(constantPool(), strings[strings.length-1]));
      }
    }
    return attributes;
  }

  syn lazy Collection<Attribute> BodyDecl.attributes() = Collections.emptyList();

  syn lazy Collection<Attribute> FieldDeclarator.attributes() {
    Collection<Attribute> attributes = new ArrayList<Attribute>();
    if (isFinal() && isConstant() && (type().isPrimitive() || type().isString())) {
      attributes.add(new ConstantValueAttribute(hostType().constantPool(), this));
    }
    return attributes;
  }

  eq MethodDecl.attributes() {
    try {
      Collection<Attribute> attributes = new ArrayList<Attribute>();
      CodeGeneration bytecodes = bytecodes(hostType().constantPool());
      if (getNumException() > 0) {
        attributes.add(new ExceptionsAttribute(bytecodes, this));
      }
      if (isAbstract() || isNative()) {
        return attributes;
      } else {
        attributes.add(new CodeAttribute(bytecodes, this));
        if (getModifiers().isSynthetic()) {
          attributes.add(new SyntheticAttribute(hostType().constantPool()));
        }
        return attributes;
      }
    } catch (Error e) {
      System.err.println("Error while processing " + sourceLocation());
      throw e;
    }
  }

  eq ConstructorDecl.attributes() {
    Collection<Attribute> attributes = new ArrayList<Attribute>();
    CodeGeneration bytecodes = bytecodes(hostType().constantPool());
    attributes.add(new CodeAttribute(bytecodes, null));
    if (getNumException() > 0) {
      attributes.add(new ExceptionsAttribute(bytecodes, this));
    }
    if (getModifiers().isSynthetic()) {
      attributes.add(new SyntheticAttribute(hostType().constantPool()));
    }
    return attributes;
  }

  syn lazy Collection<Attribute> TypeDecl.clinit_attributes() {
    Collection<Attribute> attributes = new ArrayList<Attribute>();
    attributes.add(new CodeAttribute(bytecodes(constantPool()), null));
    return attributes;
  }
}
