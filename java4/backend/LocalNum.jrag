/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect LocalNum {
  /**
   * Computes size required for local variables of this statement.
   * NB: only relevant for variable declaration statements.
   * @return local size for declared variables
   */
  syn lazy int Stmt.localSize() = 0;

  eq VarDeclStmt.localSize() {
    int size = 0;
    for (VariableDeclarator decl : getDeclaratorList()) {
      size += decl.localSize();
    }
    return size;
  }

  syn lazy int VariableDeclarator.localSize() = type().variableSize();

  inh lazy int VariableDeclarator.localNum();

  eq VarDeclStmt.getDeclarator(int index).localNum() {
    if (index == 0) {
      return localNum();
    } else {
      return getDeclarator(index - 1).localNum() + getDeclarator(index - 1).localSize();
    }
  }

  /**
   * @return The next available local variable index.
   */
  inh lazy int Stmt.localNum();

  inh lazy int ParameterDeclaration.localNum();

  eq Program.getChild(int index).localNum() = 0;

  syn lazy int MethodDecl.offsetBeforeParameters() = isStatic() ? 0 : 1;

  syn lazy int MethodDecl.offsetAfterParameters() {
    if (getNumParameter() == 0) {
      return offsetBeforeParameters();
    } else {
      ParameterDeclaration last = getParameter(getNumParameter()-1);
      return last.localNum() + last.type().variableSize();
    }
  }

  eq MethodDecl.getParameter(int index).localNum() {
    if (index == 0) {
      return offsetBeforeParameters();
    } else {
      ParameterDeclaration last = getParameter(index-1);
      return last.localNum() + last.type().variableSize();
    }
  }

  eq InstanceInitializer.getBlock().localNum() {
    int localNum = 1;
    for (ConstructorDecl c : hostType().constructors()) {
      int num = c.offsetAfterParameters();
      if (num > localNum) {
        localNum = num;
      }
    }
    return localNum;
  }

  inh lazy int ReturnStmt.resultSaveLocalNum();

  eq MethodDecl.getBlock().resultSaveLocalNum() = offsetAfterParameters();

  eq Program.getChild().resultSaveLocalNum() {
    throw new Error("Unsupported operation resultSaveLocalNum");
  }

  syn lazy int MethodDecl.resultOffset() = type().isVoid() ? 0 : type().variableSize();

  eq MethodDecl.getBlock().localNum() = offsetAfterParameters() + resultOffset();

  syn lazy int ConstructorDecl.offsetBeforeParameters() {
    int i = 1;
    if (hostType().needsEnclosing()) {
      i++;
    }
    if (hostType().needsSuperEnclosing()) {
      i++;
    }
    return i;
  }

  syn lazy int ConstructorDecl.offsetFirstEnclosingVariable() {
    int localIndex = offsetBeforeParameters();
    for (ParameterDeclaration param : getParameterList()) {
      localIndex += param.type().variableSize();
    }
    return localIndex;
  }

  syn lazy int ConstructorDecl.localIndexOfEnclosingVariable(Variable v) {
    int localIndex  = offsetFirstEnclosingVariable();
    Iterator<Variable> iter = hostType().enclosingVariables().iterator();
    Variable varDecl = iter.next();
    while (varDecl != v && iter.hasNext()) {
      localIndex += varDecl.type().variableSize();
      varDecl = iter.next();
    }
    return localIndex;
  }

  syn lazy int ConstructorDecl.offsetAfterParameters() {
    int localIndex = offsetFirstEnclosingVariable();
    for (Variable var : hostType().enclosingVariables()) {
      localIndex += var.type().variableSize();
    }
    return localIndex;
  }

  eq ConstructorDecl.getParameter(int index).localNum() {
    if (index == 0) {
      return offsetBeforeParameters();
    } else {
      ParameterDeclaration last = getParameter(index - 1);
      return last.localNum() + last.type().variableSize();
    }
  }

  eq ConstructorDecl.getBlock().localNum() = offsetAfterParameters();

  eq ForStmt.getStmt().localNum() {
    if (getNumInitStmt() == 0) {
      return localNum();
    } else {
      Stmt last = getInitStmt(getNumInitStmt()-1);
      return last.localNum() + last.localSize();
    }
  }

  eq ForStmt.getInitStmt(int index).localNum() {
    if (index == 0) {
      return localNum();
    } else {
      return getInitStmt(index-1).localNum() + getInitStmt(index-1).localSize();
    }
  }

  eq Block.getStmt(int index).localNum() {
    if (index == 0) {
      return localNum();
    } else {
      return getStmt(index-1).localNum() + getStmt(index-1).localSize();
    }
  }

  eq TryStmt.getChild().localNum() = localNum();

  eq TryStmt.getFinally().localNum() = localNum();

  // Leave room for throwable stored by exceptionHandler.
  eq TryStmt.getExceptionHandler().localNum() = localNum() + 1;

  eq BasicCatch.getBlock().localNum() =
      getParameter().localNum() + getParameter().type().variableSize();

  eq SynchronizedStmt.getBlock().localNum() = localNum() + 3;

  /**
   * The number of local variable slots that a variable of this type occupies.
   */
  syn int TypeDecl.variableSize() = 1;

  eq VoidType.variableSize() = 0;

  eq LongType.variableSize() = 2;

  eq DoubleType.variableSize() = 2;
}

