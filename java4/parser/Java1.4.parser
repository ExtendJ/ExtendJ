CompilationUnit goal = compilation_unit;

Expr literal =
    INTEGER_LITERAL        {: return new IntegerLiteral(INTEGER_LITERAL); :}
  | LONG_LITERAL           {: return new LongLiteral(LONG_LITERAL); :}
  | FLOATING_POINT_LITERAL {: return new FloatingPointLiteral(FLOATING_POINT_LITERAL); :}
  | DOUBLE_LITERAL         {: return new DoubleLiteral(DOUBLE_LITERAL); :}
  | BOOLEAN_LITERAL        {: return new BooleanLiteral(BOOLEAN_LITERAL); :}
  | CHARACTER_LITERAL      {: return new CharacterLiteral(CHARACTER_LITERAL); :}
  | STRING_LITERAL         {: return new StringLiteral(STRING_LITERAL); :}
  | NULL_LITERAL           {: return new NullLiteral(NULL_LITERAL); :}
  ;
Access type =
    primitive_type
  | reference_type
  ;
Access primitive_type =
    numeric_type
  | BOOLEAN                  {: return new PrimitiveTypeAccess("boolean"); :}
  ;
Access numeric_type =
    integral_type
  | floating_point_type
  ;
Access integral_type =
    BYTE                     {: return new PrimitiveTypeAccess("byte"); :}
  | SHORT                    {: return new PrimitiveTypeAccess("short"); :}
  | INT                      {: return new PrimitiveTypeAccess("int"); :}
  | LONG                     {: return new PrimitiveTypeAccess("long"); :}
  | CHAR                     {: return new PrimitiveTypeAccess("char"); :}
  ;
Access floating_point_type =
    FLOAT                    {: return new PrimitiveTypeAccess("float"); :}
  | DOUBLE                   {: return new PrimitiveTypeAccess("double"); :}
  ;
Access reference_type =
    class_or_interface_type
  | array_type
  ;
Access class_or_interface_type =
    name
  ;
Access class_type =
    class_or_interface_type
  ;
Access interface_type =
    class_or_interface_type
  ;
Access array_type =
    primitive_type.t dims @BOTTOM  {: return t.addArrayDims(dims); :}
  | name dims             @BOTTOM  {: return name.addArrayDims(dims); :}
  ;
Access name =
    simple_name
  | qualified_name
  ;
Access simple_name =
    IDENTIFIER              {: return new ParseName(IDENTIFIER); :}
  ;
Access qualified_name =
    name.n DOT simple_name.i   {: return n.qualifiesAccess(i); :}
  ;
CompilationUnit compilation_unit =
    package_with_comment.p import_declarations.i? type_declarations.t? doc_comment_list? {: return new CompilationUnit(p.getID(), i, t); :}
  |                       import_declarations.i? type_declarations.t? doc_comment_list? {: return new CompilationUnit("", i, t); :}
  ;
List import_declarations =
    import_with_comment.i                       {: return new List().add(i); :}
  | import_declarations.l import_with_comment.i {: return l.add(i); :}
  ;
List type_declarations =
    SEMICOLON                                   {: return new List(); :}
  | type_with_comment.t                         {: return new List().add(t); :}
  | type_declarations.l SEMICOLON               {: return l; :}
  | type_declarations.l type_with_comment.t     {: return l.add(t); :}
  ;
String doc_comment =
    DOCUMENTATION_COMMENT.dc {: return new Symbol(Terminals.DOCUMENTATION_COMMENT, dc); :}
  ;
String doc_comment_list =
    doc_comment
  | doc_comment_list doc_comment.dc {: return new Symbol(Terminals.DOCUMENTATION_COMMENT, dc); :}
  ;
IdUse package_with_comment =
    doc_comment_list? package_declaration
  ;
IdUse package_declaration =
    PACKAGE name_decl SEMICOLON {: return name_decl; :}
  ;
IdUse name_decl =
    simple_name_decl
  | qualified_name_decl
  ;
IdUse simple_name_decl =
    IDENTIFIER  {: return new IdUse(IDENTIFIER); :}
  ;
IdUse qualified_name_decl =
    name_decl.n DOT IDENTIFIER.i {: return new IdUse(n.getID() + "." + i); :}
  ;
ImportDecl import_with_comment =
  doc_comment_list? import_declaration
  ;
ImportDecl import_declaration =
    single_type_import_declaration
  | type_import_on_demand_declaration
  ;
ImportDecl single_type_import_declaration =
    IMPORT name SEMICOLON {: return new SingleTypeImportDecl(name); :}
  ;
ImportDecl type_import_on_demand_declaration =
    IMPORT name DOT MULT SEMICOLON  {: return new TypeImportOnDemandDecl(name); :}
  ;
TypeDecl type_with_comment =
    type_declaration
  | doc_comment_list.dc type_declaration.d
    {:
      d.docComment = dc;
      return d;
    :}
  ;
TypeDecl type_declaration =
    class_declaration
  | interface_declaration
  ;
List modifiers =
    modifier.m              {: return new List().add(m); :}
  | modifiers.l modifier.m  {: return l.add(m); :}
  ;
Modifier modifier =
    PUBLIC                  {: return new Modifier("public"); :}
  | PROTECTED               {: return new Modifier("protected"); :}
  | PRIVATE                 {: return new Modifier("private"); :}
  | STATIC                  {: return new Modifier("static"); :}
  | ABSTRACT                {: return new Modifier("abstract"); :}
  | FINAL                   {: return new Modifier("final"); :}
  | NATIVE                  {: return new Modifier("native"); :}
  | SYNCHRONIZED            {: return new Modifier("synchronized"); :}
  | TRANSIENT               {: return new Modifier("transient"); :}
  | VOLATILE                {: return new Modifier("volatile"); :}
  | STRICTFP                {: return new Modifier("strictfp"); :}
  ;
ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER super.s? interfaces.i? class_body.b
                            {: return new ClassDecl(new Modifiers(m), IDENTIFIER, s, i, b); :}
  ;
Opt super =
    EXTENDS class_type      {: return new Opt(class_type); :}
  ;
List interfaces =
    IMPLEMENTS interface_type_list.i              {: return i; :}
  ;
List interface_type_list =
    interface_type.i                              {: return new List().add(i); :}
  | interface_type_list.l COMMA interface_type.i  {: return l.add(i); :}
  ;
List class_body =
    LBRACE class_body_declarations.c? doc_comment_list? RBRACE      {: return c; :}
  ;
List class_body_declarations =
    body_decl_with_comment.c                           {: return new List().add(c); :}
  | class_body_declarations.l body_decl_with_comment.c {: return l.add(c); :}
  ;
BodyDecl body_decl_with_comment =
    class_body_declaration
  | doc_comment_list.dc class_body_declaration.d
    {:
      d.docComment = dc;
      return d;
    :}
  ;
BodyDecl class_body_declaration =
    class_member_declaration
  | instance_initializer
  | static_initializer
  | constructor_declaration
  ;
BodyDecl class_member_declaration =
    field_declaration
  | method_declaration
  | class_declaration.c                        {: return new MemberClassDecl(c); :}
  | interface_declaration.i                    {: return new MemberInterfaceDecl(i); :}
  | SEMICOLON                                  {: return new InstanceInitializer(new Block()); :}
  ;
BodyDecl field_declaration =
    modifiers.m? type.t field_declarators.v SEMICOLON {: return new FieldDecl(new Modifiers(m), t, v); :}
  ;
List field_declarators =
    field_declarator.v                              {: return new List().add(v); :}
  | field_declarators.l COMMA field_declarator.v {: return l.add(v); :}
  ;
FieldDeclarator field_declarator =
    field_declarator_id
  | field_declarator_id.v EQ variable_initializer.i {: v.setInit(i); return v; :}
  ;
FieldDeclarator field_declarator_id =
    IDENTIFIER dims.d?                       {: return new FieldDeclarator(IDENTIFIER, d, new Opt()); :}
  ;
Expr variable_initializer =
    expression
  | array_initializer
  ;
MethodDecl method_declaration =
    method_header.m method_body.b              {: m.setBlockOpt(b); return m; :}
  ;

MethodDecl method_header =
    modifiers.m? type.t IDENTIFIER LPAREN formal_parameter_list.l? RPAREN dims.d? throws.tl?
    {: return new MethodDecl(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, l, tl, new Opt()); :}
  | modifiers.m? VOID   IDENTIFIER LPAREN formal_parameter_list.l? RPAREN throws.tl?
    {: return new MethodDecl(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, l, tl, new Opt()); :}
  ;

List formal_parameter_list =
    formal_parameter.f                                  {: return new List().add(f); :}
  | formal_parameter_list.l COMMA formal_parameter.f    {: return l.add(f); :}
  ;
ParameterDeclaration formal_parameter =
  modifiers.m? type.t IDENTIFIER dims.d?       {: return new ParameterDeclaration(new Modifiers(m), t.addArrayDims(d), IDENTIFIER); :}
  ;
List throws =
    THROWS class_type_list.l                   {: return l; :}
  ;
List class_type_list =
    class_type.c                               {: return new List().add(c); :}
  | class_type_list.l COMMA class_type.c       {: return l.add(c); :}
  ;
Opt method_body =
    block                                      {: return new Opt(block); :}
  | SEMICOLON                                  {: return new Opt(); :}
  ;
StaticInitializer static_initializer =
    STATIC block                               {: return new StaticInitializer(block); :}
  ;
InstanceInitializer instance_initializer =
    block                                      {: return new InstanceInitializer(block); :}
  ;
ConstructorDecl constructor_declaration =
    modifiers.m? IDENTIFIER LPAREN formal_parameter_list.pl? RPAREN throws.tl?
    LBRACE explicit_constructor_invocation.c? block_statements.l? RBRACE
    {: Block b = new Block(l); l.setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new ConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, c, b); :}
  ;
ExprStmt explicit_constructor_invocation =
    THIS LPAREN argument_list.l? RPAREN SEMICOLON
    {: ConstructorAccess c = new ConstructorAccess("this", l);
       c.setStart(THIS.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c); :}
  | SUPER LPAREN argument_list.l? RPAREN SEMICOLON
    {: SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c); :}
  | primary.p DOT SUPER LPAREN argument_list.l? RPAREN SEMICOLON
    {: SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(p.qualifiesAccess(c)); :}
  | name.n DOT SUPER LPAREN argument_list.l? RPAREN SEMICOLON
    {: SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(n.qualifiesAccess(c)); :}
  ;
InterfaceDecl interface_declaration =
  modifiers.m? INTERFACE IDENTIFIER extends_interfaces.i? interface_body.b {: return new InterfaceDecl(new Modifiers(m), IDENTIFIER, i, b); :}
  ;
List extends_interfaces =
    EXTENDS interface_type.i                    {: return new List().add(i); :}
  | extends_interfaces.l COMMA interface_type.i {: return l.add(i); :}
  ;

List interface_body =
    LBRACE interface_member_declarations.i? doc_comment_list? RBRACE  {: return i; :}
  ;
List interface_member_declarations =
    interface_member_with_comment.i                                  {: return new List().add(i); :}
  | interface_member_declarations.l interface_member_with_comment.i  {: return l.add(i); :}
  ;
BodyDecl interface_member_with_comment =
    interface_member_declaration
  | doc_comment_list.dc interface_member_declaration.d
    {:
      d.docComment = dc;
      return d;
    :}
  ;
BodyDecl interface_member_declaration =
    constant_declaration
  | abstract_method_declaration
  | class_declaration.c                        {: return new MemberClassDecl(c); :}
  | interface_declaration.i                    {: return new MemberInterfaceDecl(i); :}
  | SEMICOLON                                  {: return new StaticInitializer(new Block()); :}
  ;
BodyDecl constant_declaration =
    field_declaration
  ;
BodyDecl abstract_method_declaration =
    method_header.m SEMICOLON                  {: return m; :}
  ;
ArrayInit array_initializer =
    LBRACE variable_initializers.v? COMMA? RBRACE   {: return new ArrayInit(v); :}
  ;
List variable_initializers =
    variable_initializer.v                                {: return new List().add(v); :}
  | variable_initializers.l COMMA variable_initializer.v  {: return l.add(v); :}
  ;
Block block =
    LBRACE block_statements.l? RBRACE {: return new Block(l); :}
  ;
List block_statements =
    block_statement.b                     {: return new List().add(b); :}
  | block_statements.l block_statement.b  {: return l.add(b); :}
  ;
Stmt block_statement =
    local_variable_declaration_statement
  | class_declaration.c                     {: return new LocalClassDeclStmt(c); :}
  | statement
  ;
VarDeclStmt local_variable_declaration_statement =
    local_variable_declaration.l SEMICOLON  {: return l; :}
  ;
VarDeclStmt local_variable_declaration =
  modifiers.m? type.t variable_declarators.l {: return new VarDeclStmt(new Modifiers(m), t, l); :}
  ;
List variable_declarators =
    variable_declarator.v                              {: return new List().add(v); :}
  | variable_declarators.l COMMA variable_declarator.v {: return l.add(v); :}
  ;
VariableDeclarator variable_declarator =
    variable_declarator_id
  | variable_declarator_id.v EQ variable_initializer.i {: v.setInit(i); return v; :}
  ;
VariableDeclarator variable_declarator_id =
    IDENTIFIER dims.d?                       {: return new VariableDeclarator(IDENTIFIER, d, new Opt()); :}
  ;
Stmt statement =
    statement_without_trailing_substatement
  | labeled_statement
  | if_then_statement
  | if_then_else_statement
  | while_statement
  | for_statement
  ;
Stmt statement_without_trailing_substatement =
    block
  | empty_statement
  | expression_statement
  | switch_statement
  | do_statement
  | break_statement
  | continue_statement
  | return_statement
  | synchronized_statement
  | throw_statement
  | try_statement
  | assert_statement
  ;
Stmt statement_no_short_if =
    statement_without_trailing_substatement
  | labeled_statement_no_short_if
  | if_then_else_statement_no_short_if
  | while_statement_no_short_if
  | for_statement_no_short_if
  ;
IfStmt if_then_statement =
    IF LPAREN expression.e RPAREN statement.s  {: return new IfStmt(e, s, new Opt()); :}
  ;
IfStmt if_then_else_statement =
    IF LPAREN expression.e RPAREN statement_no_short_if.t ELSE statement.els {: return new IfStmt(e, t, new Opt(els)); :}
  ;
IfStmt if_then_else_statement_no_short_if =
    IF LPAREN expression.e RPAREN statement_no_short_if.t ELSE statement_no_short_if.els {: return new IfStmt(e, t, new Opt(els)); :}
  ;
EmptyStmt empty_statement =
    SEMICOLON                                  {: return new EmptyStmt(); :}
  ;
LabeledStmt labeled_statement =
    IDENTIFIER.id COLON statement.s            {: return new LabeledStmt(id, s); :}
  ;
LabeledStmt labeled_statement_no_short_if =
    IDENTIFIER.id COLON statement_no_short_if.s {: return new LabeledStmt(id, s); :}
  ;
ExprStmt expression_statement =
    statement_expression.e SEMICOLON           {: return e; :}
  ;
ExprStmt statement_expression =
    assignment.a                               {: return new ExprStmt(a); :}
  | preincrement_expression.e                  {: return new ExprStmt(e); :}
  | predecrement_expression.e                  {: return new ExprStmt(e); :}
  | postincrement_expression.e                 {: return new ExprStmt(e); :}
  | postdecrement_expression.e                 {: return new ExprStmt(e); :}
  | method_invocation.i                        {: return new ExprStmt(i); :}
  | class_instance_creation_expression.e       {: return new ExprStmt(e); :}
  ;
SwitchStmt switch_statement =
    SWITCH LPAREN expression.e RPAREN switch_block.l {: return new SwitchStmt(e, l); :}
  ;
Block switch_block =
    LBRACE switch_statements.l RBRACE          {: return new Block(l); :}
  | LBRACE RBRACE                              {: return new Block(new List()); :}
  ;
List switch_statements =
    switch_label.s                             {: return new List().add(s); :}
  | switch_statements.l switch_label.s         {: return l.add(s); :}
  | switch_statements.l block_statement.b      {: return l.add(b); :}
  ;
Case switch_label =
    CASE constant_expression.e COLON           {: return new ConstCase(e); :}
  | DEFAULT COLON                              {: return new DefaultCase(); :}
  ;
WhileStmt while_statement =
    WHILE LPAREN expression.e RPAREN statement.s {: return new WhileStmt(e, s); :}
  ;
WhileStmt while_statement_no_short_if =
    WHILE LPAREN expression.e RPAREN statement_no_short_if.s {: return new WhileStmt(e, s); :}
  ;
DoStmt do_statement =
    DO statement.s WHILE LPAREN expression.e RPAREN SEMICOLON {: return new DoStmt(s, e); :}
  ;
ForStmt for_statement =
    FOR LPAREN for_init.i? SEMICOLON expression.e? SEMICOLON for_update.u? RPAREN statement.s {: return new ForStmt(i, e, u, s); :}
  ;
ForStmt for_statement_no_short_if =
    FOR LPAREN for_init.i? SEMICOLON expression.e? SEMICOLON for_update.u? RPAREN statement_no_short_if.s {: return new ForStmt(i, e, u, s); :}
  ;
List for_init =
    statement_expression_list
  | local_variable_declaration.d       {: return new List().add(d); :};
List for_update =
    statement_expression_list
  ;
List statement_expression_list =
    statement_expression.e                                   {: return new List().add(e); :}
  | statement_expression_list.l COMMA statement_expression.e {: return l.add(e); :}
  ;
BreakStmt break_statement =
    BREAK IDENTIFIER.id SEMICOLON     {: return new BreakStmt(id); :}
  | BREAK               SEMICOLON     {: return new BreakStmt(""); :}
  ;
ContinueStmt continue_statement =
    CONTINUE IDENTIFIER.id SEMICOLON  {: return new ContinueStmt(id); :}
  | CONTINUE               SEMICOLON  {: return new ContinueStmt(""); :}
  ;
ReturnStmt return_statement =
    RETURN expression? SEMICOLON      {: return new ReturnStmt(expression); :}
  ;
ThrowStmt throw_statement =
    THROW expression SEMICOLON        {: return new ThrowStmt(expression); :}
  ;
SynchronizedStmt synchronized_statement =
    SYNCHRONIZED LPAREN expression.e RPAREN block.b {: return new SynchronizedStmt(e, b); :}
  ;
TryStmt try_statement =
    TRY block.b catches.c             {: return new TryStmt(b, c, new Opt()); :}
  | TRY block.b            finally.f  {: return new TryStmt(b, new List(), new Opt(f)); :}
  | TRY block.b catches.c  finally.f  {: return new TryStmt(b, c, new Opt(f)); :}
  ;
List catches =
    catch_clause.c                    {: return new List().add(c); :}
  | catches.l catch_clause.c          {: return l.add(c); :}
  ;
CatchClause catch_clause =
    CATCH LPAREN formal_parameter.p RPAREN block.b {: return new BasicCatch(p, b); :}
  ;
Block finally =
    FINALLY block.b {: return b; :}
  ;
AssertStmt assert_statement =
    ASSERT expression.e                    SEMICOLON {: return new AssertStmt(e, new Opt()); :}
  | ASSERT expression.e COLON expression.s SEMICOLON {: return new AssertStmt(e, new Opt(s)); :}
  ;
Expr primary =
    primary_no_new_array @BOTTOM
  | array_creation_init 
  | array_creation_uninit 
  ;

ClassAccess class_literal =
  CLASS {: return new ClassAccess(); :}
  ;

Expr primary_no_new_array =
    literal
  | primitive_type.n dims.d? DOT class_literal.c  {: return n.addArrayDims(d).qualifiesAccess(c); :}
  | name dims.d? DOT class_literal.c              {: return name.addArrayDims(d).qualifiesAccess(c); :}
  | VOID DOT class_literal.c                      {: PrimitiveTypeAccess v = new PrimitiveTypeAccess("void");
                                                     v.setStart(VOID.getStart());
                                                     v.setEnd(VOID.getEnd());
                                                     return v.qualifiesAccess(c); :}
  | THIS                                          {: return new ThisAccess(); :}
  | name DOT THIS                                 {: ThisAccess t = new ThisAccess();
                                                     t.setStart(THIS.getStart()); t.setEnd(THIS.getEnd());
                                                     return name.qualifiesAccess(t); :}
  | LPAREN expression RPAREN                      {: return new ParExpr(expression); :}
  | LPAREN name RPAREN                            {: return new ParExpr(name); :}
  | class_instance_creation_expression
  | field_access
  | method_invocation
  | array_access
  ;
Expr class_instance_creation_expression =
    NEW class_or_interface_type.t LPAREN argument_list.l? RPAREN
    {: return new ClassInstanceExpr(t, l, new Opt()); :}
  | primary.n DOT NEW simple_name.id LPAREN argument_list.l? RPAREN
    {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, new Opt());
       e.setStart(NEW.getStart());
       e.setEnd(RPAREN.getEnd());
       return n.qualifiesAccess(e); :}
  | name.n DOT NEW simple_name.id LPAREN argument_list.l? RPAREN
    {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, new Opt());
       e.setStart(NEW.getStart());
       e.setEnd(RPAREN.getEnd());
       return n.qualifiesAccess(e); :}
  | NEW class_or_interface_type.t LPAREN argument_list.l? RPAREN subclass_body.b
    {: return new ClassInstanceExpr(t, l, b); :}
  | primary.n DOT NEW simple_name.id LPAREN argument_list.l? RPAREN subclass_body.b
    {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, b);
       e.setStart(NEW.getStart());
       e.setEnd(b.getEnd());
       return n.qualifiesAccess(e); :}
  | name.n DOT NEW simple_name.id LPAREN argument_list.l? RPAREN subclass_body.b
    {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, b);
       e.setStart(NEW.getStart());
       e.setEnd(b.getEnd());
       return n.qualifiesAccess(e); :}
  ;
Opt subclass_body =
    class_body.b                               {: return new Opt(new AnonymousDecl(new Modifiers(), "Anonymous", b)); :}
  ;

List argument_list =
    expression.e                               {: return new List().add(e); :}
  | argument_list.l COMMA expression.e         {: return l.add(e); :}
  ;

Expr array_creation_uninit =
    NEW primitive_type.t dim_exprs.d           {: return new ArrayCreationExpr(t.addArrayDims(d), new Opt()); :}
  | NEW primitive_type.t dim_exprs.d dims.e    {: return new ArrayCreationExpr(t.addArrayDims(d).addArrayDims(e), new Opt()); :}
  | NEW class_or_interface_type.t dim_exprs.d  {: return new ArrayCreationExpr(t.addArrayDims(d), new Opt()); :}
  | NEW class_or_interface_type.t dim_exprs.d dims.e {: return new ArrayCreationExpr(t.addArrayDims(d).addArrayDims(e), new Opt()); :}
  ;
Expr array_creation_init =
    NEW primitive_type.t dims.d array_initializer.i           {: return new ArrayCreationExpr(t.addArrayDims(d), new Opt(i)); :}
  | NEW class_or_interface_type.t dims.d array_initializer.i  {: return new ArrayCreationExpr(t.addArrayDims(d), new Opt(i)); :}
  ;
List dim_exprs =
    dim_expr.e                                 {: return new List().add(e); :}
  | dim_exprs.l dim_expr.e                     {: return l.add(e); :}
  ;
Dims dim_expr =
    LBRACK expression.e RBRACK                 {: return new Dims(new Opt(e)); :}
  ;
List dims =
    LBRACK RBRACK                              {: Dims d = new Dims(new Opt()); d.setStart(LBRACK.getStart()); d.setEnd(RBRACK.getEnd());
                                                  return new List().add(d); :}
  | dims.l LBRACK RBRACK                       {: Dims d = new Dims(new Opt()); d.setStart(LBRACK.getStart()); d.setEnd(RBRACK.getEnd());
                                                  return l.add(d); :}
  ;

Access field_access =
    primary.p DOT simple_name.id                {: return p.qualifiesAccess(id); :}
  | SUPER DOT simple_name.id
    {: SuperAccess s = new SuperAccess();
       s.setStart(SUPER.getStart());
       s.setEnd(SUPER.getEnd());
       return s.qualifiesAccess(id); :}
  | name.n DOT SUPER DOT simple_name.id
    {: SuperAccess s = new SuperAccess();
       s.setStart(SUPER.getStart());
       s.setEnd(SUPER.getEnd());
       return n.qualifiesAccess(s).qualifiesAccess(id); :}
  ;
Access method_invocation =
  name LPAREN argument_list.l? RPAREN
  {:  Access result = name.buildMethodAccess(l);
      result.setStart(name.getStart());
      result.setEnd(RPAREN.getEnd());
      return result;
  :}
  | primary.p DOT IDENTIFIER LPAREN argument_list.l? RPAREN
  {: MethodAccess m = new MethodAccess(IDENTIFIER, l);
     m.setStart(IDENTIFIER.getStart()); // add location information
     m.setEnd(RPAREN.getEnd()); // add location information
     return p.qualifiesAccess(m); :}
  | SUPER DOT IDENTIFIER LPAREN argument_list.l? RPAREN
  {: SuperAccess s = new SuperAccess();
     s.setStart(SUPER.getStart());
     s.setEnd(SUPER.getEnd());
     MethodAccess m = new MethodAccess(IDENTIFIER, l);
     m.setStart(IDENTIFIER.getStart());
     m.setEnd(RPAREN.getEnd());
     return s.qualifiesAccess(m); :}
  | name DOT SUPER DOT IDENTIFIER LPAREN argument_list.l? RPAREN
  {: SuperAccess s = new SuperAccess();
     s.setStart(SUPER.getStart());
     s.setEnd(SUPER.getEnd());
     MethodAccess m = new MethodAccess(IDENTIFIER, l);
     m.setStart(IDENTIFIER.getStart());
     m.setEnd(RPAREN.getEnd());
     return name.qualifiesAccess(s).qualifiesAccess(m); :}
  ;
Access array_access =
  name LBRACK expression.e RBRACK 
  {: ArrayAccess a = new ArrayAccess(e);
     a.setStart(LBRACK.getStart());
     a.setEnd(RBRACK.getEnd());
     return name.qualifiesAccess(a); :}
  | primary_no_new_array.p LBRACK expression.e RBRACK 
  {: ArrayAccess a = new ArrayAccess(e);
     a.setStart(LBRACK.getStart());
     a.setEnd(RBRACK.getEnd());
     return p.qualifiesAccess(a); :}
  ;
Expr postfix_expression =
    primary @BOTTOM
  | name    @BOTTOM
  | postincrement_expression
  | postdecrement_expression
  ;
Expr postincrement_expression =
    postfix_expression.e PLUSPLUS @POSTINCDEC {: return new PostIncExpr(e); :}
  ;
Expr postdecrement_expression =
    postfix_expression.e MINUSMINUS @POSTINCDEC {: return new PostDecExpr(e); :}
  ;
Expr unary_expression =
    preincrement_expression
  | predecrement_expression
  | PLUS unary_expression.e    @UNARY             {: return new PlusExpr(e); :}
  | MINUS unary_expression.e   @UNARY            {: return new MinusExpr(e); :}
  | unary_expression_not_plus_minus
  ;
Expr preincrement_expression =
    PLUSPLUS unary_expression.e                {: return new PreIncExpr(e); :}
  ;
Expr predecrement_expression =
    MINUSMINUS unary_expression.e              {: return new PreDecExpr(e); :}
  ;
Expr unary_expression_not_plus_minus =
    postfix_expression @BOTTOM
  | COMP unary_expression.e                    {: return new BitNotExpr(e); :}
  | NOT unary_expression.e                     {: return new LogNotExpr(e); :}
  | cast_expression
  ;
Expr cast_expression =
    LPAREN primitive_type.t dims.d? RPAREN unary_expression.e      @CAST
  {: return new CastExpr(t.addArrayDims(d), e); :}
  | LPAREN name.t dims.d? RPAREN unary_expression_not_plus_minus.e @CAST
  {: return new CastExpr(t.addArrayDims(d), e); :}
  ;
Expr multiplicative_expression =
    unary_expression
  | multiplicative_expression.e1 MULT unary_expression.e2  {: return new MulExpr(e1, e2); :}
  | multiplicative_expression.e1 DIV unary_expression.e2   {: return new DivExpr(e1, e2); :}
  | multiplicative_expression.e1 MOD unary_expression.e2   {: return new ModExpr(e1, e2); :}
  ;
Expr additive_expression =
    multiplicative_expression @BOTTOM
  | additive_expression.e1 PLUS multiplicative_expression.e2   {: return new AddExpr(e1, e2); :}
  | additive_expression.e1 MINUS multiplicative_expression.e2  {: return new SubExpr(e1, e2); :}
  ;
Expr shift_expression =
    additive_expression @BOTTOM
  | shift_expression.e1 LSHIFT additive_expression.e2   {: return new LShiftExpr(e1, e2); :}
  | shift_expression.e1 RSHIFT additive_expression.e2   {: return new RShiftExpr(e1, e2); :}
  | shift_expression.e1 URSHIFT additive_expression.e2  {: return new URShiftExpr(e1, e2); :}
  ;
Expr relational_expression =
    shift_expression 
  | relational_expression.e1 LT shift_expression.e2     {: return new LTExpr(e1, e2); :}
  | relational_expression.e1 GT shift_expression.e2     {: return new GTExpr(e1, e2); :}
  | relational_expression.e1 LTEQ shift_expression.e2   {: return new LEExpr(e1, e2); :}
  | relational_expression.e1 GTEQ shift_expression.e2   {: return new GEExpr(e1, e2); :}
  | relational_expression.e INSTANCEOF reference_type.t {: return new InstanceOfExpr(e, t); :}
  ;
Expr equality_expression =
    relational_expression
  | equality_expression.e1 EQEQ relational_expression.e2  {: return new EQExpr(e1, e2); :}
  | equality_expression.e1 NOTEQ relational_expression.e2 {: return new NEExpr(e1, e2); :}
  ;
Expr and_expression =
    equality_expression @BOTTOM
  | and_expression.e1 AND equality_expression.e2        {: return new AndBitwiseExpr(e1, e2); :}
  ;
Expr exclusive_or_expression =
    and_expression @BOTTOM
  | exclusive_or_expression.e1 XOR and_expression.e2    {: return new XorBitwiseExpr(e1, e2); :}
  ;
Expr inclusive_or_expression =
    exclusive_or_expression @BOTTOM
  | inclusive_or_expression.e1 OR exclusive_or_expression.e2 {: return new OrBitwiseExpr(e1, e2); :}
  ;
Expr conditional_and_expression =
    inclusive_or_expression @BOTTOM
  | conditional_and_expression.e1 ANDAND inclusive_or_expression.e2 {: return new AndLogicalExpr(e1, e2); :}
  ;
Expr conditional_or_expression =
    conditional_and_expression @BOTTOM
  | conditional_or_expression.e1 OROR conditional_and_expression.e2 {: return new OrLogicalExpr(e1, e2); :}
  ;
Expr conditional_expression =
    conditional_or_expression @BOTTOM
  | conditional_or_expression.c QUESTION expression.e1 COLON conditional_expression.e2 {: return new ConditionalExpr(c, e1, e2); :}
  ;
Expr assignment_expression =
    conditional_expression
  | assignment
  ;
Expr assignment =
    postfix_expression.dest EQ assignment_expression.source {: return new AssignSimpleExpr(dest, source); :}
  | postfix_expression.dest MULTEQ assignment_expression.source {: return new AssignMulExpr(dest, source); :}
  | postfix_expression.dest DIVEQ assignment_expression.source {: return new AssignDivExpr(dest, source); :}
  | postfix_expression.dest MODEQ assignment_expression.source {: return new AssignModExpr(dest, source); :}
  | postfix_expression.dest PLUSEQ assignment_expression.source {: return new AssignPlusExpr(dest, source); :}
  | postfix_expression.dest MINUSEQ assignment_expression.source {: return new AssignMinusExpr(dest, source); :}
  | postfix_expression.dest LSHIFTEQ assignment_expression.source {: return new AssignLShiftExpr(dest, source); :}
  | postfix_expression.dest RSHIFTEQ assignment_expression.source {: return new AssignRShiftExpr(dest, source); :}
  | postfix_expression.dest URSHIFTEQ assignment_expression.source {: return new AssignURShiftExpr(dest, source); :}
  | postfix_expression.dest ANDEQ assignment_expression.source {: return new AssignAndExpr(dest, source); :}
  | postfix_expression.dest XOREQ assignment_expression.source {: return new AssignXorExpr(dest, source); :}
  | postfix_expression.dest OREQ assignment_expression.source {: return new AssignOrExpr(dest, source); :}
  ;
Expr expression = assignment_expression;
Expr constant_expression = expression;
