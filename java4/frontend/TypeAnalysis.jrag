/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.*;

// 5.1 Kinds of Conversion.
aspect TypeConversion {
  // 5.1.1 Identity Conversion.
  syn boolean TypeDecl.identityConversionTo(TypeDecl type) = this == type;

  syn boolean TypeDecl.wideningConversionTo(TypeDecl type) = subtype(type);
  syn lazy boolean TypeDecl.narrowingConversionTo(TypeDecl type) = subtype(type);

  // 5.1.2 Widening Primitive Conversions.
  eq PrimitiveType.wideningConversionTo(TypeDecl type) = subtype(type);

  // 5.1.3 Narrowing Primitive Conversion.
  eq PrimitiveType.narrowingConversionTo(TypeDecl type) = type.subtype(this);
  eq ShortType.narrowingConversionTo(TypeDecl type) = type.isByte() || type.isChar();
  eq CharType.narrowingConversionTo(TypeDecl type) =  type.isByte() || type.isShort();
  eq ByteType.narrowingConversionTo(TypeDecl type) = type.isChar();

  // 5.1.4 Widening Reference Conversions.
  eq ReferenceType.wideningConversionTo(TypeDecl type) = subtype(type);

  // 5.1.5 Narrowing Reference Conversions.
  eq ReferenceType.narrowingConversionTo(TypeDecl type) {
    if (type.subtype(this)) {
      return true;
    }
    if (isClassDecl() && !getModifiers().isFinal() && type.isInterfaceDecl()) {
      return true;
    }
    if (isInterfaceDecl() && type.isClassDecl() && !type.getModifiers().isFinal()) {
      return true;
    }
    if (isInterfaceDecl() && type.subtype(this)) {
      return true;
    }
    if (fullName().equals("java.lang.Object") && type.isInterfaceDecl()) {
      return true;
    }
    // Dragons
    // TODO: Check if both are interfaces with compatible methods
    if (isArrayDecl() && type.isArrayDecl() && elementType().subtype(type.elementType())) {
      return true;
    }
    return false;
  }

  // 5.1.6 String Conversions
  syn boolean TypeDecl.stringConversion() = true;
  eq VoidType.stringConversion() = false;

  // 5.2 Assignment Conversion
  syn boolean TypeDecl.assignConversionTo(TypeDecl type, Expr expr) {
    if (identityConversionTo(type) || wideningConversionTo(type)) {
      return true;
    }
    boolean sourceIsConstant = expr != null ? expr.isConstant() : false;
    return sourceIsConstant
        && (isInt() || isChar() || isShort() || isByte())
        && (type.isByte() || type.isShort() || type.isChar())
        && narrowingConversionTo(type)
        && expr.representableIn(type);
  }

  // 5.3 Method Invocation Conversion
  syn lazy boolean TypeDecl.methodInvocationConversionTo(TypeDecl type) =
      identityConversionTo(type) || wideningConversionTo(type);

  // 5.5 Casting Conversion
  syn lazy boolean TypeDecl.castingConversionTo(TypeDecl type) =
      identityConversionTo(type) || wideningConversionTo(type) || narrowingConversionTo(type);

  eq ClassDecl.castingConversionTo(TypeDecl type) {
    if (type.isArrayDecl()) {
      return isObject();
    } else if (type.isClassDecl()) {
      return this == type || subtype(type) || type.subtype(this);
    } else if (type.isInterfaceDecl()) {
      return !isFinal() || subtype(type);
    } else return super.castingConversionTo(type);
  }

  inh MethodDecl InterfaceDecl.unknownMethod();

  eq InterfaceDecl.castingConversionTo(TypeDecl type) {
    if (type.isArrayDecl()) {
      return type.subtype(this);
    } else if (type.isClassDecl()) {
      return !type.isFinal() || type.subtype(this);
    } else if (type.isInterfaceDecl()) {
      for (MethodDecl m : methods()) {
        for (MethodDecl n : type.methodsSignature(m.signature())) {
          if (n.type() != m.type()) {
            return false;
          }
        }
      }
      return true;
    } else return super.castingConversionTo(type);
  }

  eq ArrayDecl.castingConversionTo(TypeDecl type) {
    if (type.isArrayDecl()) {
      TypeDecl SC = componentType();
      TypeDecl TC = type.componentType();
      if (SC.isPrimitiveType() && TC.isPrimitiveType() && SC == TC) {
        return true;
      }
      if (SC.isReferenceType() && TC.isReferenceType()) {
        return SC.castingConversionTo(TC);
      }
      return false;
    } else if (type.isClassDecl()) {
      return type.isObject();
    } else if (type.isInterfaceDecl()) {
      return type == typeSerializable() || type == typeCloneable();
    } else return super.castingConversionTo(type);
  }

  inh TypeDecl ArrayDecl.typeSerializable();
  inh TypeDecl ArrayDecl.typeCloneable();

}

aspect NumericPromotion {
  syn TypeDecl TypeDecl.unaryNumericPromotion() = this; // Not unknown since this would be.

  // 5.6.1 Unary Numeric Promotion.
  syn lazy TypeDecl NumericType.unaryNumericPromotion() = this;
  eq ByteType.unaryNumericPromotion() = typeInt();
  eq ShortType.unaryNumericPromotion() = typeInt();
  eq CharType.unaryNumericPromotion() = typeInt();

  // 5.6.2 Binary Numeric Promotion.
  syn TypeDecl TypeDecl.binaryNumericPromotion(TypeDecl type) = unknownType();

  syn lazy TypeDecl NumericType.binaryNumericPromotion(TypeDecl type) {
    if (!type.isNumericType()) {
      return unknownType();
    }
     return unaryNumericPromotion().subtype(type) ? type : unaryNumericPromotion();
  }
}

aspect TypeAnalysis {
  // 4.1 The Kinds of Types and Values.
  syn boolean TypeDecl.isReferenceType() = false;
  eq ReferenceType.isReferenceType() = true;
  eq UnknownType.isReferenceType() = true;

  syn boolean TypeDecl.isPrimitiveType() = false;
  eq PrimitiveType.isPrimitiveType() = true;
  eq UnknownType.isPrimitiveType() = true;

  // 4.2 Primitive Types and Values.
  syn boolean TypeDecl.isNumericType() = false;
  eq NumericType.isNumericType() = true;
  eq UnknownType.isNumericType() = true;

  syn boolean TypeDecl.isIntegralType() = false;
  eq IntegralType.isIntegralType() = true;
  eq UnknownType.isIntegralType() = true;

  syn boolean TypeDecl.isBoolean() = false;
  eq BooleanType.isBoolean() = true;
  eq UnknownType.isBoolean() = true;

  syn boolean TypeDecl.isByte() = false;
  eq ByteType.isByte() = true;
  syn boolean TypeDecl.isChar() = false;
  eq CharType.isChar() = true;
  syn boolean TypeDecl.isShort() = false;
  eq ShortType.isShort() = true;
  syn boolean TypeDecl.isInt() = false;
  eq IntType.isInt() = true;
  eq UnknownType.isInt() = true;

  syn boolean TypeDecl.isFloat() = false;
  eq FloatType.isFloat() = true;
  syn boolean TypeDecl.isLong() = false;
  eq LongType.isLong() = true;
  syn boolean TypeDecl.isDouble() = false;
  eq DoubleType.isDouble() = true;

  syn boolean TypeDecl.isVoid() = false;
  eq VoidType.isVoid() = true;

  syn boolean TypeDecl.isNull() = false;
  eq NullType.isNull() = true;

  // 4.3 Reference Types and Values
  syn boolean TypeDecl.isClassDecl() = false;
  eq ClassDecl.isClassDecl() = true;
  eq ArrayDecl.isClassDecl() = false;

  syn boolean TypeDecl.isInterfaceDecl() = false;
  eq InterfaceDecl.isInterfaceDecl() = true;
  syn boolean TypeDecl.isArrayDecl() = false;
  eq ArrayDecl.isArrayDecl() = true;

  inh lazy boolean TypeDecl.isAnonymous();
  eq ClassInstanceExpr.getTypeDecl().isAnonymous() = true;
  eq TypeDecl.getChild().isAnonymous() = false;
  eq Program.getChild().isAnonymous() = false;

  syn boolean TypeDecl.isPrimitive() = false;
  eq PrimitiveType.isPrimitive() = true;

  syn lazy boolean TypeDecl.isString() = false;
  eq ClassDecl.isString() = fullName().equals("java.lang.String");

  syn lazy boolean TypeDecl.isObject() = false;
  eq ClassDecl.isObject() = name().equals("Object") && packageName().equals("java.lang");

  syn boolean TypeDecl.isUnknown() = false;
  eq UnknownType.isUnknown() = true;

  eq Program.getChild().unknownField() = unknownType().findSingleVariable("unknown");

  public Variable TypeDecl.findSingleVariable(String name) {
    return memberFields(name).iterator().next();
  }

  eq Program.getChild().unknownMethod() {
    for (MethodDecl m : unknownType().memberMethods("unknown")) {
      return m;
    }
    throw new Error("Could not find method unknown in type Unknown");
  }

  eq Program.getChild().unknownConstructor() = unknownConstructor();

  syn lazy ConstructorDecl Program.unknownConstructor() =
      unknownType().constructors().iterator().next();

  eq Dot.type() = lastAccess().type();

  syn TypeDecl FieldDecl.type() = getTypeAccess().type();

  syn TypeDecl Declarator.type() = getTypeAccess().type();

  syn lazy TypeDecl ParameterDeclaration.type() = getTypeAccess().type();

  syn TypeDecl VarDeclStmt.type() = getTypeAccess().type();

  inh lazy TypeDecl ArrayInit.declType();
  eq Program.getChild(int i).declType() = null;
  eq FieldDecl.getDeclarator().declType() = null; // TODO(joqvist): fixme
  eq VarDeclStmt.getDeclarator().declType() = null; // TODO(joqvist): fixme

  eq Declarator.getInit().declType() = type();
  eq ArrayCreationExpr.getArrayInit().declType() = type();
  eq ArrayInit.getInit().declType() = declType().componentType();

  eq ArrayInit.type() = declType();

  inh TypeDecl ConstructorDecl.unknownType();
  syn TypeDecl ConstructorDecl.type() = unknownType();
  syn lazy TypeDecl MethodDecl.type() = getTypeAccess().type();

  syn boolean BodyDecl.isVoid() = false;
  eq MethodDecl.isVoid() = type().isVoid();
  eq ConstructorDecl.isVoid() = true;

  syn lazy TypeDecl Expr.type();

  // Can not be lazy due to circular use from StaticImportDecl.importedTypes.
  syn TypeDecl TypeAccess.type();

  eq Access.type() = unknownType();
  eq TypeAccess.type() = decl();
  eq ArrayAccess.type() = isQualified() ? qualifier().type().componentType() : unknownType();
  inh TypeDecl ArrayAccess.unknownType();

  eq VarAccess.type() = decl().type();
  eq MethodAccess.type() = decl().type();
  eq ConstructorAccess.type() = decl().type();

  eq ThisAccess.type() = decl();
  eq SuperAccess.type() {
    TypeDecl typeDecl = decl();
    if (!typeDecl.isClassDecl()) {
      return unknownType();
    }
    ClassDecl classDecl = (ClassDecl) typeDecl;
    return classDecl.superclass();
  }

  eq AssignExpr.type() = getDest().type();

  eq IntegerLiteral.type() = typeInt();
  eq LongLiteral.type() = typeLong();
  eq FloatingPointLiteral.type() = typeFloat();
  eq DoubleLiteral.type() = typeDouble();
  eq BooleanLiteral.type() = typeBoolean();
  eq CharacterLiteral.type() = typeChar();
  eq StringLiteral.type() = typeString();
  eq NullLiteral.type() = typeNull();

  eq ParExpr.type() = getExpr().isTypeAccess() ? unknownType() : getExpr().type();

  eq ClassInstanceExpr.type() = hasTypeDecl() ? getTypeDecl() : getAccess().type();
  eq ArrayCreationExpr.type() = getTypeAccess().type();

  eq Unary.type() = getOperand().type();
  eq PlusExpr.type() = getOperand().type().unaryNumericPromotion();
  eq MinusExpr.type() = getOperand().type().unaryNumericPromotion();
  eq BitNotExpr.type() = getOperand().type().unaryNumericPromotion();
  eq LogNotExpr.type() = typeBoolean();

  eq CastExpr.type() = getTypeAccess().type();

  // 15.17
  eq MultiplicativeExpr.type() = getLeftOperand().type().binaryNumericPromotion(getRightOperand().type());

  // 15.18
  eq AdditiveExpr.type() = getLeftOperand().type().binaryNumericPromotion(getRightOperand().type());

  // 15.18
  eq AddExpr.type() {
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (!left.isString() && !right.isString()) {
      return super.type();
    } else {
      if (left.isVoid() || right.isVoid()) {
        return unknownType();
      }
      // pick the string type
      return left.isString() ? left : right;
    }
  }

  // 15.19
  eq ShiftExpr.type() = getLeftOperand().type().unaryNumericPromotion();

  // 15.20, 15.21
  eq RelationalExpr.type() = typeBoolean();

  // 15.23, 15.24
  eq LogicalExpr.type() = typeBoolean();

  // 15.22
  eq BitwiseExpr.type() {
    if (getLeftOperand().type().isIntegralType() && getRightOperand().type().isIntegralType()) {
      // 15.22.1
      return getLeftOperand().type().binaryNumericPromotion(getRightOperand().type());
    } else if (getLeftOperand().type().isBoolean() && getRightOperand().type().isBoolean()) {
      // 15.22.2
      return typeBoolean();
    }
    return unknownType();
  }

  // 15.20.2
  eq InstanceOfExpr.type() = typeBoolean();

  // 15.25
  eq ConditionalExpr.type() = conditionalExprType(getTrueExpr().type(), getFalseExpr().type());

  /**
   * Returns the type of a conditional expression, given the types of the
   * second and third operands.
   */
  syn TypeDecl ConditionalExpr.conditionalExprType(TypeDecl second, TypeDecl third) {
    if (second == third) {
      return second;
    }

    if (second.isNumericType() && third.isNumericType()) {
      if (second.isByte() && third.isShort()) {
        return third;
      }
      if (second.isShort() && third.isByte()) {
        return second;
      }
      if ((second.isByte() || second.isShort() || second.isChar())
          && third.isInt() && getFalseExpr().isConstant()
          && getFalseExpr().representableIn(second)) {
        return second;
      }
      if ((third.isByte() || third.isShort() || third.isChar())
          && second.isInt() && getTrueExpr().isConstant()
          && getTrueExpr().representableIn(third)) {
        return third;
      }
      return second.binaryNumericPromotion(third);
    } else if (second.isBoolean() && third.isBoolean()) {
      return second;
    } else if (second.isReferenceType() && third.isNull()) {
      return second;
    } else if (second.isNull() && third.isReferenceType()) {
      return third;
    } else if (second.isReferenceType() && third.isReferenceType()) {
      if (second.assignConversionTo(third, null)) {
        return third;
      }
      if (third.assignConversionTo(second, null)) {
        return second;
      }
      return unknownType();
    } else {
      return unknownType();
    }
  }

  eq ClassAccess.type() = lookupType("java.lang", "Class");
}

aspect Subtyping {

  /**
   * Deprecated variant of the subtype attribute.
   * @deprecated use the subtype attribute instead.
   */
  syn boolean TypeDecl.instanceOf(TypeDecl type) = subtype(type);

  // TODO(joqvist): investigate removing circular here and only introducing it
  // for relevant attributes in Java 5.
  /**
   * Determine if this type is a subtype of the argument type.
   *
   * Note: this attribute is declared circular only because subtyping becomes
   * circular in the Java 5 extension.
   */
  syn lazy boolean TypeDecl.subtype(TypeDecl type) circular [true] = type == this;

  eq ClassDecl.subtype(TypeDecl type) = type.supertypeClassDecl(this);
  eq InterfaceDecl.subtype(TypeDecl type) = type.supertypeInterfaceDecl(this);
  eq ArrayDecl.subtype(TypeDecl type) = type.supertypeArrayDecl(this);
  eq PrimitiveType.subtype(TypeDecl type) = type.supertypePrimitiveType(this);
  eq NullType.subtype(TypeDecl type) = type.supertypeNullType(this);
  eq VoidType.subtype(TypeDecl type) = type.supertypeVoidType(this);

  eq UnknownType.subtype(TypeDecl type) = false;
  eq UnknownType.supertypeClassDecl(ClassDecl type) = true;
  eq UnknownType.supertypeInterfaceDecl(InterfaceDecl type) = true;
  eq UnknownType.supertypeArrayDecl(ArrayDecl type) = true;
  eq UnknownType.supertypePrimitiveType(PrimitiveType type) = true;
  eq UnknownType.supertypeNullType(NullType type) = true;

  syn boolean TypeDecl.supertypeClassDecl(ClassDecl type) = type == this;
  eq ClassDecl.supertypeClassDecl(ClassDecl type) =
      super.supertypeClassDecl(type) || type.hasSuperclass() && type.superclass().subtype(this);
  eq InterfaceDecl.supertypeClassDecl(ClassDecl type) {
    if (super.supertypeClassDecl(type)) {
      return true;
    }
    for (InterfaceDecl iface : type.superInterfaces()) {
      if (iface.subtype(this)) {
        return true;
      }
    }
    return type.hasSuperclass() && type.superclass().subtype(this);
  }

  syn boolean TypeDecl.supertypeInterfaceDecl(InterfaceDecl type) = type == this;
  eq ClassDecl.supertypeInterfaceDecl(InterfaceDecl type) = isObject();
  eq InterfaceDecl.supertypeInterfaceDecl(InterfaceDecl type) {
    if (super.supertypeInterfaceDecl(type)) {
      return true;
    }
    for (InterfaceDecl superinterface : type.superInterfaces()) {
      if (superinterface.subtype(this)) {
        return true;
      }
    }
    return false;
  }

  syn boolean TypeDecl.supertypeArrayDecl(ArrayDecl type) = this == type;
  eq ClassDecl.supertypeArrayDecl(ArrayDecl type) {
    if (super.supertypeArrayDecl(type)) {
      return true;
    }
    return type.hasSuperclass() && type.superclass().subtype(this);
  }
  eq InterfaceDecl.supertypeArrayDecl(ArrayDecl type) {
    if (super.supertypeArrayDecl(type)) {
      return true;
    }
    for (InterfaceDecl iface : type.superInterfaces()) {
      if (iface.subtype(this)) {
        return true;
      }
    }
    return false;
  }
  eq ArrayDecl.supertypeArrayDecl(ArrayDecl type) {
    if (type.elementType().isPrimitive() && elementType().isPrimitive()) {
      return type.dimension() == dimension() && type.elementType() == elementType();
    }
    return type.componentType().subtype(componentType());
  }

  syn boolean TypeDecl.supertypePrimitiveType(PrimitiveType type) = type == this;

  eq ShortType.supertypePrimitiveType(PrimitiveType type) = type.convertibleToShort();
  eq IntType.supertypePrimitiveType(PrimitiveType type) = type.convertibleToInt();
  eq LongType.supertypePrimitiveType(PrimitiveType type) = type.convertibleToLong();
  eq FloatType.supertypePrimitiveType(PrimitiveType type) = type.convertibleToFloat();
  eq DoubleType.supertypePrimitiveType(PrimitiveType type) = type.convertibleToDouble();

  // Widening conversions for primitive types (JLS7 5.1.2):
  syn boolean PrimitiveType.convertibleToShort() = false;
  eq ByteType.convertibleToShort() = true;
  eq ShortType.convertibleToShort() = true;

  syn boolean PrimitiveType.convertibleToInt() = false;
  eq ByteType.convertibleToInt() = true;
  eq ShortType.convertibleToInt() = true;
  eq CharType.convertibleToInt() = true;
  eq IntType.convertibleToInt() = true;

  syn boolean PrimitiveType.convertibleToLong() = false;
  eq ByteType.convertibleToLong() = true;
  eq ShortType.convertibleToLong() = true;
  eq CharType.convertibleToLong() = true;
  eq IntType.convertibleToLong() = true;
  eq LongType.convertibleToLong() = true;

  syn boolean PrimitiveType.convertibleToFloat() = false;
  eq ByteType.convertibleToFloat() = true;
  eq ShortType.convertibleToFloat() = true;
  eq CharType.convertibleToFloat() = true;
  eq IntType.convertibleToFloat() = true;
  eq LongType.convertibleToFloat() = true;
  eq FloatType.convertibleToFloat() = true;

  syn boolean PrimitiveType.convertibleToDouble() = false;
  eq ByteType.convertibleToDouble() = true;
  eq ShortType.convertibleToDouble() = true;
  eq CharType.convertibleToDouble() = true;
  eq IntType.convertibleToDouble() = true;
  eq LongType.convertibleToDouble() = true;
  eq FloatType.convertibleToDouble() = true;
  eq DoubleType.convertibleToDouble() = true;

  syn boolean TypeDecl.supertypeNullType(NullType type) = false;
  eq ReferenceType.supertypeNullType(NullType type) = true;
  eq NullType.supertypeNullType(NullType type) = true;

  syn boolean TypeDecl.supertypeVoidType(VoidType type) = false;
  eq VoidType.supertypeVoidType(VoidType type) = true;
}

aspect NestedTypes {


  eq CompilationUnit.getChild().enclosingType() = null;

  eq TypeDecl.getBodyDecl().enclosingType() = this;

  eq ClassDecl.getImplicitConstructor().enclosingType() = this;

  /**
   * @return {@code true} if this type has an enclosing type which is
   * a subtype of the given type, or equal to the given type.
   */
  syn boolean TypeDecl.hasEnclosingType(TypeDecl type) =
      isInnerType() && (enclosingType().subtype(type)
          || enclosingType().hasEnclosingType(type));

  inh TypeDecl TypeDecl.enclosingType();
  syn TypeDecl TypeDecl.topLevelType() {
    if (isTopLevelType()) {
      return this;
    }
    return enclosingType().topLevelType();
  }

  syn Stmt Expr.enclosingStmt() {
    ASTNode node = this;
    while (node != null && !(node instanceof Stmt)) {
      node = node.getParent();
    }
    return (Stmt) node;
  }

  inh BodyDecl Expr.enclosingBodyDecl();
  inh BodyDecl Stmt.enclosingBodyDecl();
  inh BodyDecl TypeDecl.enclosingBodyDecl();
  inh BodyDecl VariableDeclarator.enclosingBodyDecl();
  eq Program.getChild().enclosingBodyDecl() = null; // TODO(joqivst): throw exception?
  eq CompilationUnit.getChild().enclosingBodyDecl() = null;
  eq BodyDecl.getChild().enclosingBodyDecl() = this;

  // JLS section 8.
  inh boolean TypeDecl.isNestedType();
  eq CompilationUnit.getChild().isNestedType() = false;
  eq TypeDecl.getBodyDecl().isNestedType() = true;

  // JLS section 8.
  syn boolean TypeDecl.isTopLevelType() = !isNestedType();

  // JLS section 8.5.
  inh boolean TypeDecl.isMemberType();
  eq MemberClassDecl.getClassDecl().isMemberType() = true;
  eq MemberInterfaceDecl.getInterfaceDecl().isMemberType() = true;
  eq CompilationUnit.getTypeDecl().isMemberType() = false;
  eq ClassInstanceExpr.getTypeDecl().isMemberType() = false;
  eq Program.getChild().isMemberType() = false;

  // 8.1.2
  syn boolean TypeDecl.isInnerClass() = false;

  eq ClassDecl.isInnerClass() = isNestedType() && !isStatic() && enclosingType().isClassDecl();

  syn boolean TypeDecl.isInnerType() =
      (isLocalClass() || isAnonymous() || (isMemberType() && !isStatic())) && !inStaticContext();

  syn boolean TypeDecl.isInnerTypeOf(TypeDecl typeDecl) =
      typeDecl == this || (isInnerType() && enclosingType().isInnerTypeOf(typeDecl));

  inh boolean TypeDecl.isLocalClass();

  eq CompilationUnit.getChild().isLocalClass() = false;

  eq TypeDecl.getBodyDecl().isLocalClass() = false;

  eq LocalClassDeclStmt.getClassDecl().isLocalClass() = true;

  syn TypeDecl TypeDecl.withinBodyThatSubclasses(TypeDecl type) {
    if (subtype(type)) {
      return this;
    }
    if (!isTopLevelType()) {
      return enclosingType().withinBodyThatSubclasses(type);
    }
    return null;
  }

  syn boolean TypeDecl.encloses(TypeDecl type) = type.enclosedBy(this);

  syn boolean TypeDecl.enclosedBy(TypeDecl type) {
    if (this == type) {
      return true;
    }
    if (isTopLevelType()) {
      return false;
    }
    return enclosingType().enclosedBy(type);
  }

  eq CompilationUnit.getChild().hostPackage() = packageName();

  inh String TypeDecl.hostPackage();
  inh String BodyDecl.hostPackage();
  inh String Expr.hostPackage();
  inh String Variable.hostPackage();

  syn TypeDecl TypeDecl.hostType() = this;

  eq TypeDecl.getChild().hostType() = this;

  eq ClassInstanceExpr.getTypeDecl().hostType() = hostType();
  eq ClassDecl.getSuperClass().hostType() = hostType();
  eq ClassDecl.getImplements().hostType() = hostType();
  eq InterfaceDecl.getSuperInterface().hostType() = hostType();

  eq Program.getChild().hostType() = null;
  eq CompilationUnit.getImportDecl().hostType() = null;

  inh TypeDecl BodyDecl.hostType();
  inh TypeDecl Expr.hostType();
  inh TypeDecl Stmt.hostType();
  inh TypeDecl Declarator.hostType();
  inh TypeDecl ParameterDeclaration.hostType();
}

aspect SuperClasses {

  public boolean ClassDecl.hasSuperclass() {
    return !isObject();
  }

  public TypeDecl ClassDecl.superclass() {
    if (isObject()) {
      return unknownType();
    } else if (hasSuperClass()) {
      return getSuperClass().type();
    } else {
      return typeObject();
    }
  }

  public boolean PrimitiveType.hasSuperclass() {
    return !isObject();
  }

  /**
   * The direct superinterfaces of this type, in the order of the implements clause.
   *
   * @return the interfaces directly implemented by this type.
   */
  syn lazy Collection<InterfaceDecl> TypeDecl.superInterfaces() = Collections.emptyList();

  eq ClassDecl.superInterfaces() {
    if (isObject()) {
      return Collections.emptyList();
    } else {
      Collection<InterfaceDecl> interfaces = new ArrayList<InterfaceDecl>();
      for (Access access : getImplementsList()) {
        TypeDecl implemented = access.type();
        if (implemented.isInterfaceDecl()) {
          // It is an error if implemented is not an interface (error check exists).
          interfaces.add((InterfaceDecl) implemented);
        }
      }
      return interfaces;
    }
  }

  eq InterfaceDecl.superInterfaces() {
    Collection<InterfaceDecl> interfaces = new ArrayList<InterfaceDecl>();
    for (Access access : getSuperInterfaceList()) {
      TypeDecl implemented = access.type();
      if (implemented.isInterfaceDecl()) {
        // It is an error if implemented is not an interface (error check exists).
        interfaces.add((InterfaceDecl) implemented);
      }
    }
    return interfaces;
  }
}

aspect Circularity {
  inh lazy TypeDecl TypeDecl.unknownType();

  syn boolean TypeDecl.isCircular() circular [true] = false;

  eq ClassDecl.isCircular() {
    if (hasSuperClass()) {
      Access a = getSuperClass().lastAccess();
      while (a != null) {
        if (a.type().isCircular()) {
          return true;
        }
        a = (a.isQualified() && a.qualifier().isTypeAccess()) ? (Access) a.qualifier() : null;
      }
    }
    for (int i = 0; i < getNumImplements(); i++) {
      Access a = getImplements(i).lastAccess();
      while (a != null) {
        if (a.type().isCircular()) {
          return true;
        }
        a = (a.isQualified() && a.qualifier().isTypeAccess()) ? (Access) a.qualifier() : null;
      }
    }
    return false;
  }

  eq InterfaceDecl.isCircular() {
    for (int i = 0; i < getNumSuperInterface(); i++) {
      Access a = getSuperInterface(i).lastAccess();
      while (a != null) {
        if (a.type().isCircular()) {
          return true;
        }
        a = (a.isQualified() && a.qualifier().isTypeAccess()) ? (Access) a.qualifier() : null;
      }
    }
    return false;
  }
}
