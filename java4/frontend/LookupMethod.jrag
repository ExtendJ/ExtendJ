/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2014, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.*;
import java.util.ArrayList;

aspect LookupMethod {
  inh MethodDecl MethodDecl.unknownMethod();

  inh MethodDecl MethodAccess.unknownMethod();

  syn Expr Access.unqualifiedScope() = isQualified() ? nestedScope() : this;

  inh Expr Access.nestedScope();

  eq AbstractDot.getChild().nestedScope() = isQualified() ? nestedScope() : this;

  eq Program.getChild().nestedScope() {
    throw new UnsupportedOperationException();
  }

  inh Collection<MethodDecl> Expr.lookupMethod(String name);

  inh Collection<MethodDecl> Stmt.lookupMethod(String name);

  inh Collection<MethodDecl> BodyDecl.lookupMethod(String name);

  inh lazy Collection<MethodDecl> TypeDecl.lookupMethod(String name);

  eq MethodAccess.getArg().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);

  eq ConstructorAccess.getArg().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);

  eq ArrayAccess.getExpr().lookupMethod(String name) = unqualifiedScope().lookupMethod(name);

  eq ArrayTypeWithSizeAccess.getExpr().lookupMethod(String name) =
      unqualifiedScope().lookupMethod(name);

  eq Program.getChild().lookupMethod(String name) = Collections.EMPTY_LIST;

  eq TypeDecl.getBodyDecl(int i).lookupMethod(String name) = unqualifiedLookupMethod(name);

  syn lazy Collection<MethodDecl> TypeDecl.unqualifiedLookupMethod(String name) {
    Collection<MethodDecl> methods = memberMethods(name);
    if (!methods.isEmpty()) {
      return methods;
    }
    if (isInnerType()) {
      return lookupMethod(name);
    }
    return keepStaticMethods(lookupMethod(name));
  }

  // In explicit constructor invocation.
  eq ConstructorDecl.getParsedConstructorInvocation().lookupMethod(String name) {
    Collection<MethodDecl> methods = new ArrayList<MethodDecl>();
    for (MethodDecl m : lookupMethod(name)) {
      if (!hostType().memberMethods(name).contains(m) || m.isStatic()) {
        methods.add(m);
      }
    }
    return methods;
  }

  eq ConstructorDecl.getImplicitConstructorInvocation().lookupMethod(String name) {
    Collection<MethodDecl> methods = new ArrayList<MethodDecl>();
    for (MethodDecl m : lookupMethod(name)) {
      if (!hostType().memberMethods(name).contains(m) || m.isStatic()) {
        methods.add(m);
      }
    }
    return methods;
  }

  /**
   * Returns a filtered collection of methods, keeping only the static methods
   * from the input collection.
   */
  public static Collection<MethodDecl> ASTNode.keepStaticMethods(
      Collection<MethodDecl> methods) {
    Collection<MethodDecl> result = new LinkedList<MethodDecl>();
    for (MethodDecl method : methods) {
      if (method.isStatic()) {
        result.add(method);
      }
    }
    return result;
  }

  eq AbstractDot.getRight().lookupMethod(String name) = getLeft().type().memberMethods(name);

  syn MethodDecl MethodAccess.singleCandidateDecl() {
    MethodDecl result = null;
    for (MethodDecl m : lookupMethod(name())) {
      if (result == null) {
        result = m;
      } else if (m.getNumParameter() == getNumArg() && result.getNumParameter() != getNumArg()) {
        result = m;
      }
    }
    return result;
  }

  protected SimpleSet<MethodDecl> MethodAccess.maxSpecific(Collection<MethodDecl> candidates) {
    SimpleSet<MethodDecl> maxSpecific = emptySet();
    for (MethodDecl decl : candidates) {
      if (applicable(decl) && accessible(decl)) {
        if (maxSpecific.isEmpty()) {
          maxSpecific = maxSpecific.add(decl);
        } else {
          MethodDecl other = maxSpecific.iterator().next();
          if (decl.moreSpecificThan(other)) {
            maxSpecific = decl;
          } else if (!other.moreSpecificThan(decl)) {
            maxSpecific = maxSpecific.add(decl);
          }
        }
      }
    }
    return maxSpecific;
  }

  syn lazy SimpleSet<MethodDecl> MethodAccess.decls() {
    SimpleSet<MethodDecl> maxSpecific = maxSpecific(lookupMethod(name()));
    if (isQualified() ? qualifier().staticContextQualifier() : inStaticContext()) {
      maxSpecific = keepStaticMethods(maxSpecific);
    }
    return maxSpecific;
  }

  syn lazy MethodDecl MethodAccess.decl() {
    SimpleSet<MethodDecl> decls = decls();
    if (decls.isSingleton()) {
      return decls.singletonValue();
    }

    // Only return the first method in case of multiply inherited abstract methods.
    // See JLS section 8.4.6.4.
    boolean allAbstract = true;
    for (MethodDecl m : decls) {
      if (!m.isAbstract() && !m.hostType().isObject()) {
        allAbstract = false;
        break;
      }
    }
    if (decls.size() > 1 && allAbstract) {
      return decls.iterator().next();
    }
    return unknownMethod();
  }

  /**
   * Returns a filtered set of methods, keeping only the static methods
   * from the input set.
   */
  protected static SimpleSet<MethodDecl> MethodAccess.keepStaticMethods(
      SimpleSet<MethodDecl> methods) {
    SimpleSet<MethodDecl> result = emptySet();
    for (MethodDecl method : methods) {
      if (method.isStatic()) {
        result = result.add(method);
      }
    }
    return result;
  }
}

aspect MethodDecl {
  syn String MethodDecl.name() = getID();

  // JLS section 8.4.2.
  syn lazy String MethodDecl.signature() {
    StringBuilder sb = new StringBuilder();
    sb.append(name() + "(");
    for (int i = 0; i < getNumParameter(); i++) {
      if (i != 0) {
        sb.append(", ");
      }
      sb.append(getParameter(i).type().typeName());
    }
    sb.append(")");
    return sb.toString();
  }

  /**
   * @return Method signature, including generic parameters.
   */
  syn String MethodDecl.fullSignature() {
    StringBuilder sb = new StringBuilder();
    sb.append(name() + "(");
    for (int i = 0; i < getNumParameter(); i++) {
      if (i != 0) {
        sb.append(", ");
      }
      sb.append(getParameter(i).type().fullName());
    }
    sb.append(")");
    return sb.toString();
  }


  /**
   * 8.4.2 Method Signature
   * @param other
   * @return {@code true} if the signature of this method is same as the
   * the signature of the argument method
   */
  syn boolean MethodDecl.sameSignature(MethodDecl other) =
      signature().equals(other.signature());

  /**
   * @param m argument method to compare to
   * @return {@code true} if this the argument method is less specific than this
   * and this is not less specific than the argument
   */
  syn boolean MethodDecl.moreSpecificThan(MethodDecl m) =
      m.lessSpecificThan(this) && !this.lessSpecificThan(m);

  /**
   * Caution: a less specific than b does not mean b is not less specific than a!
   * @param m argument method to compare to
   * @return {@code true} if any parameter of this method decl is not a
   * subtype (non-proper subtype) of the corresponding parameter of the
   * argument method
   */
  syn lazy boolean MethodDecl.lessSpecificThan(MethodDecl m) {
    if (getNumParameter() == 0) {
      return false;
    }
    for (int i = 0; i < getNumParameter(); i++) {
      if (!getParameter(i).type().instanceOf(m.getParameter(i).type())) {
        return true;
      }
    }
    return false;
  }

  public boolean MethodAccess.applicable(MethodDecl decl) {
    if (getNumArg() != decl.getNumParameter()) {
      return false;
    }
    if (!name().equals(decl.name())) {
      return false;
    }
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).type().instanceOf(decl.getParameter(i).type())) {
        return false;
      }
    }
    return true;
  }

  syn boolean MethodAccess.accessible(MethodDecl m) {
    if (!isQualified()) {
      return true;
    }
    if (!m.accessibleFrom(hostType())) {
      return false;
    }
    // The method is not accessible if the type is not accessible.
    if (!qualifier().type().accessibleFrom(hostType())) {
      return false;
    }
    // 6.6.2.1 -  include qualifier type for protected access
    if (m.isProtected() && !m.hostPackage().equals(hostPackage())
        && !m.isStatic() && !qualifier().isSuperAccess()) {
      return hostType().mayAccess(this, m);
    }
    return true;
  }

  /**
   * @return true if the method access may access the method
   */
  public boolean TypeDecl.mayAccess(MethodAccess access, MethodDecl method) {
    if (instanceOf(method.hostType())
        && access.qualifier().type().instanceOf(this)) {
      return true;
    }

    if (isNestedType()) {
      return enclosingType().mayAccess(access, method);
    } else {
      return false;
    }
  }

  /**
   * Only check if this method would be able to override other method,
   * not if this method is declared in a subtype of the hostType of
   * other method. NB: does not check for equal signature!
   * @param m other method
   * @return {@code true} of the method could potentially override
   */
  syn lazy boolean MethodDecl.overrideCandidate(MethodDecl m) =
      !isStatic() && !m.isPrivate() && m.accessibleFrom(hostType());

  syn lazy boolean MethodDecl.overrides(MethodDecl m) =
      !isStatic() && !m.isPrivate() && m.accessibleFrom(hostType())
      && hostType().instanceOf(m.hostType()) && m.signature().equals(signature());

  syn lazy boolean MethodDecl.hides(MethodDecl m) =
      isStatic() && !m.isPrivate() && m.accessibleFrom(hostType())
      && hostType().instanceOf(m.hostType()) && m.signature().equals(signature());
}

aspect MemberMethods {
  syn Collection<MethodDecl> TypeDecl.memberMethods(String name) {
    Collection<MethodDecl> methods = methodsNameMap().get(name);
    if (methods != null) {
      return methods;
    } else {
      return Collections.emptyList();
    }
  }
  /**
   * @return map from method name to method declarations
   */
  syn lazy Map<String, Collection<MethodDecl>> TypeDecl.methodsNameMap() {
    Map<String, Collection<MethodDecl>> map = new HashMap<String, Collection<MethodDecl>>();
    for (Iterator<MethodDecl> iter = methodsIterator(); iter.hasNext(); ) {
      MethodDecl m = iter.next();
      Collection<MethodDecl> methods = map.get(m.name());
      if (methods == null) {
        methods = new ArrayList<MethodDecl>(4);
        map.put(m.name(), methods);
      }
      methods.add(m);
    }
    return map;
  }

  protected static void TypeDecl.addMethodToMap(MethodDecl method,
      Map<String, Collection<MethodDecl>> map) {
    String name = method.name();
    Collection<MethodDecl> methods = map.get(name);
    if (methods == null) {
      methods = new ArrayList<MethodDecl>(2);
      map.put(name, methods);
    }
    methods.add(method);
  }

  /**
   * Iterate over all local methods in the type.
   * @return method iterator
   */
  public Iterator<MethodDecl> TypeDecl.localMethodsIterator() {
    return new Iterator<MethodDecl>() {
      private Iterator<SimpleSet<MethodDecl>> outer =
          localMethodsSignatureMap().values().iterator();
      private Iterator inner = null;

      @Override
      public boolean hasNext() {
        if ((inner == null || !inner.hasNext()) && outer.hasNext()) {
          inner = outer.next().iterator();
        }
        return inner == null ? false : inner.hasNext();
      }

      @Override
      public MethodDecl next() {
        return (MethodDecl) inner.next();
      }

      @Override
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }

  syn SimpleSet<MethodDecl> TypeDecl.localMethodsSignature(String signature) {
    SimpleSet<MethodDecl> result = localMethodsSignatureMap().get(signature);
    if (result != null) {
      return result;
    } else {
      return emptySet();
    }
  }

  /**
   * @return a mapping of method signature to method declaration
   */
  syn lazy Map<String, SimpleSet<MethodDecl>> TypeDecl.localMethodsSignatureMap() {
    Map<String, SimpleSet<MethodDecl>> map = new HashMap<String, SimpleSet<MethodDecl>>(
        getNumBodyDecl());
    for (int i = 0; i < getNumBodyDecl(); i++) {
      if (getBodyDecl(i) instanceof MethodDecl) {
        MethodDecl decl = (MethodDecl) getBodyDecl(i);
        putSimpleSetElement(map, decl.signature(), decl);
      }
    }
    return map;
  }

  /**
   * @return iterator for iterating over all method declarations in implemented
   * interfaces
   */
  public Iterator<MethodDecl> TypeDecl.interfacesMethodsIterator() {
    return new Iterator<MethodDecl>() {
      private Iterator<SimpleSet<MethodDecl>> outer =
          interfacesMethodsSignatureMap().values().iterator();
      private Iterator inner = null;

      @Override
      public boolean hasNext() {
        if ((inner == null || !inner.hasNext()) && outer.hasNext()) {
          inner = outer.next().iterator();
        }
        return inner == null ? false : inner.hasNext();
      }

      @Override
      public MethodDecl next() {
        return (MethodDecl) inner.next();
      }

      @Override
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }

  syn SimpleSet<MethodDecl> ClassDecl.interfacesMethodsSignature(String signature) {
    SimpleSet<MethodDecl> result = interfacesMethodsSignatureMap().get(signature);
    if (result != null) {
      return result;
    } else {
      return emptySet();
    }
  }

  /**
   * Map signature to set of method declarations.
   */
  syn lazy Map<String, SimpleSet<MethodDecl>> TypeDecl.interfacesMethodsSignatureMap() {
    Map<String, SimpleSet<MethodDecl>> map = new HashMap<String, SimpleSet<MethodDecl>>();
    for (Iterator<TypeDecl> iter = interfacesIterator(); iter.hasNext(); ) {
      InterfaceDecl iface = (InterfaceDecl) iter.next();
      for (Iterator<MethodDecl> i2 = iface.localMethodsIterator(); i2.hasNext(); ) {
        MethodDecl m = i2.next();
        putSimpleSetElement(map, m.signature(), m);
      }
      for (SimpleSet<MethodDecl> set : iface.interfacesMethodsSignatureMap().values()) {
        for (MethodDecl m : set) {
          putSimpleSetElement(map, m.signature(), m);
        }
      }
    }
    return map;
  }

  /**
   * Iterate over all member methods in the type.
   * @return method iterator
   */
  public Iterator<MethodDecl> TypeDecl.methodsIterator() {
    return new Iterator<MethodDecl>() {
      private Iterator<SimpleSet<MethodDecl>> outer = methodsSignatureMap().values().iterator();
      private Iterator inner = null;

      @Override
      public boolean hasNext() {
        if ((inner == null || !inner.hasNext()) && outer.hasNext()) {
          inner = outer.next().iterator();
        }
        return inner != null ? inner.hasNext() : false;
      }

      @Override
      public MethodDecl next() {
        return (MethodDecl) inner.next();
      }

      @Override
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }

  syn SimpleSet<MethodDecl> TypeDecl.methodsSignature(String signature) {
    SimpleSet<MethodDecl> result = methodsSignatureMap().get(signature);
    if (result != null) {
      return result;
    } else {
      return emptySet();
    }
  }

  /** Maps signature String to SimpleSet. */
  syn lazy Map<String, SimpleSet<MethodDecl>> TypeDecl.methodsSignatureMap() =
      localMethodsSignatureMap();

  eq ClassDecl.methodsSignatureMap() {
    Map<String, SimpleSet<MethodDecl>> localMap = localMethodsSignatureMap();
    Map<String, SimpleSet<MethodDecl>> map = new HashMap<String, SimpleSet<MethodDecl>>(localMap);
    if (hasSuperclass()) {
      for (Iterator<MethodDecl> iter = superclass().methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = iter.next();
        if (!m.isPrivate() && m.accessibleFrom(this) && !localMap.containsKey(m.signature())) {
          putSimpleSetElement(map, m.signature(), m);
        }
      }
    }
    for (Iterator<MethodDecl> iter = interfacesMethodsIterator(); iter.hasNext(); ) {
      MethodDecl m = iter.next();
      if (m.accessibleFrom(this) && !localMap.containsKey(m.signature())) {
        if (allMethodsAbstract((SimpleSet<MethodDecl>) map.get(m.signature()))) {
          putSimpleSetElement(map, m.signature(), m);
        }
      }
    }
    return map;
  }

  eq InterfaceDecl.methodsSignatureMap() {
    Map<String, SimpleSet<MethodDecl>> localMap = localMethodsSignatureMap();
    Map<String, SimpleSet<MethodDecl>> map = new HashMap<String, SimpleSet<MethodDecl>>(localMap);
    for (Iterator<MethodDecl> iter = interfacesMethodsIterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl) iter.next();
      if (m.accessibleFrom(this) && !localMap.containsKey(m.signature())) {
        putSimpleSetElement(map, m.signature(), m);
      }
    }
    for (Iterator<MethodDecl> iter = typeObject().methodsIterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl) iter.next();
      if (m.isPublic() && !map.containsKey(m.signature())) {
        putSimpleSetElement(map, m.signature(), m);
      }
    }
    return map;
  }

  /**
   * Utility method to add a single item in a SimpleSet based signature map.
   */
  protected static <E> void ASTNode.putSimpleSetElement(Map<String, SimpleSet<E>> map,
      String key, E value) {
    SimpleSet<E> result = map.get(key);
    if (result == null) {
      result = emptySet();
    }
    map.put(key, result.add(value));
  }

  protected boolean TypeDecl.allMethodsAbstract(SimpleSet<MethodDecl> methods) {
    if (methods == null) {
      return true;
    }
    for (MethodDecl method : methods) {
      if (!method.isAbstract()) {
        return false;
      }
    }
    return true;
  }
}

aspect AncestorMethods {
  /**
   * Finds methods with the same signature declared in ancestors types.  This
   * is used when checking correct overriding, hiding, and implementation of
   * abstract methods.
   */
  syn lazy SimpleSet<MethodDecl> TypeDecl.ancestorMethods(String signature) = emptySet();

  eq ClassDecl.ancestorMethods(String signature) {
    SimpleSet<MethodDecl> result = emptySet();
    if (hasSuperclass()) {
      for (MethodDecl method : superclass().localMethodsSignature(signature)) {
        if (!method.isPrivate()) {
          result = result.add(method);
        }
      }
    }
    // Always add interface methods to the ancestorMethods set so that their
    // access modifiers are checked against local overriding methods.
    for (MethodDecl method : interfacesMethodsSignature(signature)) {
      result = result.add(method);
    }
    if (!hasSuperclass()) {
      return result;
    }
    if (result.isSingleton()) {
      MethodDecl m = result.singletonValue();
      if (!m.isAbstract()) {
        boolean done = true;
        for (MethodDecl n : superclass().ancestorMethods(signature)) {
          if (n.isPrivate() || !n.accessibleFrom(m.hostType())) {
            done = false;
          }
        }
        if (done) {
          return result;
        }
      }
    }
    for (MethodDecl m : superclass().ancestorMethods(signature)) {
      result = result.add(m);
    }
    return result;
  }

  eq InterfaceDecl.ancestorMethods(String signature) {
    SimpleSet<MethodDecl> result = emptySet();
    for (Iterator<TypeDecl> outerIter = interfacesIterator(); outerIter.hasNext(); ) {
      TypeDecl typeDecl = outerIter.next();
      for (MethodDecl m : typeDecl.methodsSignature(signature)) {
        result = result.add(m);
      }
    }
    if (!interfacesIterator().hasNext()) {
      for (MethodDecl m : typeObject().methodsSignature(signature)) {
        if (m.isPublic()) {
          result = result.add(m);
        }
      }
    }
    return result;
  }
}
