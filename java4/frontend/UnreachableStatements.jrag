/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect UnreachableStatements {

  Stmt contributes
      error("statement is unreachable")
      when !reachable() && reportUnreachable()
      to CompilationUnit.problems();

  StaticInitializer contributes
      errorf("static initializer in %s cannot complete normally", hostType().fullName())
      when !getBlock().canCompleteNormally()
      to CompilationUnit.problems();

  InstanceInitializer contributes
      errorf("instance initializer in %s cannot complete normally", hostType().fullName())
      when !getBlock().canCompleteNormally()
      to CompilationUnit.problems();

  inh boolean Stmt.reachable();
  inh boolean Block.reachable();
  syn lazy boolean Stmt.canCompleteNormally() = true;

  eq ConstructorDecl.getParsedConstructorInvocation().reachable() = true;
  eq ConstructorDecl.getImplicitConstructorInvocation().reachable() = true;

  // NB: we only check the parsed constructor invocation since an implicit one
  // should always complete normally!
  eq ConstructorDecl.getBlock().reachable() =
      hasParsedConstructorInvocation()
      ? getParsedConstructorInvocation().canCompleteNormally()
      : true;

  eq MethodDecl.getBlock().reachable() = true;
  eq StaticInitializer.getBlock().reachable() = true;
  eq InstanceInitializer.getBlock().reachable() = true;

  eq Block.canCompleteNormally() =
      getNumStmt() == 0
      ? reachable()
      : getStmt(getNumStmt() - 1).canCompleteNormally();
  eq Block.getStmt(int index).reachable() =
      index == 0
      ? reachable()
      : getStmt(index-1).canCompleteNormally();

  eq LocalClassDeclStmt.canCompleteNormally() = reachable();

  eq VarDeclStmt.canCompleteNormally() = reachable();

  eq EmptyStmt.canCompleteNormally() = reachable();

  eq LabeledStmt.canCompleteNormally() = getStmt().canCompleteNormally() || reachableBreak();

  eq LabeledStmt.getStmt().reachable() = reachable();

  syn lazy boolean BranchTargetStmt.reachableBreak() {
    for (BreakStmt stmt : targetBreaks()) {
      if (stmt.reachable()) {
        return true;
      }
    }
    return false;
  }

  eq ExprStmt.canCompleteNormally() = reachable();

  syn boolean SwitchStmt.lastStmtCanCompleteNormally() = getBlock().canCompleteNormally();

  syn boolean SwitchStmt.noStmts() {
    for (int i = 0; i < getBlock().getNumStmt(); i++) {
      if (!(getBlock().getStmt(i) instanceof Case)) {
        return false;
      }
    }
    return true;
  }

  syn boolean SwitchStmt.noStmtsAfterLastLabel() =
      getBlock().getNumStmt() > 0
      && getBlock().getStmt(getBlock().getNumStmt()-1) instanceof Case;

  syn boolean SwitchStmt.noDefaultLabel() {
    for (int i = 0; i < getBlock().getNumStmt(); i++) {
      if (getBlock().getStmt(i) instanceof DefaultCase) {
        return false;
      }
    }
    return true;
  }

  eq SwitchStmt.canCompleteNormally() =
      lastStmtCanCompleteNormally() || noStmts()
      || noStmtsAfterLastLabel()
      || noDefaultLabel() || reachableBreak();

  eq SwitchStmt.getBlock().reachable() = reachable();

  syn boolean Case.reachable() =
      getParent().getParent() instanceof Block && ((Block) getParent().getParent()).reachable();

  eq WhileStmt.canCompleteNormally() =
      reachable() && (!getCondition().isConstant() || !getCondition().isTrue()) || reachableBreak();

  eq WhileStmt.getStmt().reachable() = reachable() && !getCondition().isFalse();

  eq DoStmt.canCompleteNormally() =
      getStmt().canCompleteNormally() && (!getCondition().isConstant() || !getCondition().isTrue())
      || reachableContinue() && (!getCondition().isConstant() || !getCondition().isTrue())
      || reachableBreak();

  syn lazy boolean BranchTargetStmt.reachableContinue() {
    for (Stmt stmt : targetContinues()) {
      if (stmt.reachable()) {
        return true;
      }
    }
    return false;
  }

  eq DoStmt.getStmt().reachable() = reachable();

  eq ForStmt.canCompleteNormally() =
      reachable() && hasCondition()
      && (!getCondition().isConstant() || !getCondition().isTrue()) || reachableBreak();

  eq ForStmt.getStmt().reachable() =
      reachable()
      && (!hasCondition() || (!getCondition().isConstant() || !getCondition().isFalse()));

  eq BreakStmt.canCompleteNormally() = false;
  eq ContinueStmt.canCompleteNormally() = false;
  eq ReturnStmt.canCompleteNormally() = false;
  eq ThrowStmt.canCompleteNormally() = false;

  eq SynchronizedStmt.canCompleteNormally() = getBlock().canCompleteNormally();
  eq SynchronizedStmt.getBlock().reachable() = reachable();

  eq TryStmt.canCompleteNormally() {
     boolean anyCatchClauseCompleteNormally = false;
     for (int i = 0; i < getNumCatchClause() && !anyCatchClauseCompleteNormally; i++) {
       anyCatchClauseCompleteNormally = getCatchClause(i).getBlock().canCompleteNormally();
     }
     return (getBlock().canCompleteNormally() || anyCatchClauseCompleteNormally)
       && (!hasNonEmptyFinally() || getFinally().canCompleteNormally());
  }
  eq TryStmt.getBlock().reachable() = reachable();
  eq TryStmt.getFinally().reachable() = reachable();
  eq BasicCatch.getBlock().reachable() = reachableCatchClause(getParameter().type());

  /**
   * @return true if an exception of type exceptionType is catchable by the catch clause
   */
  inh lazy boolean CatchClause.reachableCatchClause(TypeDecl exceptionType);
  eq TryStmt.getCatchClause(int childIndex).reachableCatchClause(TypeDecl exceptionType) {
    for (int i = 0; i < childIndex; i++) {
      if (getCatchClause(i).handles(exceptionType)) {
        return false;
      }
    }
    if (catchableException(exceptionType)) {
      return true;
    }
    if (exceptionType.mayCatch(typeError()) || exceptionType.mayCatch(typeRuntimeException())) {
      return true;
    }
    return false;
  }
  inh lazy TypeDecl TryStmt.typeError();
  inh lazy TypeDecl TryStmt.typeRuntimeException();

  eq IfStmt.canCompleteNormally() =
    (reachable() && !hasElse())
    || (getThen().canCompleteNormally() || (hasElse() && getElse().canCompleteNormally()));
  eq IfStmt.getThen().reachable() = reachable();
  eq IfStmt.getElse().reachable() = reachable();


  inh boolean Stmt.reportUnreachable();
  eq Block.getStmt(int i).reportUnreachable() = i == 0 ? reachable() : getStmt(i-1).reachable();
  eq IfStmt.getThen().reportUnreachable() = reachable();
  eq IfStmt.getElse().reportUnreachable() = reachable();
  eq ForStmt.getStmt().reportUnreachable() = reachable();
  eq DoStmt.getStmt().reportUnreachable() = reachable();
  eq WhileStmt.getStmt().reportUnreachable() = reachable();
  eq TryStmt.getBlock().reportUnreachable() = reachable();
  eq TryStmt.getCatchClause().reportUnreachable() = reachable();
  eq TryStmt.getFinally().reportUnreachable() = reachable();
  eq SynchronizedStmt.getBlock().reportUnreachable() = reachable();
  eq SwitchStmt.getBlock().reportUnreachable() = reachable();
  eq TypeDecl.getChild().reportUnreachable() = true;
  eq Program.getChild().reportUnreachable() = true;
}
