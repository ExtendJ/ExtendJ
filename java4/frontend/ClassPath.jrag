/* Copyright (c) 2005-2008, Torbjorn Ekman
 *               2015-2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.IOException;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.Collection;
import java.util.ArrayList;
import beaver.*;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;

aspect ClassPath {
  /** Interface for ExtendJ bytecode reader adapter. */
  public interface BytecodeReader {
    CompilationUnit read(InputStream is, String fullName, Program p)
        throws FileNotFoundException, IOException;
  }

  /** Interface for ExtendJ Java parser adapter. */
  public interface JavaParser {
    CompilationUnit parse(InputStream is, String fileName)
        throws IOException, beaver.Parser.Exception;
  }

  protected BytecodeReader Program.bytecodeReader = defaultBytecodeReader();

  public void Program.initBytecodeReader(BytecodeReader r) {
    bytecodeReader = r;
  }

  public static BytecodeReader Program.defaultBytecodeReader() {
    return new BytecodeReader() {
      @Override
      public CompilationUnit read(InputStream is, String fullName, Program p)
          throws FileNotFoundException, IOException {
        return new BytecodeParser(is, fullName).parse(null, null, p);
      }
    };
  }

  protected JavaParser Program.javaParser = defaultJavaParser();

  public void Program.initJavaParser(JavaParser p) {
    javaParser = p;
  }

  public static JavaParser Program.defaultJavaParser() {
    return new JavaParser() {
      @Override
      public CompilationUnit parse(InputStream is, String fileName)
          throws IOException, beaver.Parser.Exception {
        return new org.extendj.parser.JavaParser().parse(is, fileName);
      }
    };
  }

  /**
   * @return The path to the source file, or the path to the file inside a Jar
   * file.
   */
  syn String CompilationUnit.relativeName() = getClassSource().relativeName();

  /**
   * @return The path to the source file, or the enclosing Jar file.
   */
  syn String CompilationUnit.pathName() = getClassSource().pathName();

  /**
   * @return {@code true} if this compilation unit was parsed from source.
   */
  syn boolean CompilationUnit.fromSource() = fromSource;

  /** @return the enclosing compilation unit. */
  inh CompilationUnit ASTNode.compilationUnit();

  eq CompilationUnit.getChild().compilationUnit() = this;

  eq Program.getChild().compilationUnit() = null; // No enclosing compilation unit found.

  /**
   * Parse the source file and add the compilation unit to the list of
   * compilation units in the program.
   *
   * <p>This method modifies the AST. It may not be called after any attribute
   * evaluation starts.
   *
   * @param fileName file name of the source file
   * @return The CompilationUnit representing the source file,
   * or <code>null</code> if the source file could not be parsed
   */
  public CompilationUnit Program.addSourceFile(String fileName) throws IOException {
    SourceFilePath pathPart = new SourceFilePath(fileName);
    CompilationUnit cu = pathPart.getCompilationUnit(this, fileName);
    if (cu != emptyCompilationUnit()) {
      classPath.addPackage(cu.packageName());
      // In parallel execution, multiple source files could be added concurrently.
      // However, the Program class is not thread-safe for modification, so we use
      // a synchronized block to ensure sequential updating of the Program node.
      synchronized (this) {
        addCompilationUnit(cu);
      }
    }
    return cu;
  }

  /**
   * Creates an iterator to iterate over compilation units parsed from source files.
   */
  public Iterator<CompilationUnit> Program.compilationUnitIterator() {
    return new Iterator<CompilationUnit>() {
      int index = 0;

      @Override
      public boolean hasNext() {
        return index < getNumCompilationUnit();
      }

      @Override
      public CompilationUnit next() {
        if (getNumCompilationUnit() == index) {
          throw new java.util.NoSuchElementException();
        }
        return getCompilationUnit(index++);
      }

      @Override
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }

  /**
   * Get the input stream for a compilation unit specified using a canonical
   * name. This is used by the bytecode reader to load nested types.
   * @param name The canonical name of the compilation unit.
   */
  public InputStream Program.getInputStream(String name) {
    return classPath.getInputStream(name);
  }

  private final ClassPath Program.classPath = new ClassPath(this);

  public class ClassPath {

    /**
     * Tracks all currently available packages in the program classpath.
     */
    private Set<String> packages = new HashSet<String>();

    private boolean pathsInitialized = false;

    private ArrayList<PathPart> classPath = new ArrayList<PathPart>();

    private ArrayList<PathPart> sourcePath = new ArrayList<PathPart>();

    private final Program program;

    public ClassPath(Program program) {
      this.program = program;
    }

    /**
     * Used to make the classpath empty, in case you want more control
     * over the classpath initialization. Usually you would use
     * addClassPath to manually setup the classpath after this.
     */
    public synchronized void initEmptyPaths() {
      pathsInitialized = true;
    }

    /**
     * Set up the classpaths (standard + boot classpath).
     */
    private synchronized void initPaths() {
      if (pathsInitialized) {
        return;
      }
      pathsInitialized = true;

      ArrayList<String> classPaths = new ArrayList<String>();
      ArrayList<String> sourcePaths = new ArrayList<String>();

      String bootclasspath;
      if (program.options().hasValueForOption("-bootclasspath")) {
        bootclasspath = program.options().getValueForOption("-bootclasspath");
      } else {
        bootclasspath = System.getProperty("sun.boot.class.path", "");
      }
      for (String path : bootclasspath.split(File.pathSeparator)) {
        classPaths.add(path);
      }

      String extdirs;
      if (program.options().hasValueForOption("-extdirs")) {
        extdirs = program.options().getValueForOption("-extdirs");
      } else {
        extdirs = System.getProperty("java.ext.dirs", "");
      }
      for (String path : extdirs.split(File.pathSeparator)) {
        File dir = new File(path);
        if (dir.isDirectory()) {
          for (File jar : dir.listFiles()) {
            if (jar.getName().toLowerCase().endsWith(".jar")) {
              classPaths.add(jar.getPath());
            }
          }
        }
      }

      String[] userClasses;
      if (program.options().hasValueForOption("-classpath")) {
        userClasses = program.options().getValueForOption("-classpath").split(File.pathSeparator);
      } else if (program.options().hasValueForOption("-cp")) {
        userClasses = program.options().getValueForOption("-cp").split(File.pathSeparator);
      } else {
        userClasses = new String[] { "." };
      }
      if (!program.options().hasValueForOption("-sourcepath")) {
        for (String path : userClasses) {
          classPaths.add(path);
          sourcePaths.add(path);
        }
      } else {
        for (String path : userClasses) {
          classPaths.add(path);
        }
        userClasses = program.options().getValueForOption("-sourcepath").split(File.pathSeparator);
        for (String path : userClasses) {
          sourcePaths.add(path);
        }
      }

      for (String path : classPaths) {
        PathPart part = PathPart.createClassPath(path);
        if (part != null) {
          addClassPath(part);
        } else if (program.options().verbose()) {
          System.out.println("Warning: Could not use " + path + " as class path");
        }
      }
      for (String path : sourcePaths) {
        PathPart part = PathPart.createSourcePath(path);
        if (part != null) {
          addSourcePath(part);
        } else if(program.options().verbose()) {
          System.out.println("Warning: Could not use " + path + " as source path");
        }
      }
    }

    /**
     * Get the input stream for a compilation unit specified using a canonical
     * name. This is used by the bytecode reader to load nested types.
     * @param name The canonical name of the compilation unit.
     */
    public synchronized InputStream getInputStream(String name) {
      try {
        for (PathPart part : classPath) {
          ClassSource source = part.findSource(name);
          if (source != ClassSource.NONE) {
            return source.openInputStream();
          }
        }
      } catch(IOException e) {
      }
      throw new Error("Could not find nested type " + name);
    }

    /**
     * Load a compilation unit from disk based on a classname. A class file is parsed if one exists
     * matching the classname that is not older than a corresponding source file, otherwise the
     * source file is selected.
     *
     * <p>This method is called by the LibCompilationUnit NTA.  We rely on the result of this method
     * being cached because it will return a newly parsed compilation unit each time it is called.
     *
     * @return the loaded compilation unit, or the provided default compilation unit if no matching
     * compilation unit was found.
     */
    public CompilationUnit getCompilationUnit(String typeName,
        CompilationUnit defaultCompilationUnit) {
      try {
        initPaths();
        ClassSource sourcePart = ClassSource.NONE;
        ClassSource classPart = ClassSource.NONE;
        for (PathPart part : sourcePath) {
          sourcePart = part.findSource(typeName);
          if (sourcePart != ClassSource.NONE) {
            break;
          }
        }
        for (PathPart part : classPath) {
          classPart = part.findSource(typeName);
          if (classPart != ClassSource.NONE) {
            break;
          }
        }

        if (sourcePart != ClassSource.NONE && (classPart == ClassSource.NONE
              || classPart.lastModified() < sourcePart.lastModified())) {
          CompilationUnit unit = sourcePart.parseCompilationUnit(program);
          int index = typeName.lastIndexOf('.');
          if (index == -1) {
            return unit;
          }
          String pkgName = typeName.substring(0, index);
          if (pkgName.equals(unit.getPackageDecl())) {
            return unit;
          }
        }
        if (classPart != ClassSource.NONE) {
          CompilationUnit unit = classPart.parseCompilationUnit(program);
          int index = typeName.lastIndexOf('.');
          if (index == -1) {
            return unit;
          }
          String pkgName = typeName.substring(0, index);
          if (pkgName.equals(unit.getPackageDecl())) {
            return unit;
          }
        }
        return defaultCompilationUnit;
      } catch (IOException e) {
        // Attributes can't throw checked exceptions, so convert this to an Error.
        throw new Error(e);
      }
    }

    /**
     * Add a package name to available package set.
     */
    public synchronized void addPackage(String packageName) {
      int end = packageName.length();
      while (end > 0 && packages.add(packageName.substring(0, end))) {
        end = packageName.lastIndexOf('.', end - 1);
      }
    }

    /**
     * Add a path part to the library class path.
     */
    public synchronized void addClassPath(PathPart pathPart) {
      classPath.add(pathPart);
    }

    /**
     * Add a path part to the user class path.
     */
    public synchronized void addSourcePath(PathPart pathPart) {
      sourcePath.add(pathPart);
    }

    /**
     * Quick pass, slow fail. Cache existing package names in a concurrent set.
     * @return <code>true</code> if there is a package with the given name on
     * the classpath
     */
    public synchronized boolean isPackage(String packageName) {
      initPaths();
      if (packages.contains(packageName)) {
        return true;
      }
      for (PathPart part : classPath) {
        if (part.hasPackage(packageName)) {
          addPackage(packageName);
          return true;
        }
      }
      for (PathPart part : sourcePath) {
        if (part.hasPackage(packageName)) {
          addPackage(packageName);
          return true;
        }
      }
      return false;
    }

    /**
     * @return a copy of the source path parts
     */
    public synchronized Collection<PathPart> getSourcePath() {
      return new ArrayList<PathPart>(sourcePath);
    }

    /**
     * @return a copy of the class path parts
     */
    public synchronized Collection<PathPart> getClassPath() {
      return new ArrayList<PathPart>(classPath);
    }
  }

  /**
   * This is a helper class used to ensure that only one thread
   * parses a single demand loaded compilation unit.
   *
   * <p>A thread calls the first() method to check if it should parse the
   * compilation unit. If first() returns {@code true} then the thread proceeds
   * to parse the compilation unit and stores the result by calling set(). If
   * first() instead returns {@code false} the thread will call get() which
   * waits until the result is available.
   */
  class ParseSynchronizer {
    private AtomicBoolean first = new AtomicBoolean(true);
    private CompilationUnit result = null;

    /**
     * @return {@code true} in only one thread calling this method.
     * Returns {@code false} in all other threads.
     */
    public boolean first() {
      return first.getAndSet(false);
    }

    /**
     * Share a parsed compilation unit with other threads.
     * The compilation unit must not be null!
     */
    public synchronized void set(CompilationUnit result) {
      this.result = result;
      notifyAll();
    }

    /**
     * Read the stored compilation unit. This blocks until the result has been
     * stored by another thread.
     */
    public synchronized CompilationUnit get() {
      try {
        while (result == null) {
          wait();
        }
      } catch (InterruptedException e) {
      }
      return result;
    }
  }

  /**
   * Cache for parsed compilation units.
   *
   * <p>Should only be accessed via Program.getCompilationUnit(String).
   */
  private ConcurrentMap<String, ParseSynchronizer> Program.parseLocks =
      new ConcurrentSkipListMap<String, ParseSynchronizer>();

  /**
   * Load a compilation unit from disk, selecting a class file
   * if one exists that is not older than a corresponding source
   * file, otherwise the source file is selected.
   *
   * <p>This attribute is used by the LibCompilationUnit NTA.  Internally this
   * attribute memoizes its results via the parseLocks map.
   *
   * @return the loaded compilation unit, or the empty compilation unit if no
   * compilation unit was found.
   */
  syn lazy CompilationUnit Program.getCompilationUnit(String typeName) {
    final ParseSynchronizer synchronizer;
    ParseSynchronizer old = parseLocks.get(typeName);
    if (old != null) {
      synchronizer = old;
    } else {
      ParseSynchronizer fresh = new ParseSynchronizer();
      old = parseLocks.putIfAbsent(typeName, fresh);
      if (old == null) {
        synchronizer = fresh;
      } else {
        synchronizer = old;
      }
    }
    if (synchronizer.first()) {
      CompilationUnit result = classPath.getCompilationUnit(typeName, emptyCompilationUnit());
      synchronizer.set(result);
      return result;
    } else {
      return synchronizer.get();
    }
  }

  /**
   * @return <code>true</code> if there is a package with the given name on
   * the classpath
   */
  public boolean Program.isPackage(String packageName) {
    return classPath.isPackage(packageName);
  }

  private ClassSource CompilationUnit.classSource = ClassSource.NONE;

  private boolean CompilationUnit.fromSource = false;

  public void CompilationUnit.setClassSource(ClassSource source) {
    this.classSource = source;
  }

  public ClassSource CompilationUnit.getClassSource() {
    return classSource;
  }

  public void CompilationUnit.setFromSource(boolean value) {
    this.fromSource = value;
  }

  /**
   * Add a path part to the library class path.
   */
  public void Program.addClassPath(PathPart pathPart) {
    classPath.addClassPath(pathPart);
  }

  /**
   * Add a path part to the user class path.
   */
  public void Program.addSourcePath(PathPart pathPart) {
    classPath.addSourcePath(pathPart);
  }
}
