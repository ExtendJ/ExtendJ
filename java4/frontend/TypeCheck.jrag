/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect TypeCheck {
  syn boolean Expr.isVariable() = false;
  eq Dot.isVariable() = lastAccess().isVariable();
  eq VarAccess.isVariable() = true;
  eq ArrayAccess.isVariable() = true;
  eq ParExpr.isVariable() = getExpr().isVariable();

  // JLS section 5.2.
  VariableDeclarator contributes
      errorf("can not assign variable %s of type %s a value of type %s",
          name(), type().typeName(), getInit().type().typeName())
      when hasInit()
          && !getInit().type().assignConversionTo(type(), getInit())
          && !getInit().type().isUnknown()
      to CompilationUnit.problems();

  // JLS section 5.2.
  FieldDeclarator contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> FieldDeclarator.typeProblems() {
    if (hasInit()) {
      TypeDecl source = getInit().type();
      TypeDecl dest = type();
      if (!source.assignConversionTo(dest, getInit())
          && !getInit().type().isUnknown()) {
        return Collections.singletonList(errorf(
            "can not assign field %s of type %s a value of type %s",
            name(), dest.typeName(), source.typeName()));
      }
    }
    return Collections.emptyList();
  }

  // JLS section 5.2:  Assignment Conversion.
  eq AssignSimpleExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getDest().isVariable()) {
      problems.add(error("left hand side is not a variable"));
    } else if (!getSource().type().assignConversionTo(getDest().type(), getSource())
        && !getSource().type().isUnknown()) {
      problems.add(errorf("can not assign %s of type %s a value of type %s",
          getDest().prettyPrint(), getDest().type().typeName(), getSource().type().typeName()));
    }
    return problems;
  }

  AssignExpr contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> AssignExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getDest().isVariable()) {
      return Collections.singletonList((error("left hand side is not a variable")));
    } else {
      TypeDecl source = getSource().type();
      TypeDecl dest = getDest().type();
      if (getSource().type().isPrimitive() && getDest().type().isPrimitive()) {
        return Collections.emptyList();
      }
      return Collections.singletonList(errorf("can not assign %s of type %s a value of type %s",
          getDest().prettyPrint(), getDest().type().typeName(), getSource().type().typeName()));
    }
  }

  eq AssignMultiplicativeExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>(super.typeProblems());
    if (getSource().type().isBoolean() || getDest().type().isBoolean()) {
      problems.add(error("Multiplicative operators do not operate on boolean types"));
    }
    return problems;
  }

  eq AssignPlusExpr.typeProblems() {
    if (!getDest().isVariable()) {
      return Collections.singletonList(error("left hand side is not a variable"));
    } else if (getSource().type().isUnknown() || getDest().type().isUnknown()) {
      return Collections.emptyList();
    } else if (getDest().type().isString() && !(getSource().type().isVoid())) {
      return Collections.emptyList();
    } else if (getSource().type().isBoolean() || getDest().type().isBoolean()) {
      return Collections.singletonList(error("Operator + does not operate on boolean types"));
    } else if (getSource().type().isPrimitive() && getDest().type().isPrimitive()) {
      return Collections.emptyList();
    } else {
      return Collections.singletonList(errorf("can not assign %s of type %s a value of type %s",
          getDest().prettyPrint(), getDest().type().typeName(), getSource().type().typeName()));
    }
  }

  eq AssignMinusExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>(super.typeProblems());
    if (getSource().type().isBoolean() || getDest().type().isBoolean()) {
      problems.add(error("Operator - does not operate on boolean types"));
    }
    return problems;
  }

  eq AssignShiftExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>(super.typeProblems());
    if (!getSource().type().isIntegralType() || !getDest().type().isIntegralType()) {
      problems.add(error("Shift operators only operate on integral types"));
    }
    return problems;
  }

  syn Collection<Problem> AssignBitwiseExpr.typeProblems() {
    TypeDecl source = getSource().type();
    TypeDecl dest = getDest().type();
    if (source.isIntegralType() && dest.isIntegralType()) {
      return super.typeProblems();
    } else if (source.isBoolean() && dest.isBoolean()) {
      return super.typeProblems();
    } else {
      return Collections.singletonList(
          error("Operator only operates on integral and boolean types"));
    }
  }

  // 5.3 Method Invocation Conversion
  MethodAccess contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> MethodAccess.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    for (int i = 0; i < getNumArg(); ++i) {
      if (getArg(i).type().isVoid()) {
        problems.add(errorf("expression '%s' has type void and is not a valid method argument",
            getArg(i).prettyPrint()));
      }
    }
    for (int i = 0; i < decl().getNumParameter(); i++) {
      TypeDecl exprType = getArg(i).type();
      TypeDecl parmType = decl().getParameter(i).type();
      if (!exprType.methodInvocationConversionTo(parmType)
          && !exprType.isUnknown() && !parmType.isUnknown()) {
        problems.add(errorf(
            "argument '%s' of type %s is not compatible with the method parameter type %s",
            getArg(i).prettyPrint(), exprType.typeName(), parmType.typeName()));
      }
    }
    return problems;
  }

  // 15.13
  ArrayAccess contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> ArrayAccess.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (isQualified() && !qualifier().type().isArrayDecl() && !qualifier().type().isUnknown()) {
      problems.add(errorf("the type %s of the indexed element is not an array",
            qualifier().type().name()));
    }
    if (!getExpr().type().unaryNumericPromotion().isInt() || !getExpr().type().isIntegralType()) {
      problems.add(errorf("array index must be int after unary numeric promotion which %s is not",
          getExpr().type().typeName()));
    }
    return problems;
  }

  ArrayInit contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> ArrayInit.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    TypeDecl initializerType = declType().componentType();
    if (initializerType.isUnknown()) {
      problems.add(error("the dimension of the initializer is larger than the expected dimension"));
    }
    for (int i = 0; i < getNumInit(); i++) {
      Expr e = getInit(i);
      if (!e.type().assignConversionTo(initializerType, e)) {
        problems.add(errorf("the type %s of the initializer is not compatible with %s",
            e.type().name(), initializerType.name()));
      }
    }
    return problems;
  }

  MultiplicativeExpr contributes each typeProblems() to CompilationUnit.problems();

  // 15.17
  syn Collection<Problem> MultiplicativeExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getLeftOperand().type().isNumericType()) {
      problems.add(errorf("%s is not numeric", getLeftOperand().type().typeName()));
    }
    if (!getRightOperand().type().isNumericType()) {
      problems.add(errorf("%s is not numeric", getRightOperand().type().typeName()));
    }
    return problems;
  }

  AdditiveExpr contributes each typeProblems() to CompilationUnit.problems();

  // 15.18
  syn Collection<Problem> AdditiveExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getLeftOperand().type().isNumericType()) {
      problems.add(errorf("%s is not numeric", getLeftOperand().type().typeName()));
    }
    if (!getRightOperand().type().isNumericType()) {
      problems.add(errorf("%s is not numeric", getRightOperand().type().typeName()));
    }
    return problems;
  }

  // 15.18
  eq AddExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (!left.isString() && !right.isString()) {
      return super.typeProblems();
    } else if (left.isVoid()) {
      problems.add(error("The type void of the left hand side is not numeric"));
    } else if (right.isVoid()) {
      problems.add(error("The type void of the right hand side is not numeric"));
    }
    return problems;
  }

  ShiftExpr contributes each typeProblems() to CompilationUnit.problems();

  // 15.19
  syn Collection<Problem> ShiftExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getLeftOperand().type().isIntegralType()) {
      problems.add(errorf("%s is not integral", getLeftOperand().type().typeName()));
    }
    if (!getRightOperand().type().isIntegralType()) {
      problems.add(errorf("%s is not integral", getRightOperand().type().typeName()));
    }
    return problems;
  }

  // 15.22
  BitwiseExpr contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> BitwiseExpr.typeProblems() {
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (left.isIntegralType() && right.isIntegralType()) {
      return Collections.emptyList();
    } else if (left.isBoolean() && right.isBoolean()) {
      return Collections.emptyList();
    } else {
      return Collections.singletonList(errorf("%s is not compatible with %s",
          left.typeName(), right.typeName()));
    }
  }

  RelationalExpr contributes each typeProblems() to CompilationUnit.problems();

  // 15.20
  syn Collection<Problem> RelationalExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getLeftOperand().type().isNumericType()) {
      problems.add(errorf("%s is not numeric", getLeftOperand().type().typeName()));
    }
    if (!getRightOperand().type().isNumericType()) {
      problems.add(errorf("%s is not numeric", getRightOperand().type().typeName()));
    }
    return problems;
  }

  LogicalExpr contributes each typeProblems() to CompilationUnit.problems();

  // 15.23, 15.24
  syn Collection<Problem> LogicalExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (!getLeftOperand().type().isBoolean()) {
      problems.add(errorf("%s is not boolean", getLeftOperand().type().typeName()));
    }
    if (!getRightOperand().type().isBoolean()) {
      problems.add(errorf("%s is not boolean", getRightOperand().type().typeName()));
    }
    return problems;
  }

  // 15.21
  eq EqualityExpr.typeProblems() {
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (left.isNumericType() && right.isNumericType()) {
      return Collections.emptyList();
    } else if (left.isBoolean() && right.isBoolean()) {
      return Collections.emptyList();
    } else if ((left.isReferenceType() || left.isNull())
        && (right.isReferenceType() || right.isNull())) {
      if (left.castingConversionTo(right) || right.castingConversionTo(left)) {
        return Collections.emptyList();
      }
    }
    return Collections.singletonList(errorf("%s can not be compared to %s",
        left.typeName(), right.typeName()));
  }

  // 15.20.2
  InstanceOfExpr contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> InstanceOfExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    TypeDecl relationalExpr = getExpr().type();
    TypeDecl referenceType = getTypeAccess().type();
    if (!relationalExpr.isUnknown()) {
      if (!relationalExpr.isReferenceType() && !relationalExpr.isNull()) {
        problems.add(error(
            "The relational expression in instance of must be reference or null type"));
      }
      if (!referenceType.isReferenceType()) {
        problems.add(error("The reference expression in instance of must be reference type"));
      }
      if (!relationalExpr.castingConversionTo(referenceType)) {
        problems.add(errorf(
            "The type %s of the relational expression %s can not be cast into the type %s",
            relationalExpr.typeName(), getExpr().prettyPrint(), referenceType.typeName()));
      }
      if (getExpr().isTypeAccess()) {
        problems.add(errorf(
            "The relational expression %s must not be a type name", getExpr().prettyPrint()));
      }
    }
    return problems;
  }

  // 15.16
  CastExpr contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> CastExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    TypeDecl expr = getExpr().type();
    TypeDecl type = getTypeAccess().type();
    if (!expr.isUnknown()) {
      if (!expr.castingConversionTo(type)) {
        problems.add(errorf("%s can not be cast into %s", expr.typeName(), type.typeName()));
      }
      if (!getTypeAccess().isTypeAccess()) {
        problems.add(errorf("%s is not a type access in cast expression",
            getTypeAccess().prettyPrint()));
      }
    }
    return problems;
  }

  ParExpr contributes
      errorf("%s is a type and may not be used in parenthesized expression",
          getExpr().prettyPrint())
      when getExpr().isTypeAccess()
      to CompilationUnit.problems();

  // 15.15.3
  PlusExpr contributes
      error("unary plus only operates on numeric types")
      when !getOperand().type().isNumericType()
      to CompilationUnit.problems();

  // 15.15.4
  MinusExpr contributes
      error("unary minus only operates on numeric types")
      when !getOperand().type().isNumericType()
      to CompilationUnit.problems();

  // 15.15.5
  BitNotExpr contributes
      error("unary ~ only operates on integral types")
      when !getOperand().type().isIntegralType()
      to CompilationUnit.problems();

  // 15.15.6
  LogNotExpr contributes
      error("unary ! only operates on boolean types")
      when !getOperand().type().isBoolean()
      to CompilationUnit.problems();

  // 15.14
  PostfixExpr contributes
      error("postfix expression only works on variables")
      when !getOperand().isVariable()
      to CompilationUnit.problems();

  PostfixExpr contributes
      error("postfix expression only operates on numeric types")
      when !getOperand().type().isNumericType()
      to CompilationUnit.problems();

  // 15.15.1
  PreIncExpr contributes
      error("prefix increment expression only works on variables")
      when !getOperand().isVariable()
      to CompilationUnit.problems();

  PreIncExpr contributes
      error("unary increment only operates on numeric types")
      when !getOperand().type().isNumericType()
      to CompilationUnit.problems();

  // 15.15.2
  PreDecExpr contributes
      error("prefix decrement expression only works on variables")
      when !getOperand().isVariable()
      to CompilationUnit.problems();

  PreDecExpr contributes
      error("unary decrement only operates on numeric types")
      when !getOperand().type().isNumericType()
      to CompilationUnit.problems();

  IfStmt contributes
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), getCondition().type().name())
      when !getCondition().type().isBoolean()
      to CompilationUnit.problems();

  WhileStmt contributes
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), getCondition().type().name())
      when !getCondition().type().isBoolean()
      to CompilationUnit.problems();

  DoStmt contributes
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), getCondition().type().name())
      when !getCondition().type().isBoolean()
      to CompilationUnit.problems();

  ForStmt contributes
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), getCondition().type().name())
      when hasCondition() && !getCondition().type().isBoolean()
      to CompilationUnit.problems();

  SwitchStmt contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> SwitchStmt.typeProblems() {
    TypeDecl type = getExpr().type();
    if (!type.isIntegralType() || type.isLong()) {
      return Collections.singletonList(
          error("Switch expression must be of char, byte, short, or int"));
    }
    return Collections.emptyList();
  }

  ConstCase contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> ConstCase.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    TypeDecl type = getValue().type();
    if (!type.assignConversionTo(switchType(), getValue())) {
      problems.add(error("Constant expression must be assignable to Expression"));
    }
    if (!getValue().isConstant() && !type.isUnknown()) {
      problems.add(error("Switch expression must be constant"));
    }
    return problems;
  }

  inh TypeDecl Case.switchType();
  eq SwitchStmt.getBlock().switchType() = getExpr().type();
  eq Program.getChild().switchType() = unknownType();

  SynchronizedStmt contributes
      error("*** The type of the expression must be a reference")
      when !getExpr().type().isReferenceType() || getExpr().type().isNull()
      to CompilationUnit.problems();

  BasicCatch contributes
      error("*** The catch variable must extend Throwable")
      when !getParameter().type().subtype(typeThrowable())
      to CompilationUnit.problems();

  ThrowStmt contributes
      error("*** The thrown expression must extend Throwable")
      when !getExpr().type().subtype(typeThrowable())
      to CompilationUnit.problems();

  // 14.10
  AssertStmt contributes
      error("Assert requires boolean condition")
      when !getCondition().type().isBoolean()
      to CompilationUnit.problems();

  AssertStmt contributes
      error("The detail message of an assert statement may not be void")
      when hasMessage() && getMessage().type().isVoid()
      to CompilationUnit.problems();

  MethodDecl contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> MethodDecl.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    // Thrown vs super class method see MethodDecl.nameCheck.
    // 8.4.4
    TypeDecl exceptionType = typeThrowable();
    for (int i = 0; i < getNumException(); i++) {
      TypeDecl typeDecl = getException(i).type();
      if (!typeDecl.subtype(exceptionType)) {
        problems.add(errorf("%s throws non throwable type %s", signature(), typeDecl.fullName()));
      }
    }
    // Check returns.
    if (!isVoid() && hasBlock() && getBlock().canCompleteNormally()) {
      problems.add(error("the body of a non void method may not complete normally"));
    }
    return problems;
  }

  // 14.16
  inh TypeDecl TypeDecl.typeVoid();
  inh TypeDecl ReturnStmt.returnType();
  eq TypeDecl.getBodyDecl().returnType() = typeVoid();
  eq MethodDecl.getBlock().returnType() = type();
  eq Program.getChild().returnType() = typeVoid();

  ReturnStmt contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> ReturnStmt.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (hasResult() && !returnType().isVoid()) {
      TypeDecl resultType = getResult().type();
      if (!resultType.isUnknown()
          && !resultType.assignConversionTo(returnType(), getResult())) {
        problems.add(errorf("return value must be an instance of %s which %s is not",
            returnType().typeName(), resultType.typeName()));
      }
    }
    // 8.4.5 8.8.5
    if (returnType().isVoid() && hasResult()) {
      problems.add(error("return statement may not have an expression in void methods"));
    }
    // 8.4.5
    if (!returnType().isVoid() && !hasResult()) {
      problems.add(error("return statement must have an expression in non void methods"));
    }
    if (enclosingBodyDecl() instanceof InstanceInitializer
        || enclosingBodyDecl() instanceof StaticInitializer) {
      problems.add(error("Initializers may not return"));
    }
    return problems;
  }

  ConstructorDecl contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> ConstructorDecl.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    // 8.8.4 (8.4.4)
    TypeDecl exceptionType = typeThrowable();
    for (int i = 0; i < getNumException(); i++) {
      TypeDecl typeDecl = getException(i).type();
      if (!typeDecl.subtype(exceptionType)) {
        problems.add(errorf("%s throws non throwable type %s", signature(), typeDecl.fullName()));
      }
    }
    return problems;
  }

  ClassInstanceExpr contributes each typeProblems() to CompilationUnit.problems();

  syn Collection<Problem> ClassInstanceExpr.typeProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    if (isQualified() && qualifier().isTypeAccess() && !qualifier().type().isUnknown()) {
      problems.add(error(
          "*** The expression in a qualified class instance expr must not be a type name"));
    }
    // 15.9
    if (isQualified() && !type().isInnerClass()
        && !((ClassDecl) type()).superclass().isInnerClass() && !type().isUnknown()) {
      problems.add(error("*** Qualified class instance creation can only instantiate inner "
          + "classes and their anonymous subclasses"));
    }
    if (!type().isClassDecl()) {
      problems.add(errorf("*** Can only instantiate classes, which %s is not", type().typeName()));
    }
    typeCheckEnclosingInstance(problems);
    typeCheckAnonymousSuperclassEnclosingInstance(problems);
    return problems;
  }

  public void ClassInstanceExpr.typeCheckEnclosingInstance(Collection<Problem> problems) {
    TypeDecl C = type();
    if (!C.isInnerClass()) {
      return;
    }

    TypeDecl enclosing = null;
    if (C.isAnonymous()) {
      if (noEnclosingInstance()) {
        enclosing = null;
      } else {
        enclosing = hostType();
      }
    } else if (C.isLocalClass()) {
      if (C.inStaticContext()) {
        enclosing = null;
      } else if (noEnclosingInstance()) {
        enclosing = unknownType();
      } else {
        TypeDecl nest = hostType();
        while (nest != null && !nest.subtype(C.enclosingType())) {
          nest = nest.enclosingType();
        }
        enclosing = nest;
      }
    } else if (C.isMemberType()) {
      if (!isQualified()) {
        if (noEnclosingInstance()) {
          problems.add(errorf("No enclosing instance to initialize %s with", C.typeName()));
          enclosing = unknownType();
        } else {
          TypeDecl nest = hostType();
          while (nest != null && !nest.subtype(C.enclosingType())) {
            if (nest.isStatic()) {
              problems.add(errorf("No enclosing instance to initialize %s with", C.typeName()));
              nest = unknownType();
              break;
            }
            nest = nest.enclosingType();
          }
          enclosing = nest == null ? unknownType() : nest;
        }
      } else {
        enclosing = enclosingInstance();
      }
    }
    if (enclosing != null) {
      if (enclosing.isUnknown()) {
        problems.add(errorf("No enclosing instance to initialize %s with", C.typeName()));
      } else if (!enclosing.subtype(C.enclosingType())) {
        problems.add(errorf("*** Can not instantiate %s with the enclosing instance %s due to "
            + "incorrect enclosing instance",
            C.typeName(), enclosing.typeName()));
      } else if (!isQualified() && C.isMemberType()
          && inExplicitConstructorInvocation() && enclosing == hostType()) {
        problems.add(errorf("*** The innermost enclosing instance of type %s is this which is "
            + "not yet initialized here.",
            enclosing.typeName()));
      }
    }
  }

  inh TypeDecl SuperConstructorAccess.enclosingInstance();

  inh TypeDecl ClassInstanceExpr.enclosingInstance();

  inh TypeDecl TypeDecl.enclosingInstance();

  eq Program.getChild().enclosingInstance() = null;

  eq StaticInitializer.getBlock().enclosingInstance() = null;

  eq TypeDecl.getBodyDecl(int index).enclosingInstance() {
    if (getBodyDecl(index) instanceof MemberTypeDecl
        && !((MemberTypeDecl) getBodyDecl(index)).typeDecl().isInnerType()) {
      return null;
    }
    if (getBodyDecl(index) instanceof ConstructorDecl) {
      return enclosingInstance();
    }
    return this;
  }

  eq Dot.getRight().enclosingInstance() = getLeft().type();

  eq ConstructorDecl.getParsedConstructorInvocation().enclosingInstance() = unknownType();

  eq ConstructorDecl.getImplicitConstructorInvocation().enclosingInstance() = unknownType();

  syn boolean ClassInstanceExpr.noEnclosingInstance() =
      isQualified() ? qualifier().staticContextQualifier() : inStaticContext();

  public void ClassInstanceExpr.typeCheckAnonymousSuperclassEnclosingInstance(
      Collection<Problem> problems) {
    if (type().isAnonymous() && ((ClassDecl) type()).superclass().isInnerType()) {
      TypeDecl S = ((ClassDecl) type()).superclass();
      if (S.isLocalClass()) {
        if (S.inStaticContext()) {
        } else if (noEnclosingInstance()) {
          problems.add(errorf("*** No enclosing instance to class %s due to static context",
              type().typeName()));
        } else if (inExplicitConstructorInvocation()) {
          problems.add(errorf("*** No enclosing instance to superclass %s of %s since this is "
              + "not initialized yet",
              S.typeName(), type().typeName()));
        }
      } else if (S.isMemberType()) {
        if (!isQualified()) {
          // 15.9.2 2nd paragraph
          if (noEnclosingInstance()) {
            problems.add(errorf("*** No enclosing instance to class %s due to static context",
                type().typeName()));
          } else {
            TypeDecl nest = hostType();
            while (nest != null && !nest.subtype(S.enclosingType())) {
              nest = nest.enclosingType();
            }
            if (nest == null) {
              problems.add(errorf("*** No enclosing instance to superclass %s of %s",
                  S.typeName(), type().typeName()));
            } else if (inExplicitConstructorInvocation()) {
              problems.add(errorf("*** No enclosing instance to superclass %s of %s since this is "
                  + "not initialized yet",
                  S.typeName(), type().typeName()));
            }
          }
        }
      }
    }
  }

  ArrayTypeWithSizeAccess contributes
      errorf("%s is not int after unary numeric promotion", getExpr().type().typeName())
      when !getExpr().type().unaryNumericPromotion().isInt()
      to CompilationUnit.problems();

  // 15.25
  ConditionalExpr contributes
      error("The first operand of a conditional expression must be a boolean")
      when !getCondition().type().isBoolean()
      to CompilationUnit.problems();

  ConditionalExpr contributes
      error("The types of the second and third operand in "
          + "this conditional expression do not match")
      when type().isUnknown() && !getTrueExpr().type().isUnknown()
          && !getFalseExpr().type().isUnknown()
      to CompilationUnit.problems();

  syn Problem IntegerLiteral.sizeError() =
      error("The value of an int literal must be a decimal value in the range "
          + "-2147483648..2147483647 or a hexadecimal or octal literal that fits in 32 bits.");

  IntegerLiteral contributes
      sizeError()
      when constant().error
      to CompilationUnit.problems();

  syn Problem LongLiteral.sizeError() =
      errorf("The value of the long literal %s is not legal", getLITERAL());

  LongLiteral contributes
      sizeError()
      when constant().error
      to CompilationUnit.problems();

  FloatingPointLiteral contributes
      errorf("It is an error for nonzero floating-point %s to round to zero", getLITERAL())
      when !isZero() && constant().floatValue() == 0.0f
      to CompilationUnit.problems();

  FloatingPointLiteral contributes
      errorf("the floating-point literal \"%s\" is too large", getLITERAL())
      when constant().floatValue() == Float.NEGATIVE_INFINITY
          || constant().floatValue() == Float.POSITIVE_INFINITY
      to CompilationUnit.problems();

  DoubleLiteral contributes
      errorf("It is an error for nonzero floating-point %s to round to zero", getLITERAL())
      when !isZero() && constant().doubleValue() == 0.0f
      to CompilationUnit.problems();

  DoubleLiteral contributes
      errorf("the floating-point literal \"%s\" is too large", getLITERAL())
      when constant().doubleValue() == Double.NEGATIVE_INFINITY
          || constant().doubleValue() == Double.POSITIVE_INFINITY
      to CompilationUnit.problems();
}
