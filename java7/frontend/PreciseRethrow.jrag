/* Copyright (c) 2011-2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect PreciseRethrow {

  syn Collection<TypeDecl> Expr.throwTypes() {
    Collection<TypeDecl> tts = new LinkedList<TypeDecl>();
    tts.add(type());
    return tts;
  }

  eq VarAccess.throwTypes() = decl().throwTypes();

  syn lazy Collection<TypeDecl> Declarator.throwTypes() {
    Collection<TypeDecl> tts = new LinkedList<TypeDecl>();
    tts.add(type());
    return tts;
  }

  syn lazy Collection<TypeDecl> ParameterDeclaration.throwTypes() {
    if (isCatchParam() && isEffectivelyFinal()) {
      // The catch parameter must be final to refine the throw type.
      return catchClause().caughtExceptions();
    } else {
      return Collections.singleton(type());
    }
  }

  syn lazy Collection<TypeDecl> CatchParameterDeclaration.throwTypes() =
      catchClause().caughtExceptions();

  /**
   * Note: this attribute deviates from what the JLS says about "effectively final",
   * simply because the attribute name would be too confusing if it did not return true
   * when the variable was explicitly declared final. The JLS considers declared final
   * and effectively final to be mutually exclusive, we don't.
   */
  syn boolean ParameterDeclaration.isEffectivelyFinal() = isFinal() || !inhModifiedInScope(this);

  /**
   * @return true if the variable var is modified in the local scope
   */
  inh boolean ParameterDeclaration.inhModifiedInScope(Variable var);
  eq ConstructorDecl.getParameter().inhModifiedInScope(Variable var) =
      getBlock().modifiedInScope(var);
  eq MethodDecl.getParameter().inhModifiedInScope(Variable var) =
      hasBlock() && getBlock().modifiedInScope(var);
  eq BasicCatch.getParameter().inhModifiedInScope(Variable var) =
      getBlock().modifiedInScope(var);

  syn boolean Stmt.modifiedInScope(Variable var);

  eq VarDeclStmt.modifiedInScope(Variable var) {
    for (VariableDeclarator decl : getDeclaratorList()) {
      if (decl.modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }

  syn boolean VariableDeclarator.modifiedInScope(Variable var) =
      hasInit() && getInit().modifiedInScope(var);
  eq EmptyStmt.modifiedInScope(Variable var) = false;
  eq LabeledStmt.modifiedInScope(Variable var) = getStmt().modifiedInScope(var);
  eq Block.modifiedInScope(Variable var) {
    for (Stmt stmt : getStmtList()) {
      if (stmt.modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }
  eq SwitchStmt.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
  eq Case.modifiedInScope(Variable var) = false;
  eq BreakStmt.modifiedInScope(Variable var) = false;
  eq ContinueStmt.modifiedInScope(Variable var) = false;
  eq ReturnStmt.modifiedInScope(Variable var) = false;
  eq ThrowStmt.modifiedInScope(Variable var) = false;
  eq IfStmt.modifiedInScope(Variable var) {
    if (getThen().modifiedInScope(var)) {
      return true;
    }
    return hasElse() && getElse().modifiedInScope(var);
  }
  eq WhileStmt.modifiedInScope(Variable var) = getStmt().modifiedInScope(var);
  eq DoStmt.modifiedInScope(Variable var) = getStmt().modifiedInScope(var);
  eq ForStmt.modifiedInScope(Variable var) {
    for (Stmt stmt : getInitStmtList()) {
      if (stmt.modifiedInScope(var)) {
        return true;
      }
    }
    for (Stmt stmt : getUpdateStmtList()) {
      if (stmt.modifiedInScope(var)) {
        return true;
      }
    }
    return getStmt().modifiedInScope(var);
  }
  eq EnhancedForStmt.modifiedInScope(Variable var) = getStmt().modifiedInScope(var);
  eq SynchronizedStmt.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
  eq TryStmt.modifiedInScope(Variable var) {
    if (getBlock().modifiedInScope(var)) {
      return true;
    }
    for (CatchClause cc : getCatchClauseList()) {
      if (cc.modifiedInScope(var)) {
        return true;
      }
    }
    return hasNonEmptyFinally() && getFinally().modifiedInScope(var);
  }
  eq AssertStmt.modifiedInScope(Variable var) = false;
  eq LocalClassDeclStmt.modifiedInScope(Variable var) = false;

  syn boolean CatchClause.modifiedInScope(Variable var) = getBlock().modifiedInScope(var);
  syn boolean Expr.modifiedInScope(Variable var) = false;
  eq Dot.modifiedInScope(Variable var) = getLeft().modifiedInScope(var);
  eq VarAccess.modifiedInScope(Variable var) = false;
  eq AssignExpr.modifiedInScope(Variable var) =
      getDest().isVariable(var) || getSource().modifiedInScope(var);
  eq ExprStmt.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);
  eq Binary.modifiedInScope(Variable var) =
      getLeftOperand().modifiedInScope(var) || getRightOperand().modifiedInScope(var);
  eq Unary.modifiedInScope(Variable var) = getOperand().modifiedInScope(var);
  eq ParExpr.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);
  eq CastExpr.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);
  eq InstanceOfExpr.modifiedInScope(Variable var) = getExpr().modifiedInScope(var);
  eq ClassInstanceExpr.modifiedInScope(Variable var) {
    for (int i = 0; i < getNumArg(); ++i) {
      if (getArg(i).modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }
  eq MethodAccess.modifiedInScope(Variable var) {
    for (int i = 0; i < getNumArg(); ++i) {
      if (getArg(i).modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }
  eq ConstructorAccess.modifiedInScope(Variable var) {
    for (int i = 0; i < getNumArg(); ++i) {
      if (getArg(i).modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }
  eq ArrayInit.modifiedInScope(Variable var) {
    for (int i = 0; i < getNumInit(); ++i) {
      if (getInit(i).modifiedInScope(var)) {
        return true;
      }
    }
    return false;
  }
  eq ArrayCreationExpr.modifiedInScope(Variable var) =
      hasArrayInit() && getArrayInit().modifiedInScope(var);
  eq ConditionalExpr.modifiedInScope(Variable var) =
      getCondition().modifiedInScope(var)
      || getTrueExpr().modifiedInScope(var)
      || getFalseExpr().modifiedInScope(var);

  syn boolean Expr.isVariable(Variable var) = false;
  eq VarAccess.isVariable(Variable var) = decl() == var;

  /**
   * @return true if this is the parameter declaration of a catch clause
   */
  inh boolean ParameterDeclaration.isCatchParam();
  eq Program.getChild(int i).isCatchParam() = false;
  eq ConstructorDecl.getParameter().isCatchParam() = false;
  eq MethodDecl.getParameter().isCatchParam() = false;
  eq BasicCatch.getParameter().isCatchParam() = true;

  inh CatchClause ParameterDeclaration.catchClause();
  inh CatchClause CatchParameterDeclaration.catchClause();

  eq Program.getChild(int i).catchClause() {
    throw new IllegalStateException("Could not find parent " + "catch clause");
  }

  eq CatchClause.getChild(int i).catchClause() = this;

  inh Collection<TypeDecl> CatchClause.caughtExceptions();

  eq TryStmt.getCatchClause(int index).caughtExceptions() {
    Collection<TypeDecl> exceptions = new HashSet<TypeDecl>();
    getBlock().collectExceptions(exceptions);
    Collection<TypeDecl> caught = new LinkedList<TypeDecl>();
    for (TypeDecl exception : exceptions) {
      // This catch clause handles the exception.
      if (!getCatchClause(index).handles(exception)) {
        continue;
      }
      // No previous catch clause handles the exception.
      boolean already = false;
      for (int i = 0; i < index; ++i) {
        if (getCatchClause(i).handles(exception)) {
          already = true;
          break;
        }
      }
      if (!already) {
        caught.add(exception);
      }
    }
    return caught;
  }

  refine ExceptionHandling
  eq ThrowStmt.exceptionHandlingProblems() {
    Collection<Problem> problems = new LinkedList<Problem>();
    Collection<TypeDecl> exceptionTypes = getExpr().throwTypes();
    for (TypeDecl exceptionType : exceptionTypes) {
      if (exceptionType == typeNull()) {
        exceptionType = typeNullPointerException();
      }
      // 8.4.4
      if (exceptionType.isCheckedException() && !handlesException(exceptionType)) {
        problems.add(errorf("%s throws uncaught exception %s",
            this.prettyPrint(), exceptionType.fullName()));
      }
    }
    return problems;
  }

  refine ExceptionHandling
  protected boolean ThrowStmt.reachedException(TypeDecl catchType) {
    Collection<TypeDecl> exceptionTypes = getExpr().throwTypes();
    boolean reached = false;
    for (TypeDecl exceptionType : exceptionTypes) {
      if (exceptionType == typeNull()) {
        exceptionType = typeNullPointerException();
      }
      if (catchType.mayCatch(exceptionType)) {
        reached = true;
        break;
      }
      if (super.reachedException(catchType)) {
        reached = true;
        break;
      }
    }
    return reached;
  }

  inh boolean CatchClause.reportUnreachable();
  eq CatchClause.getBlock().reportUnreachable() = false;

  BasicCatch contributes
      errorf("the exception %s is not thrown in the body of the try statement",
          getParameter().type().fullName())
      when !getBlock().reachable() && reportUnreachable()
      to CompilationUnit.problems();

  MultiCatch contributes
      errorf("the exception %s is not thrown in the body of the try statement",
          getParameter().type().fullName())
      when !getBlock().reachable() && reportUnreachable()
      to CompilationUnit.problems();
}
