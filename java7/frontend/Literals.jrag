/* Copyright (c) 2011-2016, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Improved error reporting and extended parsing of literals for Java 7.
 * Adds support for binary literals and underscores in numeric literals.
 *
 * Range errors for literals cannot be detected until we try to compute
 * the value of a literal. Other syntax errors for literals can be found
 * during scanning/parsing.
 */
aspect Java7Literals {

  /**
   * @return true if this floating point literal is equivalent to a zero literal
   */
  syn lazy boolean FloatingPointLiteral.isZero() {
    String digits = normalizedValueDigits();
    for (int i = 0; i < digits.length(); i++) {
      char c = digits.charAt(i);
      if (c == 'e' || c == 'p') {
        break;
      }
      if (c != '0' && c != '.' && c != 'x') {
        return false;
      }
    }
    return true;
  }

  /**
   * @return true if this floating point literal is equivalent to a zero literal
   */
  syn lazy boolean DoubleLiteral.isZero() {
    String digits = normalizedValueDigits();
    for (int i = 0; i < digits.length(); i++) {
      char c = digits.charAt(i);
      if (c == 'e' || c == 'p') {
        break;
      }
      if (c != '0' && c != '.' && c != 'x') {
        return false;
      }
    }
    return true;
  }


  /**
   * Check for and report literal-out-of-bounds error.
   * If the constant is error-marked, there exists a literal out of bounds error.
   */
  refine TypeCheck eq IntegerLiteral.sizeError() =
      errorf("The integer literal \"%s\" is too large for type int.", getLITERAL());

  /**
   * Check for and report literal-out-of-bounds error.
   * If the constant is error-marked, there exists a literal out of bounds error.
   */
  refine TypeCheck eq LongLiteral.sizeError() =
      errorf("The integer literal \"%s\" is too large for type long.", getLITERAL());

  /**
   * Parse this literal and return a fresh Constant.
   * @return a fresh Constant representing this IntegerLiteral
   */
  eq IntegerLiteral.constant() {
    if (constant != null) {
      return constant;
    }
    long l = 0;
    try {
      l = parseLong();
    } catch (NumberFormatException e) {
      Constant c = Constant.create(0L);
      c.error = true;
      return c;
    }
    int clamped = (int) l;
    Constant c = Constant.create(clamped);
    if (l != clamped) {
      if (l != (0xFFFFFFFFL & clamped) || numericLiteralKind() == NumericLiteralKind.DECIMAL) {
        c.error = true;
      }
    }
    return c;
  }

  /**
   * Parse this literal and return a fresh Constant.
   * @return a fresh Constant representing this LongLiteral
   */
  eq LongLiteral.constant() {
    if (constant != null) {
      return constant;
    }
    try {
      return Constant.create(parseLong());
    } catch (NumberFormatException e) {
      Constant c = Constant.create(0L);
      c.error = true;
      return c;
    }
  }

  /**
   * Parse this literal and return a fresh Constant.
   * @return a fresh Constant representing this FloatingPointLiteral
   */
  eq FloatingPointLiteral.constant() {
    if (constant != null) {
      return constant;
    }
    try {
      return Constant.create(Float.parseFloat(normalizedDigits()));
    } catch (NumberFormatException e) {
      Constant c = Constant.create(0.0f);
      c.error = true;
      return c;
    }
  }

  /**
   * Parse this literal and return a fresh Constant.
   * @return a fresh Constant representing this DoubleLiteral
   */
  eq DoubleLiteral.constant() {
    if (constant != null) {
      return constant;
    }
    try {
      return Constant.create(Double.parseDouble(normalizedDigits()));
    } catch (NumberFormatException e) {
      Constant c = Constant.create(0.0d);
      c.error = true;
      return c;
    }
  }

  /**
   * This is a refactored version of Literal.parseLong which supports
   * binary literals.
   *
   * There exists only a parseLong, and not a parseInteger. Parsing
   * of regular integer literals works the same, but with stricter
   * bounds requirements on the resulting parsed value.
   */
  syn long Literal.parseLong() {
    switch (numericLiteralKind()) {
      case HEXADECIMAL:
        return parseLongHexadecimal();
      case OCTAL:
        return parseLongOctal();
      case BINARY:
        return parseLongBinary();
      case DECIMAL:
      default: // Needed to convince javac that all paths return.
        return parseLongDecimal();
    }
  }

  /**
   * Parse a hexadecimal long literal.
   *
   * @throws NumberFormatException if the literal is too large.
   */
  syn long Literal.parseLongHexadecimal() {
    long val = 0;
    String digits = normalizedValueDigits();
    if (digits.length() > 16) {
      for (int i = 0; i < digits.length()-16; i++)
        if (digits.charAt(i) != '0') {
          throw new NumberFormatException("literal is too large");
        }
    }
    for (int i = 0; i < digits.length(); i++) {
      int c = digits.charAt(i);
      if (c >= 'a' && c <= 'f') {
        c = c - 'a' + 10;
      } else {
        c = c - '0';
      }
      val = val * 16 + c;
    }
    return val;
  }

  /**
   * Parse an octal long literal.
   *
   * @throws NumberFormatException if the literal is too large.
   */
  syn long Literal.parseLongOctal() {
    long val = 0;
    String digits = normalizedValueDigits();
    if (digits.length() > 21) {
      for (int i = 0; i < digits.length() - 21; i++)
        if (i == digits.length() - 21 - 1) {
          if (digits.charAt(i) != '0' && digits.charAt(i) != '1') {
            throw new NumberFormatException("literal is too large");
          }
        } else {
          if (digits.charAt(i) != '0') {
            throw new NumberFormatException("literal is too large");
          }
        }
    }
    for (int i = 0; i < digits.length(); i++) {
      int c = digits.charAt(i) - '0';
      val = val * 8 + c;
    }
    return val;
  }

  /**
   * Parse a binary long literal.
   *
   * @throws NumberFormatException if the literal is too large.
   */
  syn long Literal.parseLongBinary() {
    long val = 0;
    String digits = normalizedValueDigits();
    if (digits.length() > 64) {
      for (int i = 0; i < digits.length()-64; i++)
        if (digits.charAt(i) != '0') {
          throw new NumberFormatException("");
        }
    }
    for (int i = 0; i < digits.length(); ++i) {
      if (digits.charAt(i) == '1') {
        val |= 1L << (digits.length()-i-1);
      }
    }
    return val;
  }

  /**
   * Parse a decimal long literal.
   * @throws NumberFormatException if the literal is too large.
   */
  syn long Literal.parseLongDecimal() {
    long val = 0;
    long prev = 0;
    String digits = normalizedValueDigits();
    for (int i = 0; i < digits.length(); i++) {
      prev = val;
      int c = digits.charAt(i);
      if (c >= '0' && c <= '9') {
        c = c - '0';
      } else {
        throw new NumberFormatException("unexpected digit: " + c);
      }
      val = val * 10 + c;
      if (val < prev) {
        boolean negMinValue = i == (digits.length()-1) &&
          isNegative() && val == Long.MIN_VALUE;
        if (!negMinValue) {
          throw new NumberFormatException("");
        }
      }
    }
    if (val == Long.MIN_VALUE) {
      return val;
    }
    if (val < 0) {
      throw new NumberFormatException("");
    }
    return isNegative() ? -val : val;
  }

  /**
   * This is only meaningful for numeric literals.
   *
   * @return {@code true} if this literal starts with a minus sign.
   */
  syn boolean Literal.isNegative() = false;

  /**
   * Interface for numeric literals.
   *
   * <p>This is used to add helper attributes to numeric literals
   * (IntegerLiteral and LongLiteral) without duplicating the attribute code.
   */
  interface NumericLiteral {
    String getLITERAL();
  }

  eq NumericLiteral.isNegative() = getLITERAL().charAt(0) == '-';

  syn boolean NumericLiteral.isHex() = numericLiteralKind() == NumericLiteralKind.HEXADECIMAL;

  syn boolean NumericLiteral.isOctal() = numericLiteralKind() == NumericLiteralKind.OCTAL;

  syn boolean NumericLiteral.isDecimal() = numericLiteralKind() == NumericLiteralKind.DECIMAL;


  IntegerLiteral implements NumericLiteral;
  LongLiteral implements NumericLiteral;

  /**
   * The lowercase digits of this numeric literal,
   * with underscores, leading minus, and type suffix removed.
   */
  syn String Literal.normalizedDigits() {
    String lit = getLITERAL().toLowerCase();
    char[] result = new char[lit.length()];
    int i = 0;
    int p = 0;
    // Skip leading minus.
    if (lit.length() > 0 && lit.charAt(i) == '-') {
      i += 1;
    }
    // First we have to filter out underscores to be able to identify if it's an octal literal.
    for (; i < lit.length(); ++i) {
      char c = lit.charAt(i);
      if (c != '_') {
        result[p++] = lit.charAt(i);
      }
    }
    if (p > 1) {
      if (p > 2 && result[0] == '0' && result[1] == 'x') {
        // It's a hexadecimal literal - remove l suffix.
        if (result[p - 1] == 'l') {
          p -= 1;
        }
      } else if (result[p - 1] == 'l' || result[p - 1] == 'f' || result[p - 1] == 'd') {
        // Remove l/f/d suffix.
        p -= 1;
      }
    }
    return new String(result, 0, p);
  }


  /**
   * The trimmed lowercase digits of this literal, excluding
   * prefix, leading minus, suffix, and underscores.
   */
  syn String Literal.normalizedValueDigits() {
    String digits = normalizedDigits();
    // Remove prefix.
    if (digits.length() > 1 && digits.charAt(0) == '0') {
      char next = digits.charAt(1);
      if (next == 'x') {
        return digits.substring(2);
      } else if (next == 'b') {
        return digits.substring(2);
      } else {
        return digits.substring(1);
      }
    }
    return digits;
  }

  /**
   * The literal kind tells which kind of literal this is;
   * either a DECIMAL, HEXADECIMAL, OCTAL or BINARY literal.
   */
  syn NumericLiteralKind Literal.numericLiteralKind() {
    String digits = normalizedDigits();
    if (digits.length() > 1 && digits.charAt(0) == '0') {
      char next = digits.charAt(1);
      if (next == 'x') {
        return NumericLiteralKind.HEXADECIMAL;
      } else if (next == 'b') {
        return NumericLiteralKind.BINARY;
      } else {
        return NumericLiteralKind.OCTAL;
      }
    }
    return NumericLiteralKind.DECIMAL;
  }


  /**
   * The type of an IllegalLiteral does not matter,
   * as it is only a placeholder literal for error messages.
   */
  eq IllegalLiteral.type() = unknownType();

  /**
   * Error processing for literals.
   * Include the token range from parsing.
   */
  IllegalLiteral contributes
      new Problem(sourceFile(),
          getLITERAL(), getLine(LITERALstart), getColumn(LITERALstart),
          getLine(LITERALend), getColumn(LITERALend),
          Problem.Severity.ERROR, Problem.Kind.LEXICAL)
      to CompilationUnit.problems();

  /**
   * Describes a kind of numeric literal (hex, octal, binary, decimal).
   */
  enum NumericLiteralKind {
    DECIMAL,
    HEXADECIMAL,
    OCTAL,
    BINARY
  }

  /**
   * A recognizer for the different kinds of numeric literals in Java 7.
   *
   * <p>The purpose of this parser is to classify numeric literals
   * into one of the numeric literal kinds, or IllegalLiteral if it
   * contains any syntax error.
   *
   * <p>The ExtendJ tokenizer is overly permissive to allow underscores in
   * literals, this class is needed to find illegal uses of underscores and
   * other errors.  If there is any syntax error, the parse method returns an
   * IllegalLiteral.
   */
  public class NumericLiteralParser {

    private final String literal;
    private final StringBuilder out;
    private int idx = 0;
    private NumericLiteralKind kind;
    private boolean whole; // Have whole part?
    private boolean fraction; // Have fraction part?
    private boolean exponentSpecifier; // Have exponent specifier?
    private boolean exponent; // Have exponent part?
    private boolean floating; // Is floating point?
    private boolean isFloat; // If this is a single precision floating point type.
    private boolean isLong;

    private NumericLiteralParser(String literal) {
      this.literal = literal;
      out = new StringBuilder(literal.length());
    }

    public static Literal parse(String literal) {
      NumericLiteralParser parser = new NumericLiteralParser(literal);
      return parser.parse();
    }

    @Override public String toString() {
      return literal;
    }

    /**
     * @return a name describing the literal, used in parsing error messages.
     */
    private String name() {
      String name;
      switch (kind) {
        case DECIMAL:
          name = "decimal";
          break;
        case HEXADECIMAL:
          name = "hexadecimal";
          break;
        case OCTAL:
          name = "octal";
          break;
        case BINARY:
        default: // Needed to convince javac that all paths assign name.
          name = "binary";
          break;
      }
      if (floating) {
        return name + " floating point";
      } else {
        return name;
      }
    }

    /**
     * The next character in the literal is a significant character;
     * push it onto the buffer.
     */
    private void pushChar() {
      out.append(literal.charAt(idx++));
    }

    /**
     * Skip ahead n chracters in the literal.
     */
    private void skip(int n) {
      idx += n;
    }

    /**
     * @return {@code true} if there exists at least n more characters
     * in the literal
     */
    private boolean have(int n) {
      return literal.length() >= idx + n;
    }

    /**
     * Look at the n'th next character.
     */
    private char peek(int n) {
      return literal.charAt(idx + n);
    }

    /**
     * @return true if the character c is a decimal digit
     */
    private static final boolean isDecimalDigit(char c) {
      return c == '_' || c >= '0' && c <= '9';
    }

    /**
     * @return true if the character c is a hexadecimal digit
     */
    private static final boolean isHexadecimalDigit(char c) {
      return c == '_' || c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
    }

    /**
     * @return true if the character c is a binary digit
     */
    private static final boolean isBinaryDigit(char c) {
      return c == '_' || c == '0' || c == '1';
    }

    /**
     * @return true if the character c is an underscore
     */
    private static final boolean isUnderscore(char c) {
      return c == '_';
    }

    /**
     * Parse a literal. If there is a syntax error in the literal,
     * an IllegalLiteral will be returned.
     */
    public Literal parse() {
      if (idx != 0 || out.length() != 0) {
        throw new IllegalStateException("Already parsed literal.");
      }
      if (literal.length() == 0) {
        throw new IllegalStateException("Can't parse empty literal.");
      }
      kind = classifyLiteral();
      if (!floating) {
        return parseDigits();
      } else {
        return parseFractionPart();
      }
    }

    /**
     * Classify the literal.
     *
     * @return either DECIMAL, HEXADECIMAL or BINARY
     */
    private NumericLiteralKind classifyLiteral() {
      if (peek(0) == '.') {
        floating = true;
        return NumericLiteralKind.DECIMAL;
      } else if (peek(0) == '0') {
        if (!have(2)) {
          // This is the only 1-length string that starts with 0!
          return NumericLiteralKind.DECIMAL;
        } else if (peek(1) == 'x' || peek(1) == 'X') {
          skip(2);
          return NumericLiteralKind.HEXADECIMAL;
        } else if (peek(1) == 'b' || peek(1) == 'B') {
          skip(2);
          return NumericLiteralKind.BINARY;
        } else {
          return NumericLiteralKind.DECIMAL;
        }
      } else {
        return NumericLiteralKind.DECIMAL;
      }
    }

    /**
     * If the current character is an underscore, the previous and next
     * characters need to be valid digits or underscores.
     *
     * @return true if the underscore is misplaced
     */
    private boolean misplacedUnderscore() {
      // The first and last characters are never allowed to be underscores.
      if (idx == 0 || idx + 1 == literal.length()) {
        return true;
      }

      switch (kind) {
        case DECIMAL:
          return !(isDecimalDigit(peek(-1)) && isDecimalDigit(peek(1)));
        case HEXADECIMAL:
          return !(isHexadecimalDigit(peek(-1)) && isHexadecimalDigit(peek(1)));
        case BINARY:
          return !(isBinaryDigit(peek(-1)) && isBinaryDigit(peek(1)));
      }
      throw new IllegalStateException("Unexpected literal kind");
    }

    /**
     * Report an illegal digit.
     */
    private Literal syntaxError(String msg) {
      return new IllegalLiteral(String.format("in %s literal \"%s\": %s", name(), literal, msg));
    }

    private Literal unexpectedCharacter(char c) {
      return syntaxError("unexpected character '" + c + "'; not a valid digit");
    }

    /**
     * Returns a string of only the lower case digits of the
     * parsed numeric literal.
     */
    private String getLiteralString() {
      return out.toString().toLowerCase();
    }

    /**
     * Parse and build an IntegerLiteral, LongLiteral, FloatingPointLiteral or
     * DoubleLiteral. Returns an IllegalLiteral if the numeric literal cannot
     * be parsed.
     *
     * <p>Note: does not perform bounds checks.
     *
     * @return a concrete literal on success, or an IllegalLiteral if there is a syntax error
     */
    private Literal buildLiteral() {
      String digits = out.toString().toLowerCase();

      if (!floating) {
        if (!whole) {
          return syntaxError("at least one digit is required");
        }

        // Check if the literal is octal, and if so report illegal digits.
        if (kind == NumericLiteralKind.DECIMAL) {
          if (digits.charAt(0) == '0') {
            kind = NumericLiteralKind.OCTAL;
            for (int idx = 1; idx < digits.length(); ++idx) {
              char c = digits.charAt(idx);
              if (c < '0' || c > '7') {
                return unexpectedCharacter(c);
              }
            }
          }
        }

        if (isLong) {
          return new LongLiteral(literal);
        } else {
          return new IntegerLiteral(literal);
        }
      } else {
        if (kind == NumericLiteralKind.HEXADECIMAL && !exponent) {
          return syntaxError("exponent is missing");
        }

        if (exponentSpecifier && !exponent) {
          return syntaxError("expected exponent after exponent specifier");
        }

        if (!(whole || fraction)) {
          return syntaxError("at least one digit is required in "
              + "either the whole or fraction part");
        }

        if (isFloat) {
          return new FloatingPointLiteral(literal);
        } else {
          return new DoubleLiteral(literal);
        }
      }
    }

    private Literal parseDigits() {
      while (have(1)) { // Continue while there is at least one more character/digit.
        char c = peek(0);
        switch (c) {
          case '_':
            if (misplacedUnderscore()) {
              return syntaxError("misplaced underscore - underscores may only "
                  + "be used within sequences of digits");
            }
            skip(1);
            continue;
          case '.':
            if (kind != NumericLiteralKind.DECIMAL && kind != NumericLiteralKind.HEXADECIMAL) {
              return unexpectedCharacter(c);
            }
            return parseFractionPart();
          case 'l':
          case 'L':
            if (have(2)) {
              return syntaxError("extra digits/characters after suffix " + c);
            }
            isLong = true;
            skip(1);
            continue;
        }

        switch (kind) {
          case DECIMAL:
            if (c == 'e' || c == 'E') {
              return parseExponentPart();
            } else if (c == 'f' || c == 'F') {
              if (have(2)) {
                return syntaxError("extra digits/characters after type suffix " + c);
              }
              floating = true;
              isFloat = true;
              skip(1);
            } else if (c == 'd' || c == 'D') {
              if (have(2)) {
                return syntaxError("extra digits/characters after type suffix " + c);
              }
              floating = true;
              skip(1);
            } else {
              if (!isDecimalDigit(c)) {
                return unexpectedCharacter(c);
              }
              whole = true;
              pushChar();
            }
            continue;
          case HEXADECIMAL:
            if (c == 'p' || c == 'P') {
              return parseExponentPart();
            }

            if (!isHexadecimalDigit(c)) {
              return unexpectedCharacter(c);
            }
            whole = true;
            pushChar();
            continue;
          case BINARY:
            if (!isBinaryDigit(c)) {
              return unexpectedCharacter(c);
            }
            whole = true;
            pushChar();
            continue;
        }
      }
      return buildLiteral();
    }

    private Literal parseFractionPart() {
      floating = true;

      // Current char is the decimal period.
      pushChar();

      // While we have at least one more character/digit.
      while (have(1)) {
        char c = peek(0);
        switch (c) {
          case '_':
            if (misplacedUnderscore()) {
              return syntaxError("misplaced underscore - underscores may only "
                  + "be used as separators within sequences of valid digits");
            }
            skip(1);
            continue;
          case '.':
            return syntaxError("multiple decimal periods are not allowed");
        }

        if (kind == NumericLiteralKind.DECIMAL) {
          if (c == 'e' || c == 'E') {
            return parseExponentPart();

          } else if (c == 'f' || c == 'F') {
            if (have(2)) {
              return syntaxError("extra digits/characters after type suffix " + c);
            }
            floating = true;
            isFloat = true;
            skip(1);
          } else if (c == 'd' || c == 'D') {
            if (have(2)) {
              return syntaxError("extra digits/characters after type suffix " + c);
            }
            floating = true;
            skip(1);
          } else {
            if (!isDecimalDigit(c)) {
              return unexpectedCharacter(c);
            }
            pushChar();
            fraction = true;
          }
        } else { // kind == HEXADECIMAL
          if (c == 'p' || c == 'P') {
            return parseExponentPart();
          }

          if (!isHexadecimalDigit(c)) {
            return unexpectedCharacter(c);
          }
          fraction = true;
          pushChar();
        }
      }

      return buildLiteral();
    }

    private Literal parseExponentPart() {
      floating = true;

      // Current char is the exponent specifier char.
      pushChar();

      exponentSpecifier = true;

      // Exponent sign.
      if (have(1) && (peek(0) == '+' || peek(0) == '-')) {
        pushChar();
      }

      // While we have at least one more character/digit.
      while (have(1)) {
        char c = peek(0);
        switch (c) {
          case '_':
            if (misplacedUnderscore()) {
              return syntaxError("misplaced underscore - underscores may only "
                  + "be used as separators within sequences of valid digits");
            }
            skip(1);
            continue;
          case '-':
          case '+':
            return syntaxError("exponent sign character is only allowed as "
                + "the first character of the exponent part of a "
                + "floating point literal");
          case '.':
            return syntaxError("multiple decimal periods are not allowed");
          case 'p':
          case 'P':
          case 'e':
          case 'E':
            return syntaxError("multiple exponent specifiers are not allowed");
          case 'f':
          case 'F':
            isFloat = true;
          case 'd':
          case 'D':
            if (have(2)) {
              return syntaxError("extra digits/characters after type suffix " + c);
            }
            skip(1);
            continue;
        }

        // Exponent is a signed integer.
        if (!isDecimalDigit(c)) {
          return unexpectedCharacter(c);
        }
        pushChar();
        exponent = true;
      }

      return buildLiteral();
    }
  }

  // The constant field is added to store a constant value when it is
  // unecessary to parse the string representation.
  // The constant field is used when building a literal from a bytecode constant value.

  protected Constant DoubleLiteral.constant = null;

  public DoubleLiteral.DoubleLiteral(String literal, Constant constant) {
    this(literal);
    this.constant = constant;
  }

  refine BytecodeCONSTANT
  public static Literal Literal.buildDoubleLiteral(double value) {
    return new DoubleLiteral(Double.toString(value), Constant.create(value));
  }

  protected Constant FloatingPointLiteral.constant = null;

  public FloatingPointLiteral.FloatingPointLiteral(String literal, Constant constant) {
    this(literal);
    this.constant = constant;
  }

  refine BytecodeCONSTANT
  public static Literal Literal.buildFloatLiteral(float value) {
    return new FloatingPointLiteral(Double.toString(value), Constant.create(value));
  }

  protected Constant IntegerLiteral.constant = null;

  public IntegerLiteral.IntegerLiteral(String literal, Constant constant) {
    this(literal);
    this.constant = constant;
  }

  refine BytecodeCONSTANT
  public static Literal Literal.buildIntegerLiteral(int value) {
    return new IntegerLiteral("0x"+Integer.toHexString(value), Constant.create(value));
  }

  protected Constant LongLiteral.constant = null;

  public LongLiteral.LongLiteral(String literal, Constant constant) {
    this(literal);
    this.constant = constant;
  }

  refine BytecodeCONSTANT
  public static Literal Literal.buildLongLiteral(long value) {
    return new LongLiteral("0x"+Long.toHexString(value), Constant.create(value));
  }

}
