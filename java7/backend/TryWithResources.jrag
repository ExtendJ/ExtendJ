/* Copyright (c) 2011-2017, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect TryWithResources {

  /**
   * An NTA which is used for code generation.
   *
   * This NTA will handle the recursive nature of code
   * generation for try-with-resources statements.
   */
  syn nta Stmt TryWithResources.getTransformed() {
    if (getNumCatchClause() == 0 && !hasNonEmptyFinally()) {
      // Transform to BasicTWR.
      Block block;
      if (getNumResource() == 1) {
        block = (Block) getBlock().treeCopy();
      } else {
        block = new Block();
        List<ResourceDeclaration> resourceListTail = new List<ResourceDeclaration>();
        for (int i = 1; i < getNumResource(); ++i) {
          resourceListTail.add((ResourceDeclaration) getResource(i).treeCopyNoTransform());
        }
        block.addStmt(new TryWithResources(
              resourceListTail,
              (Block) getBlock().treeCopyNoTransform(),
              new List<CatchClause>(),
              new Opt<Block>()));
      }
      return new BasicTWR(
          (ResourceDeclaration)
          getResource(0).treeCopyNoTransform(),
          block);
    } else {
      // Transform to surrounding try statement.
      Block block = new Block();
      block.addStmt(new TryWithResources(
            (List<ResourceDeclaration>)
            getResourceList().treeCopyNoTransform(),
            (Block) getBlock().treeCopyNoTransform(),
            new List<CatchClause>(),
            new Opt<Block>()));

      return new TryStmt(block,
          (List<CatchClause>) getCatchClauseList().treeCopyNoTransform(),
          (Opt<Block>) getFinallyOpt().treeCopyNoTransform());
    }
  }

  /**
   * Code generation for the try-with-resources statement.
   */
  public void TryWithResources.createBCode(CodeGeneration gen) {

    getTransformed().createBCode(gen);
  }

  /**
   * The general structure of the basic try-with-resources:
   *
   * <pre><code>
   * RESOURCE
   * BLOCK
   *
   * Primary Exception Handler
   *   Automatic Closing of Resource
   *     Suppressed Exception Handler
   *   re-throw primary exception
   * Automatic Closing of Resource
   * </pre></code>
   *
   * Pseudocode for basic try-with-resources:
   *
   * <pre><code>
   * 0  .resourceBegin
   * 1  emit RESOURCE
   * 0  store resource
   * 0  .resourceEnd
   *
   * 0  .blockBegin
   * 0  emit BLOCK
   * 0  .blockEnd
   * 0  goto outerFinally
   *
   * 1  .resourceException
   * 1  throw
   *
   * #if BLOCK is not empty:
   *
   * 1  .catchPrimary
   * 0  store primary
   *
   * 0  .tryCloseBegin
   * 1  load resource
   * 0  ifnull innerFinally
   * 1  load resource
   * 0  invoke java.lang.AutoCloseable.close()
   * 0  .tryCloseEnd
   *
   * 0  goto innerFinally
   *
   * 1  .catchSuppressed
   * 0  store suppressed
   * 1  load primary
   * 2  load suppressed
   * 0  invoke java.lang.Throwable.addSuppressed(Throwable)
   *
   * 0  .innerFinally
   * 1  load primary
   * 1  throw
   *
   * #endif BLOCK is not empty
   *
   * 0  .outerFinally
   * 1  load resource
   * 0  ifnull tryEnd
   * 1  load resource
   * 0  invoke java.lang.AutoCloseable.close()
   *
   * 0  .tryEnd
   *
   * Exception Table:
   * resourceBegin .. resourceEnd : resourceException
   * blockBegin .. blockEnd : catchPrimary
   * tryCloseBegin .. tryCloseEnd : catchSuppressed
   * </pre></code>
   *
   */
  public void BasicTWR.createBCode(CodeGeneration gen) {
    ResourceDeclaration resource = getResource();

    int resourceBeginLbl = gen.constantPool().newLabel();
    int resourceEndLbl = gen.constantPool().newLabel();
    int blockBeginLbl = gen.constantPool().newLabel();
    int blockEndLbl = gen.constantPool().newLabel();
    int tryCloseBeginLbl = gen.constantPool().newLabel();
    int tryCloseEndLbl = gen.constantPool().newLabel();

    int resourceExceptionLbl = gen.constantPool().newLabel();
    int catchPrimaryLbl = gen.constantPool().newLabel();
    int catchSuppressedLbl = gen.constantPool().newLabel();
    int innerFinallyLbl = gen.constantPool().newLabel();
    int outerFinallyLbl = gen.constantPool().newLabel();
    int tryEndLbl = gen.constantPool().newLabel();

    TypeDecl throwableType = lookupType("java.lang", "Throwable");
    TypeDecl resourceType = resource.type();
    TypeDecl autoCloseableType = lookupType("java.lang", "AutoCloseable");

    int resourceIndex = resource.localNum();
    int primaryIndex = resourceIndex+resourceType.variableSize();
    int suppressedIndex = primaryIndex+throwableType.variableSize();

    // Store the resource in local.
    gen.addLabel(resourceBeginLbl);
    resource.createBCode(gen);
    gen.addLabel(resourceEndLbl);
    gen.NOP();

    gen.addLabel(blockBeginLbl);
    getBlock().createBCode(gen);
    gen.addLabel(blockEndLbl);
    gen.GOTO(outerFinallyLbl);

    // If there was an exception when initializing the resource
    // we need to directly rethrow the exception.
    gen.addLabel(resourceExceptionLbl);
    gen.ATHROW();
    gen.addCatchAll(resourceBeginLbl, resourceEndLbl, resourceExceptionLbl);

    if (gen.addressOf(blockBeginLbl) != gen.addressOf(blockEndLbl)) {

      // Catch primary exception:
      // operand stack: .., #primary
      gen.addLabel(catchPrimaryLbl);
      throwableType.emitStoreLocal(gen, primaryIndex);

      // Try-close resource:
      gen.addLabel(tryCloseBeginLbl);
      {
        // if resource != null
        resourceType.emitLoadLocal(gen, resourceIndex);
        gen.IFNULL(innerFinallyLbl);
        resourceType.emitLoadLocal(gen, resourceIndex);
        closeMethod().emitInvokeMethod(gen, autoCloseableType);
      }
      gen.addLabel(tryCloseEndLbl);
      gen.GOTO(innerFinallyLbl);

      // Catch suppressed exception.
      // operand stack: .., #primary, #suppressed
      gen.addLabel(catchSuppressedLbl);
      throwableType.emitStoreLocal(gen, suppressedIndex);
      throwableType.emitLoadLocal(gen, primaryIndex);
      throwableType.emitLoadLocal(gen, suppressedIndex);
      addSuppressedMethod().emitInvokeMethod(gen, throwableType);

      // Inner finally:
      // operand stack: .., #primary
      gen.addLabel(innerFinallyLbl);
      throwableType.emitLoadLocal(gen, primaryIndex);
      gen.ATHROW();

      // If there was an exception during the block of the try
      // statement, then we should try to close the resource.
      gen.addCatchAll(blockBeginLbl, blockEndLbl, catchPrimaryLbl);

      // If an exception occurrs during the automatic closing
      // of a resource after an exception in the try block...
      gen.addCatchAll(tryCloseBeginLbl, tryCloseEndLbl, catchSuppressedLbl);
    }

    // Outer finally.
    gen.addLabel(outerFinallyLbl);
    {
      // if resource != null
      resourceType.emitLoadLocal(gen, resourceIndex);
      gen.IFNULL(tryEndLbl);
      resourceType.emitLoadLocal(gen, resourceIndex);
      closeMethod().emitInvokeMethod(gen, autoCloseableType);
    }

    gen.addLabel(tryEndLbl);
    gen.NOP();
  }

  /**
   * Lookup the java.lang.Throwable.close() method.
   */
  private MethodDecl BasicTWR.closeMethod() {
    TypeDecl autoCloseableType = lookupType("java.lang", "AutoCloseable");
    if (autoCloseableType.isUnknown()) {
      throw new Error("Could not find java.lang.AutoCloseable");
    }
    for (MethodDecl method : (Collection<MethodDecl>)
        autoCloseableType.memberMethods("close")) {
      if (method.getNumParameter() == 0) {
        return method;
      }
    }
    throw new Error("Could not find java.lang.AutoCloseable.close()");
  }

  /**
   * Lookup the java.lang.Throwable.addSuppressed(Throwable) method.
   */
  private MethodDecl BasicTWR.addSuppressedMethod() {
    TypeDecl throwableType = lookupType("java.lang", "Throwable");
    if (throwableType.isUnknown()) {
      throw new Error("Could not find java.lang.Throwable");
    }
    for (MethodDecl method : (Collection<MethodDecl>)
        throwableType.memberMethods("addSuppressed")) {
      if (method.getNumParameter() == 1 &&
          method.getParameter(0).getTypeAccess().type() == throwableType) {
        return method;
      }
    }
    throw new Error("Could not find java.lang.Throwable.addSuppressed()");
  }

  /**
   * Local indices to store the resources.
   */
  eq BasicTWR.getResource().localNum() = localNum();

  /**
   * Local indices for the block are adjusted to account for the resource
   * variables.
   *
   * One variable slot is used for the resource, and two slots for the finally block.
   */
  eq BasicTWR.getBlock().localNum() = getResource().localNum() + 3;

  eq BasicTWR.getResource().declarationModifiers() = getResource().getModifiers();

  eq BasicTWR.getResource().declarationType() = getResource().getResourceType();
}
